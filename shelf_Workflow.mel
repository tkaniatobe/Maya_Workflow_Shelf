global proc shelf_Workflow () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Texture coordinate mapping view" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "UV Texture Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "UTE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "TextureViewWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "GoZ" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "GoZ" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "tinyBoldLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "/Users/Shared/Pixologic/GoZApps/Maya/GoZBrush.xpm" 
        -image1 "/Users/Shared/Pixologic/GoZApps/Maya/GoZBrush.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/Users/Shared/Pixologic/GoZApps/Maya/GoZBrushFromMaya.mel\"\r" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit the contents of the shelf" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Shelf Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ShelfPreferencesWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Enter Maya Embedded Language (MEL) commands" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Script Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ScriptEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set and save Maya preferences" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Preferences" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Pre" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "PreferencesWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "List the objects in the scene" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Outliner" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Out" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "OutlinerWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Display and edit connections in shading networks" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hypershade" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Hshd" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HypershadeWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit animation curves" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Graph Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "GE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "GraphEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "FRZ" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "FreezeTransformations;\nmakeIdentity -apply true -t 1 -r 1 -s 1 -..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FRZ" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformations;\nmakeIdentity -apply true -t 1 -r 1 -s 1 -n 0;\nCenterPivot;\nDeleteHistory;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Freeze Transformations" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformations" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Center Pivot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CenterPivot" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete construction history on the selected object(s)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "History" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "His" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeleteHistory" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a curve on the grid or live surface specifying control vertices" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "CV Curve Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "curveCV.png" 
        -image1 "curveCV.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CVCurveTool" 
        -sourceType "mel" 
        -doubleClickCommand "CVCurveToolOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select two sets of NURBS surfaces" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Difference Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "nurbsShellSubtract.png" 
        -image1 "nurbsShellSubtract.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "nurbsBooleanPreset 1 {\"1\", \"2\", \"1\", \"1\" }" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select pairs of surface edges that meet" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Round Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "roundSrf.png" 
        -image1 "roundSrf.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RoundTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select a point on an edge to start cutting the face" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Split Polygon Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "polySplitFacet.png" 
        -image1 "polySplitFacet.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SplitPolygonTool" 
        -sourceType "mel" 
        -doubleClickCommand "SplitPolygonToolOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Split selected edge ring" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Insert Edge Loop Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polySplitEdgeRing.png" 
        -image1 "polySplitEdgeRing.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SplitEdgeRingTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a bridge between two sets of edges or faces " 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Bridge" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polyBridge.png" 
        -image1 "polyBridge.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "performPolyBridgeEdge 0" 
        -sourceType "mel" 
        -doubleClickCommand "BridgeEdgeOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Hide the selected object(s)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hide Selection" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "HS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HideSelectedObjects" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Hide all objects that are not selected" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hide Unselected Objects" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "HUO" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HideUnselectedObjects" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Show the last hidden item" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Show Last Hidden" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SLH" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ShowLastHidden" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Show all selected objects" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Show Selection" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ShowSelectedObjects" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Show all objects" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "All" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "All" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ShowAll" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rebuild surfaces options" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "rebuildSurfaceDialogItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "rebuildSurface.png" 
        -image1 "rebuildSurface.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RebuildSurfacesOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rebuild curve options" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rebuild Curve Option Box" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "rebuildCurve.png" 
        -image1 "rebuildCurve.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RebuildCurveOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Duplicate Special options" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "dupSpecOptItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DSo" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DuplicateSpecialOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete the selected Vertices / Edges" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Delete Edge/Vertex" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polyDelEdgeVertex.png" 
        -image1 "polyDelEdgeVertex.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "performPolyDeleteElements" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Combine the selected polygon objects into one single object to allow operations such as merges or face trims" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Combine" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polyUnite.png" 
        -image1 "polyUnite.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "polyPerformAction polyUnite o 0" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Separate the selected polygon object shells or the shells of any selected faces from the object into distinct objects" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Separate" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "polySeparate.png" 
        -image1 "polySeparate.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SeparatePolygon" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Display and edit relationships among nodes in your scene graphically using the input and output connection view" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hypergraph: Connections" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Hgph" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HypergraphDGWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select object(s) to animate along a motion path, followed by the motion path curve" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Attach to Motion Path" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "motionPath.png" 
        -image1 "motionPath.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType \"vector\" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Zebruv : Unwrap UV Tool" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Zebruv : Unwrap UV Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "zebruv_icon.xpm" 
        -image1 "zebruv_icon.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"zebruvUI.mel\";zebruvUI();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Toggle local rotation axis visibility" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Local Rotation Axes" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LRA" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ToggleLocalRotationAxes" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "mixmo" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "DJB_ABOUT_TEXT = \"\"\"\nMIXAMO Maya Auto Control Rig      \nwww.mixa..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "mxmo" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DJB_ABOUT_TEXT = \"\"\"\nMIXAMO Maya Auto Control Rig      \nwww.mixamo.com/c/maya-auto-control-rig   \nCopyright Mixamo www.mixamo.com 2012 Created by Dan Babcock\n    Additional code by Paolo Dominici: Thanks for letting us integrate ZV Dynamics!\n\nThis script automatically creates a no-bake-necessary control rig for \n    editing MIXAMO motions and/or keyframing animation\n\n    \nNotes:\n    Autodesk Maya 2009 or higher is required.\n    Requires a character Autorigged by Mixamo\n\nTo Use:\n    Run the script.\n\nNoted Features:\n    FK/IK legs and arms that follow animation data with no baking\n    Keyable AnimDataMult attributes that exaggerate or ignore animation data\n    The ability to bake animation to controls at any point in time\n    The ability to clear controls at any point in time, preserving animation\n    IK legs and arms can follow body motion\n    Hands and Feet custom attributes\n    Export baked FK skeleton\n    Dynamic Joints / Joint Chains\n\"\"\"\n\nMixamo_AutoControlRig_Version = \"1.5.0\"\n\nDJB_CHANGELOG_TEXT = \"\"\"\nChanges in 1.5.0:\n    Fixed bug with mesh export\n    Blendshape animation now exports with \"Export with Mesh\" \n        *Only works on non-referenced rigs - needs to disconnect and reconnect attributes\n    Fixed bug in IK creation\n    Removed extraneous code\n    Added option to remove end joints on export\nChanges in 1.04d:\n    Fix for no finger joints at all\nChanges in 1.04c:\n    Added support for characters with only one spine joint\n    Fixed some namespace issues\n    Extra Joints exports now have translates unlocked\nChanges in 1.04b:\n    Added handling of meshes (usually blendshapes) where \n      the shape node had the same name as the transform\nChanges in 1.04a:\n    Added support for dynamic joints and joint chains! \n      (integrated ZV Dynamics by Paolo Dominici)\n    Added utilities for recreating infonodes \n    Fixed application of namespace on export joints when \n      namespace is not present in the scene\n    Reworked UI\n    Batching functionality\n\"\"\"\n\n    \nimport maya.cmds as mayac\nimport maya.mel as mel\nimport maya.OpenMaya as OpenMaya\nimport math\nimport sys\nimport re\nimport cPickle\nimport os\nmel.eval(\"source channelBoxCommand.mel;\")\nmel.eval(\"cycleCheck -e off\")\n\nFBXpluginLoaded = mayac.pluginInfo(\"fbxmaya\", query = True, loaded = True)\nif not FBXpluginLoaded:\n    mayac.loadPlugin( \"fbxmaya\")\n\nERRORCHECK = 0\nJOINT_NAMESPACE = \"\"\nproportionCheckTolerance = .03\nDJB_Character_ProportionOverrideCube = \"\"\n\n\n\n\n#assorted functions\ndef goToWebpage(page):\n    if page == \"mixamo\":\n        mayac.showHelp( 'http://www.mixamo.com', absolute = True)\n    elif page == \"autoRigger\":\n        mayac.showHelp( 'http://www.mixamo.com/c/auto-rigger', absolute = True)\n    elif page == \"motions\":\n        mayac.showHelp( 'http://www.mixamo.com/motions', absolute = True)\n    elif page == \"autoControlRig\":\n        mayac.showHelp( 'http://www.mixamo.com/c/auto-control-rig-for-maya', absolute = True)\n    elif page == \"community\":\n        mayac.showHelp( 'https://community.mixamo.com', absolute = True)\n    elif page == \"tutorials\":\n        mayac.showHelp( 'https://community.mixamo.com/hc/en-us/sections/200559213-Maya', absolute = True)\n    else:\n        OpenMaya.MGlobal.displayError(\"Webpage Call Invalid\")\n\ndef DJB_BrowserWindow(filter_ = None, caption_ = \"Browse\", fileMode_ = \"directory\"):\n    multipleFilters = None\n    filtersOld = None\n    if filter_ == \"Maya\":\n        multipleFilters = \"Maya Files (*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb)\"\n        filtersOld = None\n    elif filter_ == \"Maya_FBX\":\n        multipleFilters = \"Maya Files (*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;FBX (*.fbx);;All Files (*.*)\"\n    elif filter_ == \"FBX\":\n        multipleFilters = \"FBX (*.fbx);;All Files (*.*)\"\n    else:\n        multipleFilters = \"\"\n    window = None    \n    version = mel.eval(\"float $ver = `getApplicationVersionAsFloat`;\")\n    if version <= 2011.0:\n        if fileMode_ == \"directory\":\n            window = mayac.fileBrowserDialog(dialogStyle = 2, windowTitle = caption_, fileType = \"directory\")\n    else: #new style dialog window\n        if fileMode_ == \"directory\":\n            window = mayac.fileDialog2(fileFilter=multipleFilters, dialogStyle=2, caption = caption_, fileMode = 3, okCaption = \"Select\")\n        else:\n            window = mayac.fileDialog2(fileFilter=multipleFilters, dialogStyle=2, caption = caption_, fileMode = 4, okCaption = \"Select\")\n    if window:\n        return window[0]\n    else:\n        return window\n\ndef DJB_LockNHide(node, tx = True, ty = True, tz = True, rx = True, ry = True, rz = True, s = True, v = True, other = None):\n    if tx:\n        mayac.setAttr(\"%s.tx\" % (node), lock = True, keyable = False, channelBox  = False)\n    if ty:\n        mayac.setAttr(\"%s.ty\" % (node), lock = True, keyable = False, channelBox  = False)\n    if tz:\n        mayac.setAttr(\"%s.tz\" % (node), lock = True, keyable = False, channelBox  = False)\n    if rx:\n        mayac.setAttr(\"%s.rx\" % (node), lock = True, keyable = False, channelBox  = False)\n    if ry:\n        mayac.setAttr(\"%s.ry\" % (node), lock = True, keyable = False, channelBox  = False)\n    if rz:\n        mayac.setAttr(\"%s.rz\" % (node), lock = True, keyable = False, channelBox  = False)\n    if s:\n        mayac.setAttr(\"%s.sx\" % (node), lock = True, keyable = False, channelBox  = False)\n        mayac.setAttr(\"%s.sy\" % (node), lock = True, keyable = False, channelBox  = False)\n        mayac.setAttr(\"%s.sz\" % (node), lock = True, keyable = False, channelBox  = False)\n    if v:\n        mayac.setAttr(\"%s.v\" % (node), lock = True, keyable = False, channelBox  = False)\n    if other:\n        for att in other:\n            if mayac.objExists(\"%s.%s\" % (node, att)):\n                mayac.setAttr(\"%s.%s\" % (node, att), lock = True, keyable = False, channelBox  = False)\n        \n        \ndef DJB_Unlock(node, tx = True, ty = True, tz = True, rx = True, ry = True, rz = True, s = True, v = True):\n    if tx:\n        mayac.setAttr(\"%s.tx\" % (node), lock = False, keyable = True)\n    if ty:\n        mayac.setAttr(\"%s.ty\" % (node), lock = False, keyable = True)\n    if tz:\n        mayac.setAttr(\"%s.tz\" % (node), lock = False, keyable = True)\n    if rx:\n        mayac.setAttr(\"%s.rx\" % (node), lock = False, keyable = True)\n    if ry:\n        mayac.setAttr(\"%s.ry\" % (node), lock = False, keyable = True)\n    if rz:\n        mayac.setAttr(\"%s.rz\" % (node), lock = False, keyable = True)\n    if s:\n        mayac.setAttr(\"%s.sx\" % (node), lock = False, keyable = True)\n        mayac.setAttr(\"%s.sy\" % (node), lock = False, keyable = True)\n        mayac.setAttr(\"%s.sz\" % (node), lock = False, keyable = True)\n    if v:\n        mayac.setAttr(\"%s.v\" % (node), lock = False, keyable = True)\n \n \ndef DJB_Unlock_Connect_Lock(att1, att2):\n    mayac.setAttr(att2, lock = False, keyable = True)\n    mayac.connectAttr(att1, att2)\n    mayac.setAttr(att2, lock = True, keyable = False) \n    \ndef DJB_ConnectAll(xform1, xform2):\n    mayac.connectAttr(\"%s.tx\"%(xform1), \"%s.tx\"%(xform2))\n    mayac.connectAttr(\"%s.ty\"%(xform1), \"%s.ty\"%(xform2))\n    mayac.connectAttr(\"%s.tz\"%(xform1), \"%s.tz\"%(xform2))\n    mayac.connectAttr(\"%s.rx\"%(xform1), \"%s.rx\"%(xform2))\n    mayac.connectAttr(\"%s.ry\"%(xform1), \"%s.ry\"%(xform2))\n    mayac.connectAttr(\"%s.rz\"%(xform1), \"%s.rz\"%(xform2))\n\ndef DJB_parentShape(master, slaveGRP):\n    mayac.parent(slaveGRP, master)\n    mayac.makeIdentity(slaveGRP, apply = True, t=1, r=1, s=1, n=0) \n    shapes = mayac.listRelatives(slaveGRP, shapes = True)\n    for shape in shapes:\n        mayac.parent(shape, master, relative = True, shape = True)\n    mayac.delete(slaveGRP)\n\ndef DJB_createGroup(transform = None, suffix = None, fullName = None, pivotFrom = \"self\"):\n    Grp = 0\n    if suffix:\n        Grp = mayac.group(empty = True, name = (transform + suffix))\n    elif fullName:\n        Grp = mayac.group(empty = True, name = fullName)\n    else:\n        Grp = mayac.group(empty = True, name = (transform + \"GRP\"))\n    if pivotFrom == \"self\":\n        mayac.delete(mayac.parentConstraint(transform, Grp))\n    else:\n        mayac.delete(mayac.parentConstraint(pivotFrom, Grp))\n    if transform:\n        mayac.parent(transform, Grp)\n    return Grp\n\ndef DJB_movePivotToObject(moveMe, toHere, posOnly = False):\n    POS = mayac.xform(toHere, query=True, absolute=True, worldSpace=True ,rp=True)\n    mayac.move(POS[0], POS[1], POS[2], (moveMe + \".rotatePivot\"), (moveMe + \".scalePivot\"), absolute=True, worldSpace=True)\n    if not posOnly:\n        mayac.parent(moveMe, toHere)\n        DJB_cleanGEO(moveMe)\n        mayac.parent(moveMe, world=True)\n         \n\ndef DJB_findBeforeSeparator(object, separatedWith):\n    latestSeparator = object.rfind(separatedWith)\n    return object[0:latestSeparator+1]\n    \ndef DJB_findAfterSeperator(object, separatedWith):\n    latestSeparator = object.rfind(separatedWith)\n    return object[latestSeparator+1:len(object)]\n    \n    \ndef DJB_addNameSpace(namespace, string):\n    if string == None:\n        return None\n    elif namespace == None:\n        return string\n    else:\n        return namespace + string\n    \ndef DJB_cleanGEO(mesh):\n    mayac.setAttr(\"%s.tx\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.ty\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.tz\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.rx\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.ry\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.rz\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.sx\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.sy\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.sz\" % (mesh), lock = False, keyable = True)\n    mayac.setAttr(\"%s.visibility\" % (mesh), lock = False, keyable = True)\n    mayac.makeIdentity(mesh, apply = True, t=1, r=1, s=1, n=0)\n    mayac.delete(mesh, constructionHistory = True)\n    return mesh    \n\n\ndef DJB_ZeroOut(transform):\n    if transform:\n        if not mayac.getAttr(\"%s.tx\" % (transform),lock=True):\n            mel.eval('CBdeleteConnection \"%s.tx\";'%(transform))\n            mayac.setAttr(\"%s.tx\" % (transform), 0)\n        if not mayac.getAttr(\"%s.ty\" % (transform),lock=True):\n            mel.eval('CBdeleteConnection \"%s.ty\";'%(transform))\n            mayac.setAttr(\"%s.ty\" % (transform), 0)\n        if not mayac.getAttr(\"%s.tz\" % (transform),lock=True):\n            mel.eval('CBdeleteConnection \"%s.tz\";'%(transform))\n            mayac.setAttr(\"%s.tz\" % (transform), 0)\n        if not mayac.getAttr(\"%s.rx\" % (transform),lock=True):\n            mel.eval('CBdeleteConnection \"%s.rx\";'%(transform))\n            mayac.setAttr(\"%s.rx\" % (transform), 0)\n        if not mayac.getAttr(\"%s.ry\" % (transform),lock=True):\n            mel.eval('CBdeleteConnection \"%s.ry\";'%(transform))\n            mayac.setAttr(\"%s.ry\" % (transform), 0)\n        if not mayac.getAttr(\"%s.rz\" % (transform),lock=True):\n            mel.eval('CBdeleteConnection \"%s.rz\";'%(transform))\n            mayac.setAttr(\"%s.rz\" % (transform), 0)\n\n\ndef DJB_ZeroOutAtt(att, value = 0):\n    if mayac.objExists(\"%s\" % (att)):\n        mel.eval('CBdeleteConnection %s;'%(att))\n        mayac.setAttr(\"%s\" % (att), value)\n\n\ndef DJB_ChangeDisplayColor(object, color = None):\n    colorNum = 0\n    if color == \"red1\":\n        colorNum = 12\n    elif color == \"red2\":\n        colorNum = 10\n    elif color == \"red3\":\n        colorNum = 24\n    elif color == \"blue1\":\n        colorNum = 15\n    elif color == \"blue2\":\n        colorNum = 29\n    elif color == \"blue3\":\n        colorNum = 28\n    elif color == \"yellow\":\n        colorNum = 17\n    elif color == \"white\":\n        colorNum = 16\n    else:    #default is black\n        colorNum = 1\n    if object:\n        mayac.setAttr('%s.overrideEnabled' % (object), 1)\n        mayac.setAttr('%s.overrideColor' % (object), colorNum)\n\n\ndef DJB_CheckAngle(object1, object2, object3, axis = \"z\", multiplier = 1): #axis can be \"x\", \"y\", or \"z\"\n    obj1POS = mayac.xform(object1, query = True, worldSpace = True, absolute = True, translation = True)\n    obj3POS = mayac.xform(object3, query = True, worldSpace = True, absolute = True, translation = True)\n    rotOrig = mayac.getAttr(\"%s.rotate%s\" % (object2, axis.upper()))\n    distOrig = math.sqrt((obj3POS[0]-obj1POS[0])*(obj3POS[0]-obj1POS[0]) + (obj3POS[1]-obj1POS[1])*(obj3POS[1]-obj1POS[1]) + (obj3POS[2]-obj1POS[2])*(obj3POS[2]-obj1POS[2]))\n    mayac.setAttr(\"%s.rotate%s\" % (object2, axis.upper()), rotOrig + .5*multiplier)\n    obj1POS = mayac.xform(object1, query = True, worldSpace = True, absolute = True, translation = True)\n    obj3POS = mayac.xform(object3, query = True, worldSpace = True, absolute = True, translation = True)\n    distBack = math.sqrt((obj3POS[0]-obj1POS[0])*(obj3POS[0]-obj1POS[0]) + (obj3POS[1]-obj1POS[1])*(obj3POS[1]-obj1POS[1]) + (obj3POS[2]-obj1POS[2])*(obj3POS[2]-obj1POS[2]))\n    mayac.setAttr(\"%s.rotate%s\" % (object2, axis.upper()), rotOrig)\n    if distOrig < distBack:\n        return True\n    else:\n        return False\n\n\ndef pyToAttr(objAttr, data):\n    obj, attr = objAttr.split('.')\n    if not mayac.objExists(objAttr):\n        mayac.addAttr(obj, longName=attr, dataType='string')\n    if mayac.getAttr(objAttr, type=True) != 'string':\n        raise Exception(\"Object '%s' already has an attribute called '%s', but it isn't type 'string'\"%(obj,attr))\n\n    stringData = cPickle.dumps(data)\n    mayac.setAttr(objAttr, stringData, type='string')\n\n\ndef attrToPy(objAttr):\n    if mayac.objExists(objAttr):\n        stringAttrData = str(mayac.getAttr(objAttr))\n        loadedData = cPickle.loads(stringAttrData)\n        return loadedData\n    else:\n        return None\n        \n        \n        \ndef makeUnique(object, keyword):\n    if \"|\" in object: #and geo[geo.rfind(\"|\")+1:] == parent[parent.rfind(\"|\")+1]:\n        object = mayac.rename(object, object[object.rfind(\"|\")+1:] + keyword)\n        object = makeUnique(object, keyword)\n    return object\n    \n    \n###################### Portion of ZV Dynamics 2.0 by Paolo Dominici ##########################\n\ndef particleMethod(obj, weight=0.5, conserve=1.0, transfShapes=False):\n    return _particleDyn(obj, weight, conserve, transfShapes, False)\n\ndef nParticleMethod(obj, weight=0.5, conserve=1.0, transfShapes=False):\n    return _particleDyn(obj, weight, conserve, transfShapes, True)\n\ndef _particleDyn(obj, weight, conserve, transfShapes, nucleus):\n    \"Metodo generico di dinamica basata sulla particella\"\n    c = obj\n    \n    cNoPath = c[c.rfind(\"|\")+1:]\n    dynName = cNoPath + \"_DYN\"\n    partName = cNoPath + \"_INIT\"\n    dynLocName = cNoPath + \"_DYN_LOC\"\n    statLocName = cNoPath + \"_STAT_LOC\"\n    revName = cNoPath + \"_REV\"\n    exprName = cNoPath + \"_Expression\"\n    octName = cNoPath + \"Oct\"\n    \n    # leggo la posizione dell'oggetto\n    pos = mayac.xform(c, q=True, rp=True, ws=True)\n    \n    # creo la particella\n    if nucleus:\n        partic, partShape = mayac.nParticle(n=partName, p=pos)\n    else:\n        partic, partShape = mayac.particle(n=partName, p=pos)\n    \n    partShape = \"%s|%s\" % (partic, partShape)\n    \n    # sposto il pivot\n    mayac.xform(partic, piv=pos, ws=True)\n    # aggiungo uno shape alla particella\n    octName = drawOct(octName, r=0.25, pos=pos)\n    octShapeName = mayac.listRelatives(octName, s=True, pa=True)[0]\n    \n    mayac.setAttr(octShapeName + \".overrideEnabled\", True)\n    mayac.setAttr(octShapeName + \".overrideColor\", 13)\n    mayac.parent([octShapeName, partic], s=True, r=True)\n    mayac.delete(octName)\n    \n    # creo i locator\n    statLocGrp = mayac.group(\"|\" + mayac.spaceLocator(n=statLocName)[0], n=\"g_\" + statLocName)\n    dynLocGrp = mayac.group(\"|\" + mayac.spaceLocator(n=dynLocName)[0], n=\"g_\" + dynLocName)\n    mayac.setAttr(\"|%s|%s.overrideEnabled\" % (dynLocGrp, dynLocName), True)\n    mayac.setAttr(\"|%s|%s.overrideColor\" % (dynLocGrp, dynLocName), 6)\n    \n    # se e' attivo transfer shapes uso un gruppo invece di creare il cubetto\n    if transfShapes:\n        dyn = mayac.group(n=dynName, em=True)\n    else:\n        # cubetto colorato di blu orientato secondo l'oggetto\n        dyn = drawCube(dynName, l=0.5)\n        cubeShape = mayac.listRelatives(dyn, s=True, pa=True)[0]\n        mayac.setAttr(cubeShape + \".overrideEnabled\", True)        # colore\n        mayac.setAttr(cubeShape + \".overrideColor\", 6)\n    \n    # ruoto il cubetto e i locator (molto + carino)\n    mayac.xform([\"|\" + statLocGrp, \"|\" + dynLocGrp, dyn], ro=mayac.xform(c, q=True, ro=True, ws=True), ws=True)\n    mayac.xform([\"|\" + statLocGrp, \"|\" + dynLocGrp, dyn], t=pos, ws=True)\n    dyn = mayac.parent([dyn, c])[0]\n    mayac.makeIdentity(dyn, apply=True)                        # in questo modo il cubo assume le coordinate dell'oggetto pur essendo posizionato nel suo pivot\n    \n    # parento dyn allo stesso parente dell'oggetto\n    parentObj = mayac.listRelatives(c, p=True, pa=True)\n    if parentObj:\n        dyn = mayac.parent([dyn, parentObj[0]])[0]\n    else:\n        dyn = mayac.parent(dyn, w=True)[0]\n    c = mayac.parent([c, dyn])[0]\n    \n    mayac.parent([\"|\" + statLocGrp, \"|\" + dynLocGrp, dyn])\n    \n    # aggiorna i nomi con i percorsi\n    statLocGrp = \"%s|%s\" % (dyn, statLocGrp)\n    dynLocGrp = \"%s|%s\" % (dyn, dynLocGrp)\n    statLoc = \"%s|%s\" % (statLocGrp, statLocName)\n    dynLoc = \"%s|%s\" % (dynLocGrp, dynLocName)\n    \n    # goal particella-loc statico\n    mayac.goal(partic, g=statLoc, utr=True, w=weight)\n    \n    # nascondo locator\n    mayac.hide([statLocGrp, dynLocGrp])\n    \n    # rendo template la particella\n    mayac.setAttr(partShape + '.template', True)\n    \n    # aggiungo l'attributo di velocita'\n    mayac.addAttr(c, ln=\"info\", at=\"enum\", en=\" \", keyable=True)\n    mayac.setAttr(c + \".info\", l=True)\n    mayac.addAttr(c, ln=\"velocity\", at=\"double3\")\n    mayac.addAttr(c, ln=\"velocityX\", at=\"double\", p=\"velocity\", k=True)\n    mayac.addAttr(c, ln=\"velocityY\", at=\"double\", p=\"velocity\", k=True)\n    mayac.addAttr(c, ln=\"velocityZ\", at=\"double\", p=\"velocity\", k=True)\n\n    # point oggetto tra i locator statico e dinamico\n    pc = mayac.pointConstraint(statLoc, dynLoc, c, n=cNoPath + \"_PC\")[0]\n    mayac.addAttr(dyn, ln=\"settings\", at=\"enum\", en=\" \", keyable=True)\n    mayac.setAttr(dyn + \".settings\", l=True)\n    mayac.addAttr(dyn, ln=\"dynamicsBlend\", at=\"double\", min=0.0, max=1.0, dv=1.0, keyable=True)\n    mayac.addAttr(dyn, ln=\"weight\", at=\"double\", min=0.0, max=1.0, dv=weight, keyable=True)\n    mayac.addAttr(dyn, ln=\"conserve\", at=\"double\", min=0.0, max=1.0, dv=conserve, keyable=True)\n    rev = mayac.createNode(\"reverse\", n=revName)\n    mayac.connectAttr(dyn + \".dynamicsBlend\", pc + \".w1\")\n    mayac.connectAttr(dyn + \".dynamicsBlend\", rev + \".inputX\")\n    mayac.connectAttr(rev + \".outputX\", pc + \".w0\")\n    mayac.connectAttr(dyn + \".weight\", partShape + \".goalWeight[0]\")\n    mayac.connectAttr(dyn + \".conserve\", partShape + \".conserve\")\n    # locco il point constraint\n    [mayac.setAttr(\"%s.%s\" % (pc, s), l=True) for s in [\"offsetX\", \"offsetY\", \"offsetZ\", \"w0\", \"w1\", \"nodeState\"]]\n    # locco il reverse\n    [mayac.setAttr(\"%s.%s\" % (revName, s), l=True) for s in [\"inputX\", \"inputY\", \"inputZ\"]]\n    \n    # nParticle\n    if nucleus:\n        nucleusNode = mayac.listConnections(partShape + \".currentState\")[0]\n        mayac.setAttr(nucleusNode + '.gravity', 0.0)\n        \n        expr = \"\"\"// rename if needed\nstring $dynHandle = \"%s\";\nstring $particleObject = \"%s\";\nstring $dynLocator = \"%s\";\n\nundoInfo -swf 0;\n$ast = `playbackOptions -q -ast`;\nif (`currentTime -q` - $ast < 2) {\n//    %s.startFrame = $ast;                        // remove it if you don't want to change nucleus start time\n    $destPiv = `xform -q -rp -ws $dynHandle`;\n    $origPiv = `xform -q -rp -ws $particleObject`;\n    xform -t ($destPiv[0]-$origPiv[0]) ($destPiv[1]-$origPiv[1]) ($destPiv[2]-$origPiv[2]) -r -ws $particleObject;\n}\n\n$zvPos = `getParticleAttr -at worldPosition ($particleObject + \".pt[0]\")`;\n$currUnit = `currentUnit -q -linear`;\nif ($currUnit != \"cm\") {\n    $zvPos[0] = `convertUnit -f \"cm\" -t $currUnit ((string)$zvPos[0])`;\n    $zvPos[1] = `convertUnit -f \"cm\" -t $currUnit ((string)$zvPos[1])`;\n    $zvPos[2] = `convertUnit -f \"cm\" -t $currUnit ((string)$zvPos[2])`;\n}\nxform -a -ws -t $zvPos[0] $zvPos[1] $zvPos[2] $dynLocator;\n$zvVel = `getParticleAttr -at velocity ($particleObject + \".pt[0]\")`;        // velocity relative to the particleObject\n%s.velocityX = $zvVel[0];\n%s.velocityY = $zvVel[1];\n%s.velocityZ = $zvVel[2];\nundoInfo -swf 1;\"\"\" % (dyn, partic, dynLocName, nucleusNode, c, c, c)\n    \n    # particella standard\n    else:\n        mayac.setAttr(partic + \".visibility\", False)\n        expr = \"\"\"// rename if needed\nstring $dynHandle = \"%s\";\nstring $particleObject = \"%s\";\nstring $dynLocator = \"%s\";\n\nundoInfo -swf 0;\n$ast = `playbackOptions -q -ast`;\nif (`currentTime -q` - $ast < 2) {\n    %s.startFrame = $ast;\n    $destPiv = `xform -q -rp -ws $dynHandle`;\n    $origPiv = `xform -q -rp -ws $particleObject`;\n    xform -t ($destPiv[0]-$origPiv[0]) ($destPiv[1]-$origPiv[1]) ($destPiv[2]-$origPiv[2]) -r -ws $particleObject;\n}\n\n$zvPos = `getParticleAttr -at worldPosition ($particleObject + \".pt[0]\")`;\n$currUnit = `currentUnit -q -linear`;\nif ($currUnit != \"cm\") {\n    $zvPos[0] = `convertUnit -f \"cm\" -t $currUnit ((string)$zvPos[0])`;\n    $zvPos[1] = `convertUnit -f \"cm\" -t $currUnit ((string)$zvPos[1])`;\n    $zvPos[2] = `convertUnit -f \"cm\" -t $currUnit ((string)$zvPos[2])`;\n}\nxform -a -ws -t $zvPos[0] $zvPos[1] $zvPos[2] $dynLocator;\n$zvVel = `getParticleAttr -at velocity ($particleObject + \".pt[0]\")`;        // velocity relative to the particleObject\n%s.velocityX = $zvVel[0];\n%s.velocityY = $zvVel[1];\n%s.velocityZ = $zvVel[2];\nundoInfo -swf 1;\"\"\" % (dyn, partic, dynLocName, partShape, c, c, c)\n    \n    # crea l'espressione\n    mayac.expression(n=exprName, s=expr)\n    \n    # se il check e' attivo trasferisci le geometrie nel nodo dinamico\n    if transfShapes:\n        shapes = mayac.listRelatives(c, s=True, pa=True)\n        if shapes:\n            mayac.parent(shapes + [dyn], r=True, s=True)\n    \n    # locks\n    [mayac.setAttr(partic + s, k=False, cb=True) for s in [\".tx\", \".ty\", \".tz\", \".rx\", \".ry\", \".rz\", \".sx\", \".sy\", \".sz\", \".v\", \".startFrame\"]]\n    \n    return dyn\n\ndef drawOct(name, r=1.0, pos=(0.0, 0.0, 0.0)):\n    p = [(s[0]+pos[0], s[1]+pos[1], s[2]+pos[2]) for s in [(0, 0, r), (r, 0, 0), (0, 0, -r), (-r, 0, 0), (0, -r, 0), (r, 0, 0), (0, r, 0), (-r, 0, 0), (0, 0, r), (0, r, 0), (0, 0, -r), (0, -r, 0), (0, 0, r)]]\n    return mayac.rename(mayac.curve(d=1, p=p), name)\n\ndef drawCube(name, l=1.0, pos=(0.0, 0.0, 0.0)):\n    r = l*0.5\n    p = [(s[0]+pos[0], s[1]+pos[1], s[2]+pos[2]) for s in [(-r, r, r,), (r, r, r,), (r, r, -r,), (-r, r, -r,), (-r, -r, -r,), (r, -r, -r,), (r, -r, r,), (-r, -r, r,), (-r, r, r,), (-r, r, -r,), (-r, -r, -r,), (-r, -r, r,), (r, -r, r,), (r, r, r,), (r, r, -r,), (r, -r, -r,)]]\n    return mayac.rename(mayac.curve(d=1, p=p), name)\n\n\n###################### End of portion used of ZV Dynamics 2.0 by Paolo Dominici ##########################\n\n\n\n\nclass blendShapeAttrTracker(object):\n    def __init__(self, blendShapeNode, attr, meshOrig):\n        self.blendShapeNode = blendShapeNode\n        self.attr = attr\n        self.meshOrig = meshOrig\n        self.attrFull = \"%s.%s\"%(self.blendShapeNode,self.attr)\n        self.connection = mayac.listConnections(self.attrFull,plugs=True)\n        if self.connection:\n            self.connection = self.connection[0]\n    def deleteConnection(self):\n        if self.connection:\n            mayac.disconnectAttr(self.connection, self.attrFull)\n    def reconnect(self, blendShapeNodeOrigTempName = None):\n        self.blendShapeNodeOrigTempName = blendShapeNodeOrigTempName\n        if self.connection:\n            mayac.connectAttr(self.connection, \"%s.%s\"%(self.blendShapeNodeOrigTempName,self.attr))\n    def off(self):\n        mayac.setAttr(self.attrFull, 0.0)\n    def on(self):\n        mayac.setAttr(self.attrFull, 1.0)\n    def duplicateGeo(self):\n        self.newGeo = mayac.duplicate(self.meshOrig, returnRootsOnly=True)[0]\n        shapes = mayac.listRelatives(self.newGeo, children=True, shapes=True, fullPath=True)\n        for shape in shapes:\n            connections = mayac.listConnections(shape, connections=True, plugs=True, type='shadingEngine')\n            if connections:\n                i=0\n                while i<len(connections):\n                    verifyConnection = mayac.listConnections(connections[i], s=True, plugs=True, type='shadingEngine')\n                    if verifyConnection:\n                        try:\n                            mayac.disconnectAttr(connections[i],verifyConnection[0])\n                        except:\n                            pass\n                    i+=2\n        \n        self.newGeo = mayac.parent(self.newGeo, world=True)[0]\n        self.newGeo = mayac.rename(self.newGeo, self.attr)\n        mayac.setAttr(\"%s.visibility\"%self.newGeo, lock=False, keyable=True)\n        mayac.setAttr(\"%s.visibility\"%self.newGeo, 0)\n        \n    def connectNewBlendShape(self, newBlendshapeNode):\n        self.newBlendShapeNode = newBlendshapeNode\n        #ensure naming of attr is good\n        if self.newGeo != self.attr:\n            mayac.aliasAttr(self.attr, \"%s.%s\"%(self.newBlendShapeNode,self.newGeo))\n        mayac.connectAttr(\"%s.%s\"%(self.blendShapeNodeOrigTempName,self.attr), \"%s.%s\"%(self.newBlendShapeNode,self.attr))\n\nclass blendShapeTracker(object):\n    def __init__(self, blendShapeNodeOrig, meshOrig):\n        self.blendShapeNodeOrig = blendShapeNodeOrig\n        self.meshOrig = meshOrig\n        self.shapesOrig = mayac.aliasAttr(self.blendShapeNodeOrig, q=True)[::2]\n        self.blendShapeAttrTrackers = []\n        #create trackers and delete connections\n        for attr in self.shapesOrig:\n            if attr != \"envelope\":\n                attrTracker = blendShapeAttrTracker(self.blendShapeNodeOrig, attr, self.meshOrig)\n                attrTracker.deleteConnection()\n                self.blendShapeAttrTrackers.append(attrTracker)\n                attrTracker.off()\n        \n    def duplicate(self, newMesh):\n        self.newMesh = newMesh\n        #duplicate off blends as is\n        for attrTracker in self.blendShapeAttrTrackers:\n            for offAttr in self.blendShapeAttrTrackers:\n                offAttr.off()\n            attrTracker.on()\n            attrTracker.duplicateGeo()\n            attrTracker.off()\n        #create new blendshape node and hook up attrs for baking\n        self.blendShapeNodeOrigTempName = mayac.rename(self.blendShapeNodeOrig, \"BACKUP_%s\"%self.blendShapeNodeOrig)\n        blendShapeCreationSelection = []\n        for attrTracker in self.blendShapeAttrTrackers:\n            blendShapeCreationSelection.append(attrTracker.newGeo)\n        blendShapeCreationSelection.append(self.newMesh)\n        self.blendShapeNodeNew = mayac.blendShape(blendShapeCreationSelection, name=self.blendShapeNodeOrig, frontOfChain=True)[0]\n        for attrTracker in self.blendShapeAttrTrackers:\n            attrTracker.reconnect(blendShapeNodeOrigTempName = self.blendShapeNodeOrigTempName)\n        for attrTracker in self.blendShapeAttrTrackers:\n            attrTracker.connectNewBlendShape(self.blendShapeNodeNew)\n        self.bakeAttrs = []\n        for attrTracker in self.blendShapeAttrTrackers:\n            self.bakeAttrs.append(attrTracker.attrFull)\n            \n    \n    def restoreScene(self):\n        mayac.rename(self.blendShapeNodeOrigTempName, self.blendShapeNodeOrig)\n        try:\n            mayac.setAttr(\"%s.envelope\"%self.blendShapeNodeOrig, 1.0)\n        except:\n            pass\n        \n        \n        \nclass DJB_CharacterNode():\n    def __init__(self, joint_name_, infoNode_ = None, optional_ = 0, hasIK_ = 0, parent = None, nameSpace_ = \"\", actAsRoot_ = 0, alias_ = None, dynamic_ = None, twistJoint_ = False, translateOpen_ = False):\n        self.characterNameSpace = nameSpace_\n        self.infoNode = None\n        if infoNode_:\n            self.infoNode = self.characterNameSpace + infoNode_\n        self.nodeName = joint_name_\n        self.children = []\n        self.AnimData_Joint = None\n        self.Bind_Joint = None\n        self.Export_Joint = None\n        self.origPosX = None\n        self.origPosY = None\n        self.origPosZ = None\n        self.origRotX = None\n        self.origRotY = None\n        self.origRotZ = None\n        self.FK_Joint =  None\n        self.IK_Joint = None\n        self.IK_Dummy_Joint = None\n        self.templateGeo = None\n        self.FK_CTRL = None\n        self.FK_CTRL_COLOR = None\n        self.FK_CTRL_inRig_CONST_GRP = None\n        self.FK_CTRL_animData_CONST_GRP = None\n        self.FK_CTRL_animData_MultNode = None\n        self.FK_CTRL_animData_MultNode_Trans = None\n        self.FK_CTRL_POS_GRP = None\n        self.IK_CTRL = None\n        self.IK_CTRL_COLOR = None\n        self.IK_CTRL_inRig_CONST_GRP = None\n        self.IK_CTRL_animData_CONST_GRP = None\n        self.IK_CTRL_animData_MultNode = None\n        self.IK_CTRL_POS_GRP = None\n        self.IK_CTRL_ReorientGRP = None\n        \n        self.IK_CTRL_parent_animData_CONST_GRP = None\n        self.IK_CTRL_parent_animData_MultNode = None\n        self.IK_CTRL_parent_POS_GRP = None\n        \n        self.IK_CTRL_grandparent_inRig_CONST_GRP = None\n        self.IK_CTRL_grandparent_animData_CONST_GRP = None\n        self.IK_CTRL_grandparent_animData_MultNode = None\n        self.IK_CTRL_grandparent_POS_GRP = None\n        \n        self.Inherit_Rotation_GRP = None\n        self.Inherit_Rotation_Constraint = None\n        self.Inherit_Rotation_Reverse = None\n        self.Constraint = None\n        self.FK_Constraint = None\n        self.IK_Constraint = None\n        self.IK_Handle = None\n        self.IK_EndEffector = None\n        self.PV_Constraint = None\n        self.Guide_Curve = None\n        self.Guide_Curve_Cluster1 = None\n        self.Guide_Curve_Cluster2 = None\n        self.Options_CTRL = None\n        self.Options_CTRL_COLOR = None\n        \n        self.IK_CTRL_parent_Global_POS_GRP = None\n        self.IK_CTRL_grandparent_Global_POS_GRP = None\n        self.grandparent_Global_Constraint = None\n        self.grandparent_Global_Constraint_Reverse = None\n        self.parent_Global_Constraint = None\n        self.parent_Global_Constraint_Reverse = None\n        \n        self.follow_extremity_Constraint = None\n        self.follow_extremity_Constraint_Reverse = None\n        \n        self.locator = None\n        self.locatorConstraint = None\n        self.locator1 = None\n        self.locatorConstraint1 = None\n        self.locator2 = None\n        self.locatorConstraint2 = None\n        self.locator3 = None\n        self.locatorConstraint3 = None\n        self.footRotateLOC = None\n        self.Follow_Foot_GRP = None\n        self.Follow_Knee_GRP = None\n        self.Follow_Knee_Constraint = None\n        self.Follow_Foot_Constraint = None\n        self.IK_BakingLOC = None\n        self.actAsRoot = actAsRoot_\n        self.rotOrder = None\n        self.alias = alias_\n        self.twistJoint = twistJoint_\n        \n        self.dynamic = dynamic_\n        self.Dyn_Joint = None\n        self.DynMult_Joint = None\n        self.Dyn_Mult = None\n        self.Dyn_CTRL = None\n        self.Dyn_CTRL_COLOR = None\n        self.Dyn_Node = None\n        self.translateOpen = translateOpen_\n        self.parent = parent\n        \n        \n        \n        \n        if not self.infoNode:\n            if not self.Bind_Joint:\n                self.Bind_Joint = self.validateExistance(str(JOINT_NAMESPACE) + joint_name_)\n            if not self.Bind_Joint and self.alias:\n                for alias in self.alias:\n                    self.Bind_Joint = self.validateExistance(str(JOINT_NAMESPACE) + alias)\n                    if self.Bind_Joint:\n                        break\n            if not self.Bind_Joint and not optional_:\n                OpenMaya.MGlobal.displayError(\"ERROR: %s cannot be found and is necessary for the autorigger to complete process\" % (str(JOINT_NAMESPACE) + joint_name_))\n                sys.exit()\n            \n            if self.Bind_Joint:\n                self.Bind_Joint = mayac.rename(self.Bind_Joint, 'Bind_' + joint_name_)\n                mel.eval('CBdeleteConnection \"%s.tx\";'%(self.Bind_Joint))\n                mel.eval('CBdeleteConnection \"%s.ty\";'%(self.Bind_Joint))\n                mel.eval('CBdeleteConnection \"%s.tz\";'%(self.Bind_Joint))\n                mel.eval('CBdeleteConnection \"%s.rx\";'%(self.Bind_Joint))\n                mel.eval('CBdeleteConnection \"%s.ry\";'%(self.Bind_Joint))\n                mel.eval('CBdeleteConnection \"%s.rz\";'%(self.Bind_Joint))\n                self.rotOrder = mayac.getAttr(\"%s.rotateOrder\" %(self.Bind_Joint))\n            if not self.Bind_Joint:\n                return None\n            self.parent = parent\n            if self.parent:\n                self.parent.children.append(self)\n       \n        #recreate from an infoNode\n        else:              \n            self.parent = parent\n            if self.parent:\n                self.parent.children.append(self)\n            try:\n                self.Bind_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Bind_Joint\" % (self.infoNode)))\n            except:\n                version = mel.eval(\"float $ver = `getApplicationVersionAsFloat`;\")\n                if version == 2010.0:\n                    OpenMaya.MGlobal.displayError(\"The Auto-Control Setup requires namespaces in Maya 2010.\")\n                return None\n            if not self.nodeName:\n                self.nodeName = attrToPy(\"%s.nodeName\" % (self.infoNode))\n                if not self.nodeName:\n                    self.nodeName = self.Bind_Joint[5:]\n            self.AnimData_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.AnimData_Joint\" % (self.infoNode)))\n            self.rotOrder = attrToPy(\"%s.rotOrder\" % (self.infoNode))\n            self.origPosX = attrToPy(\"%s.origPosX\" % (self.infoNode))\n            self.origPosY = attrToPy(\"%s.origPosY\" % (self.infoNode))\n            self.origPosZ = attrToPy(\"%s.origPosZ\" % (self.infoNode))\n            self.origRotX = attrToPy(\"%s.origRotX\" % (self.infoNode))\n            self.origRotY = attrToPy(\"%s.origRotY\" % (self.infoNode))\n            self.origRotZ = attrToPy(\"%s.origRotZ\" % (self.infoNode))\n            self.FK_Joint =  DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_Joint\" % (self.infoNode)))\n            self.IK_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_Joint\" % (self.infoNode)))\n            self.IK_Dummy_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_Dummy_Joint\" % (self.infoNode)))\n            self.Export_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Export_Joint\" % (self.infoNode)))\n            self.templateGeo = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.templateGeo\" % (self.infoNode)))\n            self.FK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_CTRL\" % (self.infoNode)))\n            self.FK_CTRL_COLOR = attrToPy(\"%s.FK_CTRL_COLOR\" % (self.infoNode))\n            self.FK_CTRL_inRig_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_CTRL_inRig_CONST_GRP\" % (self.infoNode)))\n            self.FK_CTRL_animData_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_CTRL_animData_CONST_GRP\" % (self.infoNode)))\n            self.FK_CTRL_animData_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_CTRL_animData_MultNode\" % (self.infoNode)))\n            self.FK_CTRL_animData_MultNode_Trans = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_CTRL_animData_MultNode_Trans\" % (self.infoNode)))\n            self.FK_CTRL_POS_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_CTRL_POS_GRP\" % (self.infoNode)))\n            self.IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL\" % (self.infoNode)))\n            self.IK_CTRL_COLOR = attrToPy(\"%s.IK_CTRL_COLOR\" % (self.infoNode))\n            self.IK_CTRL_inRig_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_inRig_CONST_GRP\" % (self.infoNode)))\n            self.IK_CTRL_animData_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_animData_CONST_GRP\" % (self.infoNode)))\n            self.IK_CTRL_animData_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_animData_MultNode\" % (self.infoNode)))\n            self.IK_CTRL_POS_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_POS_GRP\" % (self.infoNode)))\n            self.IK_CTRL_ReorientGRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_ReorientGRP\" % (self.infoNode)))\n            \n            self.IK_CTRL_parent_animData_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_parent_animData_CONST_GRP\" % (self.infoNode)))\n            self.IK_CTRL_parent_animData_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_parent_animData_MultNode\" % (self.infoNode)))\n            self.IK_CTRL_parent_POS_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_parent_POS_GRP\" % (self.infoNode)))\n            \n            self.IK_CTRL_grandparent_inRig_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_parent_POS_GRP\" % (self.infoNode)))\n            self.IK_CTRL_grandparent_animData_CONST_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_grandparent_animData_CONST_GRP\" % (self.infoNode)))\n            self.IK_CTRL_grandparent_animData_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_grandparent_animData_MultNode\" % (self.infoNode)))\n            self.IK_CTRL_grandparent_POS_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_grandparent_POS_GRP\" % (self.infoNode)))\n            \n            self.Inherit_Rotation_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Inherit_Rotation_GRP\" % (self.infoNode)))\n            self.Inherit_Rotation_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Inherit_Rotation_Constraint\" % (self.infoNode)))\n            self.Inherit_Rotation_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Inherit_Rotation_Reverse\" % (self.infoNode)))\n            self.Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Constraint\" % (self.infoNode)))\n            self.FK_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.FK_Constraint\" % (self.infoNode)))\n            self.IK_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_Constraint\" % (self.infoNode)))\n            self.IK_Handle = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_Handle\" % (self.infoNode)))\n            self.IK_EndEffector = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_EndEffector\" % (self.infoNode)))\n            self.PV_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.PV_Constraint\" % (self.infoNode)))\n            self.Guide_Curve = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Guide_Curve\" % (self.infoNode)))\n            self.Guide_Curve_Cluster1 = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Guide_Curve_Cluster1\" % (self.infoNode)))\n            self.Guide_Curve_Cluster2 = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Guide_Curve_Cluster2\" % (self.infoNode)))\n            self.Options_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Options_CTRL\" % (self.infoNode)))\n            self.Options_CTRL_COLOR = attrToPy(\"%s.Options_CTRL_COLOR\" % (self.infoNode))\n            \n            self.IK_CTRL_parent_Global_POS_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_parent_Global_POS_GRP\" % (self.infoNode)))\n            self.IK_CTRL_grandparent_Global_POS_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_CTRL_grandparent_Global_POS_GRP\" % (self.infoNode)))\n            self.grandparent_Global_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.grandparent_Global_Constraint\" % (self.infoNode)))\n            self.grandparent_Global_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.grandparent_Global_Constraint_Reverse\" % (self.infoNode)))\n            self.parent_Global_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.parent_Global_Constraint\" % (self.infoNode)))\n            self.parent_Global_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.parent_Global_Constraint_Reverse\" % (self.infoNode)))\n            \n            self.follow_extremity_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.follow_extremity_Constraint\" % (self.infoNode)))\n            self.follow_extremity_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.follow_extremity_Constraint_Reverse\" % (self.infoNode)))\n            \n            self.locator = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.locator\" % (self.infoNode)))\n            self.locatorConstraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.locator\" % (self.infoNode)))\n            self.locator1 = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.locator1\" % (self.infoNode)))\n            self.locatorConstraint1 = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.locatorConstraint1\" % (self.infoNode)))\n            self.footRotateLOC = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.footRotateLOC\" % (self.infoNode)))\n            self.Follow_Foot_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Follow_Foot_GRP\" % (self.infoNode)))\n            self.Follow_Knee_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Follow_Knee_GRP\" % (self.infoNode)))\n            self.Follow_Knee_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Follow_Knee_Constraint\" % (self.infoNode)))\n            self.Follow_Foot_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Follow_Knee_Constraint\" % (self.infoNode)))\n            self.IK_BakingLOC = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_BakingLOC\" % (self.infoNode)))\n\n            self.dynamic = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.dynamic\" % (self.infoNode)))\n            self.Dyn_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_Joint\" % (self.infoNode)))\n            self.Dyn_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_CTRL\" % (self.infoNode)))\n            self.Dyn_CTRL_COLOR = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_CTRL_COLOR\" % (self.infoNode)))\n            self.Dyn_Node = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_Node\" % (self.infoNode)))\n            self.DynMult_Joint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_Node\" % (self.infoNode)))\n            self.Dyn_Mult = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_Mult\" % (self.infoNode)))\n            self.translateOpen = attrToPy(\"%s.translateOpen\" % (self.infoNode))\n            self.twistJoint = attrToPy(\"%s.twistJoint\" % (self.infoNode))\n        \n        \n    def writeInfoNode(self):\n        self.infoNode = mayac.createNode(\"transform\", name = \"MIXAMO_CHARACTER_%s_infoNode\" % (self.nodeName))\n        \n        pyToAttr(\"%s.nodeName\" % (self.infoNode), self.nodeName)\n        if self.parent:\n            pyToAttr(\"%s.parent\" % (self.infoNode), self.parent.nodeName)\n        else:\n            pyToAttr(\"%s.parent\" % (self.infoNode), None)\n        pyToAttr(\"%s.Bind_Joint\" % (self.infoNode), self.Bind_Joint)\n        pyToAttr(\"%s.AnimData_Joint\" % (self.infoNode), self.AnimData_Joint)\n        pyToAttr(\"%s.rotOrder\" % (self.infoNode), self.rotOrder)\n        pyToAttr(\"%s.origPosX\" % (self.infoNode), self.origPosX)\n        pyToAttr(\"%s.origPosY\" % (self.infoNode), self.origPosY)\n        pyToAttr(\"%s.origPosZ\" % (self.infoNode), self.origPosZ)\n        pyToAttr(\"%s.origRotX\" % (self.infoNode), self.origRotX)\n        pyToAttr(\"%s.origRotY\" % (self.infoNode), self.origRotY)\n        pyToAttr(\"%s.origRotZ\" % (self.infoNode), self.origRotZ)\n        pyToAttr(\"%s.FK_Joint\" % (self.infoNode), self.FK_Joint)\n        pyToAttr(\"%s.IK_Joint\" % (self.infoNode), self.IK_Joint)\n        pyToAttr(\"%s.IK_Dummy_Joint\" % (self.infoNode), self.IK_Dummy_Joint)\n        pyToAttr(\"%s.Export_Joint\" % (self.infoNode), self.Export_Joint)\n        pyToAttr(\"%s.templateGeo\" % (self.infoNode), self.templateGeo)\n        pyToAttr(\"%s.FK_CTRL\" % (self.infoNode), self.FK_CTRL)\n        pyToAttr(\"%s.FK_CTRL_COLOR\" % (self.infoNode), self.FK_CTRL_COLOR)\n        pyToAttr(\"%s.FK_CTRL_inRig_CONST_GRP\" % (self.infoNode), self.FK_CTRL_inRig_CONST_GRP)\n        pyToAttr(\"%s.FK_CTRL_animData_CONST_GRP\" % (self.infoNode), self.FK_CTRL_animData_CONST_GRP)\n        pyToAttr(\"%s.FK_CTRL_animData_MultNode\" % (self.infoNode), self.FK_CTRL_animData_MultNode)\n        pyToAttr(\"%s.FK_CTRL_animData_MultNode_Trans\" % (self.infoNode), self.FK_CTRL_animData_MultNode_Trans)\n        pyToAttr(\"%s.FK_CTRL_POS_GRP\" % (self.infoNode), self.FK_CTRL_POS_GRP)\n        pyToAttr(\"%s.IK_CTRL\" % (self.infoNode), self.IK_CTRL)\n        pyToAttr(\"%s.IK_CTRL_COLOR\" % (self.infoNode), self.IK_CTRL_COLOR)\n        pyToAttr(\"%s.IK_CTRL_inRig_CONST_GRP\" % (self.infoNode), self.IK_CTRL_inRig_CONST_GRP)\n        pyToAttr(\"%s.IK_CTRL_animData_CONST_GRP\" % (self.infoNode), self.IK_CTRL_animData_CONST_GRP)\n        pyToAttr(\"%s.IK_CTRL_animData_MultNode\" % (self.infoNode), self.IK_CTRL_animData_MultNode)\n        pyToAttr(\"%s.IK_CTRL_POS_GRP\" % (self.infoNode), self.IK_CTRL_POS_GRP)\n        pyToAttr(\"%s.IK_CTRL_ReorientGRP\" % (self.infoNode), self.IK_CTRL_ReorientGRP)\n        pyToAttr(\"%s.IK_CTRL_parent_animData_CONST_GRP\" % (self.infoNode), self.IK_CTRL_parent_animData_CONST_GRP)\n        pyToAttr(\"%s.IK_CTRL_parent_animData_MultNode\" % (self.infoNode), self.IK_CTRL_parent_animData_MultNode)\n        pyToAttr(\"%s.IK_CTRL_parent_POS_GRP\" % (self.infoNode), self.IK_CTRL_parent_POS_GRP)\n        pyToAttr(\"%s.IK_CTRL_grandparent_inRig_CONST_GRP\" % (self.infoNode), self.IK_CTRL_grandparent_inRig_CONST_GRP)\n        pyToAttr(\"%s.IK_CTRL_grandparent_animData_CONST_GRP\" % (self.infoNode), self.IK_CTRL_grandparent_animData_CONST_GRP)\n        pyToAttr(\"%s.IK_CTRL_grandparent_animData_MultNode\" % (self.infoNode), self.IK_CTRL_grandparent_animData_MultNode)\n        pyToAttr(\"%s.IK_CTRL_grandparent_POS_GRP\" % (self.infoNode), self.IK_CTRL_grandparent_POS_GRP)\n        pyToAttr(\"%s.Inherit_Rotation_GRP\" % (self.infoNode), self.Inherit_Rotation_GRP)\n        pyToAttr(\"%s.Inherit_Rotation_Constraint\" % (self.infoNode), self.Inherit_Rotation_Constraint)\n        pyToAttr(\"%s.Inherit_Rotation_Reverse\" % (self.infoNode), self.Inherit_Rotation_Reverse)\n        pyToAttr(\"%s.Constraint\" % (self.infoNode), self.Constraint)\n        pyToAttr(\"%s.FK_Constraint\" % (self.infoNode), self.FK_Constraint)\n        pyToAttr(\"%s.IK_Constraint\" % (self.infoNode), self.IK_Constraint)\n        pyToAttr(\"%s.IK_Handle\" % (self.infoNode), self.IK_Handle)\n        pyToAttr(\"%s.IK_EndEffector\" % (self.infoNode), self.IK_EndEffector)\n        pyToAttr(\"%s.PV_Constraint\" % (self.infoNode), self.PV_Constraint)\n        pyToAttr(\"%s.Guide_Curve\" % (self.infoNode), self.Guide_Curve)\n        pyToAttr(\"%s.Guide_Curve_Cluster1\" % (self.infoNode), self.Guide_Curve_Cluster1)\n        pyToAttr(\"%s.Guide_Curve_Cluster2\" % (self.infoNode), self.Guide_Curve_Cluster2)\n        pyToAttr(\"%s.Options_CTRL\" % (self.infoNode), self.Options_CTRL)\n        pyToAttr(\"%s.Options_CTRL_COLOR\" % (self.infoNode), self.Options_CTRL_COLOR)\n        pyToAttr(\"%s.IK_CTRL_parent_Global_POS_GRP\" % (self.infoNode), self.IK_CTRL_parent_Global_POS_GRP)\n        pyToAttr(\"%s.IK_CTRL_grandparent_Global_POS_GRP\" % (self.infoNode), self.IK_CTRL_grandparent_Global_POS_GRP)\n        pyToAttr(\"%s.grandparent_Global_Constraint\" % (self.infoNode), self.grandparent_Global_Constraint)\n        pyToAttr(\"%s.grandparent_Global_Constraint_Reverse\" % (self.infoNode), self.grandparent_Global_Constraint_Reverse)\n        pyToAttr(\"%s.parent_Global_Constraint\" % (self.infoNode), self.parent_Global_Constraint)\n        pyToAttr(\"%s.parent_Global_Constraint_Reverse\" % (self.infoNode), self.parent_Global_Constraint_Reverse)\n        pyToAttr(\"%s.follow_extremity_Constraint\" % (self.infoNode), self.follow_extremity_Constraint)\n        pyToAttr(\"%s.follow_extremity_Constraint_Reverse\" % (self.infoNode), self.follow_extremity_Constraint_Reverse)\n        pyToAttr(\"%s.locator\" % (self.infoNode), self.locator)\n        pyToAttr(\"%s.locatorConstraint\" % (self.infoNode), self.locatorConstraint)\n        pyToAttr(\"%s.locator1\" % (self.infoNode), self.locator1)\n        pyToAttr(\"%s.locatorConstraint1\" % (self.infoNode), self.locatorConstraint1)\n        pyToAttr(\"%s.footRotateLOC\" % (self.infoNode), self.footRotateLOC)\n        pyToAttr(\"%s.Follow_Foot_GRP\" % (self.infoNode), self.Follow_Foot_GRP)\n        pyToAttr(\"%s.Follow_Knee_GRP\" % (self.infoNode), self.Follow_Knee_GRP)\n        pyToAttr(\"%s.Follow_Knee_Constraint\" % (self.infoNode), self.Follow_Knee_Constraint)\n        pyToAttr(\"%s.Follow_Foot_Constraint\" % (self.infoNode), self.Follow_Foot_Constraint)\n        pyToAttr(\"%s.IK_BakingLOC\" % (self.infoNode), self.IK_BakingLOC)\n        \n        #Dynamics\n        pyToAttr(\"%s.dynamic\" % (self.infoNode), self.dynamic)\n        pyToAttr(\"%s.Dyn_Joint\" % (self.infoNode), self.Dyn_Joint)\n        pyToAttr(\"%s.Dyn_CTRL\" % (self.infoNode), self.Dyn_CTRL)\n        pyToAttr(\"%s.Dyn_CTRL_COLOR\" % (self.infoNode), self.Dyn_CTRL_COLOR)\n        pyToAttr(\"%s.Dyn_Node\" % (self.infoNode), self.Dyn_Node)\n        pyToAttr(\"%s.DynMult_Joint\" % (self.infoNode), self.DynMult_Joint)\n        pyToAttr(\"%s.Dyn_Mult\" % (self.infoNode), self.Dyn_Mult)\n        pyToAttr(\"%s.translateOpen\" % (self.infoNode), self.translateOpen)\n        pyToAttr(\"%s.twistJoint\" % (self.infoNode), self.twistJoint)\n        \n        return self.infoNode\n        \n     \n     \n    def fixAllLayerOverrides(self, layer):\n        if self.FK_CTRL:\n            self.fixLayerOverrides(self.FK_CTRL, self.FK_CTRL_COLOR, layer)\n        if self.IK_CTRL:\n            self.fixLayerOverrides(self.IK_CTRL, self.IK_CTRL_COLOR, layer)\n        if self.Options_CTRL:\n            self.fixLayerOverrides(self.Options_CTRL, self.Options_CTRL_COLOR, layer)\n        if self.Dyn_CTRL:\n            self.fixLayerOverrides(self.Dyn_CTRL, self.Dyn_CTRL_COLOR, layer)\n        \n           \n    def fixLayerOverrides(self, control, color, layer, referenceAlways = False):\n        if mayac.listConnections( \"%s.drawOverride\" % (control)):\n            mayac.disconnectAttr(\"%s.drawInfo\" % (layer), \"%s.drawOverride\" % (control))\n        mayac.connectAttr(\"%s.levelOfDetail\" % (layer), \"%s.overrideLevelOfDetail\" % (control), force = True)\n        mayac.connectAttr(\"%s.shading\" % (layer), \"%s.overrideShading\" % (control), force = True)\n        mayac.connectAttr(\"%s.texturing\" % (layer), \"%s.overrideTexturing\" % (control), force = True)\n        mayac.connectAttr(\"%s.playback\" % (layer), \"%s.overridePlayback\" % (control), force = True)\n        mayac.connectAttr(\"%s.visibility\" % (layer), \"%s.overrideVisibility\" % (control), force = True)\n        DJB_ChangeDisplayColor(control, color = color)\n        if referenceAlways:\n            mayac.setAttr(\"%s.overrideDisplayType\" % (control), 2)\n        else:\n            mayac.connectAttr(\"%s.displayType\" % (layer), \"%s.overrideDisplayType\" % (control), force = True)\n        shapes = mayac.listRelatives(control, children = True, shapes = True)\n        if shapes:\n            for shape in shapes:\n                self.fixLayerOverrides(shape, color, layer, referenceAlways)\n    \n        \n    def validateExistance(self, object):\n        if mayac.objExists(object):\n            return object\n        else:\n            return None\n\n    def duplicateJoint(self, type, parent_ = \"UseSelf\", jointNamespace = None):\n        if self.Bind_Joint:\n            if type == \"AnimData\":\n                self.AnimData_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"AnimData_\" + self.nodeName)[0]\n            elif type == \"FK\":\n                self.FK_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"FK_\" + self.nodeName)[0]\n            elif type == \"IK\":\n                self.IK_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"IK_\" + self.nodeName)[0]\n            elif type == \"IK_Dummy\":\n                self.IK_Dummy_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"IK_Dummy_\" + self.nodeName)[0]\n            elif type == \"ExportSkeleton\":\n                if jointNamespace:\n                    if not mayac.namespace(exists = jointNamespace):\n                        mayac.namespace(add=jointNamespace[0:len(jointNamespace)-1])\n                    self.Export_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, inputConnections=False, name = jointNamespace + self.nodeName)[0]\n                else:\n                    temp = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = self.nodeName)\n                    self.Export_Joint = temp[0]\n                try:\n                    connections = mayac.listConnections(\"%s.drawOverride\"%self.Export_Joint, s=True, plugs=True)\n                    if connections:\n                        mayac.disconnectAttr(connections[0], \"%s.drawOverride\"%self.Export_Joint)\n                    connections = mayac.listConnections(\"%s.instObjGroups[0]\"%self.Export_Joint, d=True, plugs=True)\n                    if connections:\n                        mayac.disconnectAttr(\"%s.instObjGroups[0]\"%self.Export_Joint, connections[0])\n                    \n                    mayac.parent(self.Export_Joint, world = True)\n                except:\n                    pass\n            elif type == \"ZV\":\n                self.Dyn_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"DYN_\" + self.nodeName)[0]\n                self.DynMult_Joint = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"DynMult_\" + self.nodeName)[0]\n            if parent_ == \"UseSelf\" and self.parent:\n                if type == \"AnimData\":\n                    mayac.parent(self.AnimData_Joint, self.parent.AnimData_Joint)\n                if type == \"FK\":\n                    mayac.parent(self.FK_Joint, self.parent.FK_Joint)\n                if type == \"IK\":\n                    mayac.parent(self.IK_Joint, self.parent.IK_Joint)\n                if type == \"IK_Dummy\":\n                    mayac.parent(self.IK_Dummy_Joint, self.parent.IK_Dummy_Joint)\n                if type == \"ZV\":\n                    mayac.parent(self.Dyn_Joint, self.parent.Dyn_Joint)\n                    mayac.parent(self.DynMult_Joint, self.parent.DynMult_Joint)\n                if type == \"ExportSkeleton\":\n                    mayac.parent(self.Export_Joint, self.parent.Export_Joint)\n                    if jointNamespace and self.Export_Joint != (jointNamespace + self.nodeName):\n                        #add namespace to scene if should have it but doesn't\n                        if not mayac.namespace(exists = jointNamespace):\n                            mayac.namespace(add=jointNamespace[0:len(jointNamespace)-1])\n                        self.Export_Joint = mayac.rename(self.Export_Joint, (jointNamespace + self.nodeName))\n                            \n                    \n                    \n    def createGuideCurve(self, group_, optionsCTRL = None):\n        pos1 = mayac.xform(self.IK_CTRL, query = True, absolute = True, worldSpace = True, translation = True)\n        pos2 = mayac.xform(self.IK_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        self.Guide_Curve = mayac.curve(degree = 1, name = \"%s_GuideCurve\" % (self.IK_CTRL),\n                                      point = [(pos1[0], pos1[1], pos1[2]), (pos2[0], pos2[1], pos2[2])],\n                                      knot = [0,1])\n        mayac.xform(self.Guide_Curve, centerPivots = True)\n        mayac.select(\"%s.cv[0]\" % (self.Guide_Curve), replace = True) ;\n        temp = mayac.cluster(name = \"%s_Cluster1\" % (self.Guide_Curve))\n        self.Guide_Curve_Cluster1 = temp[1]\n        mayac.select(\"%s.cv[1]\" % (self.Guide_Curve), replace = True) ;\n        temp = mayac.cluster(name = \"%s_Cluster2\" % (self.Guide_Curve))\n        self.Guide_Curve_Cluster2 = temp[1]\n        mayac.parent(self.Guide_Curve_Cluster1, self.IK_CTRL)\n        mayac.parent(self.Guide_Curve_Cluster2, self.IK_Joint)\n        mayac.parent(self.Guide_Curve, group_)\n        mayac.setAttr(\"%s.visibility\" % (self.Guide_Curve_Cluster1),0)\n        mayac.setAttr(\"%s.visibility\" % (self.Guide_Curve_Cluster2),0)\n        mayac.setAttr(\"%s.overrideEnabled\" % (self.Guide_Curve), 1)\n        mayac.setAttr(\"%s.overrideDisplayType\" % (self.Guide_Curve), 1)\n        multDiv = mayac.createNode( 'multiplyDivide', n=self.Guide_Curve + \"_Visibility_MultNode\")\n        mayac.addAttr(self.IK_CTRL, longName='GuideCurve', defaultValue=1.0, min = 0.0, max = 1.0, keyable = True)\n        mayac.connectAttr(\"%s.GuideCurve\" %(self.IK_CTRL), \"%s.input2X\" %(multDiv), force = True)\n        if optionsCTRL:\n            mayac.connectAttr(\"%s.FK_IK\" %(optionsCTRL), \"%s.input1X\" %(multDiv), force = True)\n        mayac.connectAttr(\"%s.outputX\" %(multDiv), \"%s.visibility\" %(self.Guide_Curve), force = True)\n        DJB_LockNHide(self.Guide_Curve)\n        DJB_LockNHide(self.Guide_Curve_Cluster1)\n        DJB_LockNHide(self.Guide_Curve_Cluster2)\n\n\n\n    def createControl(self, type, rigType = \"AutoRig\", style = \"circle\", partialConstraint = 0, scale = (0.1,0.1,0.1), rotate = (0,0,0), offset = (0,0,0), estimateSize = True, color_ = None, name_ = None, flipFingers = False):\n        control = 0 \n        if style == \"circle\":\n            if estimateSize:\n                control = mayac.circle(constructionHistory = 0)\n                control = control[0]\n                mayac.rotate(0, 90, 90)\n                if \"Root\" not in self.nodeName and \"Spine\" not in self.nodeName and \"Hips\" not in self.nodeName and rigType == \"World\":\n                    mayac.rotate(rotate[0], rotate[1], rotate[2], control, absolute = True) #override for world-oriented rigs\n                if rigType == \"Dyn\":\n                    mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True)\n                mayac.scale(scale[0],scale[1],scale[2])\n                mayac.move(offset[0], offset[1], offset[2], \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n\n        elif style == \"box\":\n            if estimateSize:\n                control = mayac.curve(degree = 1,\n                                      point = [(0.5, 0.5, 0.5),\n                                          (0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, -0.5),\n                                          (-0.5, -0.5, -0.5),\n                                          (0.5, -0.5, -0.5),\n                                          (0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, 0.5),\n                                          (0.5, 0.5, 0.5),\n                                          (0.5, -0.5, 0.5),\n                                          (0.5, -0.5, -0.5),\n                                          (-0.5, -0.5, -0.5),\n                                          (-0.5, -0.5, 0.5),\n                                          (0.5, -0.5, 0.5),\n                                          (-0.5, -0.5, 0.5),\n                                          (-0.5, 0.5, 0.5)],\n                                      knot = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])                                                                            \n                mayac.move(0, -.2, 0, \"%s.cv[0]\" % (control), \"%s.cv[7:8]\" % (control), \"%s.cv[15]\" % (control), relative = True)\n                mayac.scale(1.3, 1.3, 1.3, \"%s.cv[3:4]\" % (control), \"%s.cv[9:12]\" % (control), \"%s.cv[13:14]\" % (control))       \n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True)\n                mayac.move(offset[0], offset[1], offset[2],  \"%s.cv[0:15]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n                \n        elif style == \"box1\":\n            if estimateSize:\n                control = mayac.curve(degree = 1,\n                                      point = [(0.5, 0.5, 0.5),\n                                          (0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, -0.5),\n                                          (-0.5, -0.5, -0.5),\n                                          (0.5, -0.5, -0.5),\n                                          (0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, 0.5),\n                                          (0.5, 0.5, 0.5),\n                                          (0.5, -0.5, 0.5),\n                                          (0.5, -0.5, -0.5),\n                                          (-0.5, -0.5, -0.5),\n                                          (-0.5, -0.5, 0.5),\n                                          (0.5, -0.5, 0.5),\n                                          (-0.5, -0.5, 0.5),\n                                          (-0.5, 0.5, 0.5)],\n                                      knot = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])                                                                                  \n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True)\n                mayac.move(offset[0], offset[1], offset[2],  \"%s.cv[0:15]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n                \n                \n        elif style == \"footBox\":\n            if estimateSize:\n                control = mayac.curve(degree = 1,\n                                      point = [(0.5, 0.5, 0.5),\n                                          (0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, -0.5),\n                                          (-0.5, -0.5, -0.5),\n                                          (0.5, -0.5, -0.5),\n                                          (0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, -0.5),\n                                          (-0.5, 0.5, 0.5),\n                                          (0.5, 0.5, 0.5),\n                                          (0.5, -0.5, 0.5),\n                                          (0.5, -0.5, -0.5),\n                                          (-0.5, -0.5, -0.5),\n                                          (-0.5, -0.5, 0.5),\n                                          (0.5, -0.5, 0.5),\n                                          (-0.5, -0.5, 0.5),\n                                          (-0.5, 0.5, 0.5)],\n                                      knot = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])                                                                            \n                mayac.move(0, -.4, .1, \"%s.cv[1:2]\" % (control), \"%s.cv[5:6]\" % (control), relative = True)\n                mayac.move(0, .1, 0, \"%s.cv[3:4]\" % (control), \"%s.cv[10:11]\" % (control), relative = True)\n                mayac.move(0, .3, 0, \"%s.cv[0]\" % (control), \"%s.cv[7:8]\" % (control), \"%s.cv[15]\" % (control), relative = True)\n                mayac.scale(1.0, .75, 1.0, \"%s.cv[1:6]\" % (control), \"%s.cv[10:11]\" % (control))      \n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True)\n                mayac.move(offset[0], offset[1], offset[2],  \"%s.cv[0:15]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n                \n\n                \n        elif style == \"circleWrapped\":\n            if estimateSize:\n                control = mayac.circle(constructionHistory = 0)\n                control = control[0]\n                mayac.move(0, 0, 1.0, \"%s.cv[3]\" % (control), \"%s.cv[7]\" % (control), relative = True)\n                mayac.move(0, 0, -1.0, \"%s.cv[1]\" % (control), \"%s.cv[5]\" % (control), relative = True)\n                mayac.scale(scale[0],scale[1],scale[2])\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True) #override for world-oriented rigs\n                mayac.move(offset[0], offset[1], offset[2], \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n            \n            \n        elif style == \"pin\":\n            if estimateSize:\n                control = mayac.circle(constructionHistory = 0)\n                control = control[0]\n                mayac.scale(1.0, 0.0, 0.0, \"%s.cv[1:5]\" % (control))\n                mayac.move(-2.891806, 0, 0, \"%s.cv[3]\" % (control), relative = True)\n                mayac.move(4.0, 0, 0, \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.rotate(180, 0, 180, control)\n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True) #override for world-oriented rigs\n                mayac.move(offset[0], offset[1], offset[2], \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n                \n        elif style == \"pin1\" or style == \"pin2\":\n            if estimateSize:\n                control = mayac.circle(constructionHistory = 0)\n                control = control[0]\n                mayac.scale(1.0, 0.0, 0.0, \"%s.cv[1:5]\" % (control))\n                mayac.move(-2.891806, 0, 0, \"%s.cv[3]\" % (control), relative = True)\n                mayac.move(4.0, 0, 0, \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.scale(scale[0], scale[1], scale[2], control)\n                if flipFingers:\n                    mayac.rotate(rotate[0], 180, rotate[2], control, relative = True) #flip fingers\n                else:\n                    mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True) #override for world-oriented rigs\n                mayac.move(offset[0], offset[1], offset[2], \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"       \n        \n\n        elif style == \"options\":\n            if estimateSize:\n                control = mayac.curve(degree = 1,\n                                      point = [(-1.03923, 0.0, 0.6),\n                                          (1.03923, 0.0, 0.6),\n                                          (0.0, 0.0, -1.2),\n                                          (-1.03923, 0.0, 0.6)],\n                                      knot = [0,1,2,3])    \n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True) #override for world-oriented rigs\n                mayac.move(offset[0], offset[1], offset[2],  \"%s.cv[0:15]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n            \n            \n        elif style == \"hula\":\n            if estimateSize:\n                control = mayac.circle(constructionHistory = 0)\n                control = control[0]\n                mayac.move(0, 0, -0.5, \"%s.cv[0]\" % (control), \"%s.cv[2]\" % (control), \"%s.cv[4]\" % (control), \"%s.cv[6]\" % (control), relative = True)\n                mayac.move(0, 0, 0.3, \"%s.cv[1]\" % (control), \"%s.cv[3]\" % (control), \"%s.cv[5]\" % (control), \"%s.cv[7]\" % (control), relative = True)\n                mayac.rotate(0, 90, 90, control)\n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.move(offset[0], offset[1], offset[2], \"%s.cv[0:7]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n                \n                \n        elif style == \"PoleVector\":\n            if estimateSize:\n                control = mayac.curve(degree = 1,\n                                      point = [(0.0, 2.0, 0.0),\n                                          (1.0, 0.0, -1.0),\n                                          (-1.0, 0.0, -1.0),\n                                          (0.0, 2.0, 0.0),\n                                          (-1.0, 0.0, 1.0),\n                                          (1.0, 0.0, 1.0),\n                                          (0.0, 2.0, 0.0),\n                                          (1.0, 0.0, -1.0),\n                                          (1.0, 0.0, 1.0),\n                                          (-1.0, 0.0, 1.0),\n                                          (-1.0, 0.0, -1.0)],\n                                      knot = [0,1,2,3,4,5,6,7,8,9,10])\n                mayac.rotate(90, 0, 0, control)\n                mayac.rotate(rotate[0], rotate[1], rotate[2], control, relative = True)                                                                                          \n                mayac.scale(scale[0], scale[1], scale[2], control)\n                mayac.move(offset[0], offset[1], offset[2],  \"%s.cv[0:9]\" % (control), relative = True)\n                mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            else:\n                print \"exactSizeNotFunctionalYet\"\n\n\n        #set color\n        DJB_ChangeDisplayColor(control, color = color_)\n        #place control\n        if not partialConstraint:\n            mayac.delete(mayac.parentConstraint(self.Bind_Joint, control))\n        elif partialConstraint == 2:\n            mayac.delete(mayac.parentConstraint(self.Bind_Joint, control, sr=[\"x\"]))\n        elif partialConstraint == 1:\n            mayac.delete(mayac.pointConstraint(self.Bind_Joint, control))\n            mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            mayac.xform(control, cp = True)\n            mayac.scale(1,-1,1, control)\n            mayac.makeIdentity(control, apply = True, t=1, r=1, s=1, n=0)\n            cvPos = mayac.xform(\"%s.cv[0]\" % (control), query = True, worldSpace = True, translation = True)\n            pivPosY = mayac.getAttr(\"%s.rotatePivotY\" % (control))\n            mayac.setAttr(\"%s.translateY\" % (control), cvPos[1] - pivPosY)\n            DJB_movePivotToObject(control, self.Bind_Joint, posOnly = True)\n            mayac.delete(mayac.aimConstraint(self.children[0].Bind_Joint, control, skip = [\"x\", \"z\"], weight = 1, aimVector = (0,0,1), worldUpType = \"vector\", upVector = (0,1,0)))\n\n        if style == \"pin1\":\n            mayac.delete(mayac.orientConstraint(self.Bind_Joint, control, offset = (0,-90,90)))\n        if type == \"FK\":\n            self.FK_CTRL = mayac.rename(control, DJB_findAfterSeperator(self.nodeName, \":\") + \"_FK_CTRL\")\n            self.FK_CTRL_COLOR = color_ \n        elif type == \"IK\":\n            self.IK_CTRL = mayac.rename(control, DJB_findAfterSeperator(self.nodeName, \":\") + \"_IK_CTRL\")\n            self.IK_CTRL_COLOR = color_\n        elif type == \"options\":\n            if not name_:\n                self.Options_CTRL = mayac.rename(control, DJB_findAfterSeperator(self.nodeName, \":\") + \"_Options\")\n            else:\n                self.Options_CTRL = mayac.rename(control, name_)\n            self.Options_CTRL_COLOR = color_\n        elif type == \"Dyn\":\n            if not name_:\n                self.Dyn_CTRL = mayac.rename(control, DJB_findAfterSeperator(self.nodeName, \":\") + \"_Dyn_CTRL\")\n            else:\n                self.Dyn_CTRL = mayac.rename(control, name_)\n            self.Dyn_CTRL_COLOR = color_\n        elif type == \"normal\":\n            if \"Hips\" in self.nodeName:\n                if self.actAsRoot:\n                    self.FK_CTRL = mayac.rename(control, \"Root_CTRL\")\n                else:\n                    self.FK_CTRL = mayac.rename(control, \"Pelvis_CTRL\")\n            else:\n                self.FK_CTRL = mayac.rename(control, DJB_findAfterSeperator(self.nodeName, \":\") + \"_CTRL\")\n            self.FK_CTRL_COLOR = color_\n     \n     \n     \n        \n    def zeroToOrig(self, transform):\n        if transform:\n            if not mayac.getAttr(\"%s.tx\" % (transform),lock=True):\n                mel.eval('CBdeleteConnection \"%s.tx\";'%(transform))\n                mayac.setAttr(\"%s.tx\" % (transform), self.origPosX)\n            if not mayac.getAttr(\"%s.ty\" % (transform),lock=True):\n                mel.eval('CBdeleteConnection \"%s.ty\";'%(transform))\n                mayac.setAttr(\"%s.ty\" % (transform), self.origPosY)\n            if not mayac.getAttr(\"%s.tz\" % (transform),lock=True):\n                mel.eval('CBdeleteConnection \"%s.tz\";'%(transform))\n                mayac.setAttr(\"%s.tz\" % (transform), self.origPosZ)\n            if not mayac.getAttr(\"%s.rx\" % (transform),lock=True):\n                mel.eval('CBdeleteConnection \"%s.rx\";'%(transform))\n                mayac.setAttr(\"%s.rx\" % (transform), self.origRotX)\n            if not mayac.getAttr(\"%s.ry\" % (transform),lock=True):\n                mel.eval('CBdeleteConnection \"%s.ry\";'%(transform))\n                mayac.setAttr(\"%s.ry\" % (transform), self.origRotY)\n            if not mayac.getAttr(\"%s.rz\" % (transform),lock=True):\n                mel.eval('CBdeleteConnection \"%s.rz\";'%(transform))\n                mayac.setAttr(\"%s.rz\" % (transform), self.origRotZ)\n\n\n\n\n    def finalizeCTRLs(self, parent = \"UseSelf\"):   \n        #find type of chains\n        switchName = \"\"\n        if self.FK_Joint and self.IK_Joint:\n            switchName = \"FK_IK\"\n        elif self.FK_Joint and self.Dyn_Joint:\n            switchName = \"FK_Dyn\"\n        #record original positions, rotations\n        self.origPosX = mayac.getAttr(\"%s.translateX\" % (self.Bind_Joint))\n        self.origPosY = mayac.getAttr(\"%s.translateY\" % (self.Bind_Joint))\n        self.origPosZ = mayac.getAttr(\"%s.translateZ\" % (self.Bind_Joint))\n        self.origRotX = mayac.getAttr(\"%s.rotateX\" % (self.Bind_Joint))\n        self.origRotY = mayac.getAttr(\"%s.rotateY\" % (self.Bind_Joint))\n        self.origRotZ = mayac.getAttr(\"%s.rotateZ\" % (self.Bind_Joint))\n        #hook up control\n        if self.FK_CTRL:\n            #place control\n            temp = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"UnRotate\" + self.nodeName)\n            mayac.parent(self.FK_CTRL, temp[0])\n            mayac.rotate(0,0,0, temp[0])\n            mayac.parent(self.FK_CTRL, world = True)\n            DJB_movePivotToObject(self.FK_CTRL, temp[0])\n            mayac.delete(temp[0])\n            #add attributes  \n            mayac.addAttr(self.FK_CTRL, longName='AnimDataMult', defaultValue=1.0, keyable = True)\n            self.FK_CTRL_inRig_CONST_GRP = DJB_createGroup(transform = self.FK_CTRL, fullName = self.FK_CTRL + \"_In_Rig_CONST_GRP\")\n            self.FK_CTRL_animData_CONST_GRP = DJB_createGroup(transform = self.FK_CTRL_inRig_CONST_GRP, fullName = self.FK_CTRL + \"_AnimData_CONST_GRP\")\n            self.FK_CTRL_animData_MultNode = mayac.createNode( 'multiplyDivide', n=self.FK_CTRL + \"_AnimData_MultNode\")\n            self.FK_CTRL_POS_GRP = DJB_createGroup(transform = self.FK_CTRL_animData_CONST_GRP, fullName = self.FK_CTRL + \"_POS_GRP\")\n            \n            #set rotation orders\n            mayac.setAttr(\"%s.rotateOrder\" % (self.FK_CTRL), self.rotOrder)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.FK_CTRL_inRig_CONST_GRP), self.rotOrder)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.FK_CTRL_animData_CONST_GRP), self.rotOrder)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.FK_CTRL_POS_GRP), self.rotOrder)\n            \n            #place in hierarchy\n            if parent == \"UseSelf\" and self.parent:\n                mayac.parent(self.FK_CTRL_POS_GRP, self.parent.FK_CTRL)\n            elif parent != \"UseSelf\":\n                mayac.parent(self.FK_CTRL_POS_GRP, parent)\n                \n            if \"Head\" in self.nodeName:\n                mayac.addAttr(self.FK_CTRL, longName='InheritRotation', defaultValue=1.0, min = 0, max = 1.0, keyable = True)\n                self.Inherit_Rotation_GRP = DJB_createGroup(transform = None, fullName = self.FK_CTRL + \"_Inherit_Rotation_GRP\", pivotFrom = self.FK_CTRL)\n                mayac.parent(self.Inherit_Rotation_GRP, self.FK_CTRL_animData_CONST_GRP)\n                mayac.setAttr(\"%s.inheritsTransform\" % (self.Inherit_Rotation_GRP), 0)\n                temp = mayac.orientConstraint(self.FK_CTRL_animData_CONST_GRP, self.FK_CTRL_inRig_CONST_GRP, maintainOffset = True)\n                self.Inherit_Rotation_Constraint = temp[0]\n                mayac.orientConstraint(self.Inherit_Rotation_GRP, self.FK_CTRL_inRig_CONST_GRP, maintainOffset = True)\n                self.Inherit_Rotation_Constraint_Reverse = mayac.createNode( 'reverse', n=\"Head_Inherit_Rotation_Constraint_Reverse\")\n                mayac.connectAttr(\"%s.InheritRotation\" %(self.FK_CTRL), \"%s.inputX\" %(self.Inherit_Rotation_Constraint_Reverse))\n                mayac.connectAttr(\"%s.InheritRotation\" %(self.FK_CTRL), \"%s.%sW0\" %(self.Inherit_Rotation_Constraint, self.FK_CTRL_animData_CONST_GRP))\n                mayac.connectAttr(\"%s.outputX\" %(self.Inherit_Rotation_Constraint_Reverse), \"%s.%sW1\" %(self.Inherit_Rotation_Constraint, self.Inherit_Rotation_GRP))\n                mayac.setAttr(\"%s.interpType\" %(self.Inherit_Rotation_Constraint), 2)\n                \n        \n        \n        \n            #hook up CTRLs\n            mayac.connectAttr(\"%s.rotateX\" %(self.AnimData_Joint), \"%s.input1X\" %(self.FK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.AnimDataMult\" %(self.FK_CTRL), \"%s.input2X\" %(self.FK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.rotateY\" %(self.AnimData_Joint), \"%s.input1Y\" %(self.FK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.AnimDataMult\" %(self.FK_CTRL), \"%s.input2Y\" %(self.FK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.rotateZ\" %(self.AnimData_Joint), \"%s.input1Z\" %(self.FK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.AnimDataMult\" %(self.FK_CTRL), \"%s.input2Z\" %(self.FK_CTRL_animData_MultNode), force = True)\n            \n            mayac.connectAttr(\"%s.outputX\" %(self.FK_CTRL_animData_MultNode), \"%s.rotateX\" %(self.FK_CTRL_animData_CONST_GRP), force = True)\n            mayac.connectAttr(\"%s.outputY\" %(self.FK_CTRL_animData_MultNode), \"%s.rotateY\" %(self.FK_CTRL_animData_CONST_GRP), force = True)\n            mayac.connectAttr(\"%s.outputZ\" %(self.FK_CTRL_animData_MultNode), \"%s.rotateZ\" %(self.FK_CTRL_animData_CONST_GRP), force = True)\n            if not self.FK_Joint:\n                if self.actAsRoot:\n                    mayac.addAttr(self.FK_CTRL, longName='AnimDataMultTrans', defaultValue=1.0, keyable = True)\n                    self.FK_CTRL_animData_MultNode_Trans = mayac.createNode( 'multiplyDivide', n=self.FK_CTRL + \"_AnimData_MultNode_Trans\")\n                    temp = mayac.parentConstraint(self.FK_CTRL, self.Bind_Joint, mo = True, name = \"%s_Constraint\" %(self.nodeName))\n                    self.Constraint = temp[0]\n                    \n                    mayac.connectAttr(\"%s.translateX\" %(self.AnimData_Joint), \"%s.input1X\" %(self.FK_CTRL_animData_MultNode_Trans), force = True)\n                    mayac.connectAttr(\"%s.AnimDataMultTrans\" %(self.FK_CTRL), \"%s.input2X\" %(self.FK_CTRL_animData_MultNode_Trans), force = True)\n                    mayac.connectAttr(\"%s.translateY\" %(self.AnimData_Joint), \"%s.input1Y\" %(self.FK_CTRL_animData_MultNode_Trans), force = True)\n                    mayac.connectAttr(\"%s.AnimDataMultTrans\" %(self.FK_CTRL), \"%s.input2Y\" %(self.FK_CTRL_animData_MultNode_Trans), force = True)\n                    mayac.connectAttr(\"%s.translateZ\" %(self.AnimData_Joint), \"%s.input1Z\" %(self.FK_CTRL_animData_MultNode_Trans), force = True)\n                    mayac.connectAttr(\"%s.AnimDataMultTrans\" %(self.FK_CTRL), \"%s.input2Z\" %(self.FK_CTRL_animData_MultNode_Trans), force = True)\n                    \n                    mayac.connectAttr(\"%s.outputX\" %(self.FK_CTRL_animData_MultNode_Trans), \"%s.translateX\" %(self.FK_CTRL_POS_GRP), force = True)\n                    mayac.connectAttr(\"%s.outputY\" %(self.FK_CTRL_animData_MultNode_Trans), \"%s.translateY\" %(self.FK_CTRL_POS_GRP), force = True)\n                    mayac.connectAttr(\"%s.outputZ\" %(self.FK_CTRL_animData_MultNode_Trans), \"%s.translateZ\" %(self.FK_CTRL_POS_GRP), force = True)\n                    mayac.connectAttr(\"%s.outputX\" %(self.FK_CTRL_animData_MultNode_Trans), \"%s.translateX\" %(self.IK_Dummy_Joint), force = True)\n                    mayac.connectAttr(\"%s.outputY\" %(self.FK_CTRL_animData_MultNode_Trans), \"%s.translateY\" %(self.IK_Dummy_Joint), force = True)\n                    mayac.connectAttr(\"%s.outputZ\" %(self.FK_CTRL_animData_MultNode_Trans), \"%s.translateZ\" %(self.IK_Dummy_Joint), force = True)\n                elif self.translateOpen:\n                    temp = mayac.parentConstraint(self.FK_CTRL, self.Bind_Joint, mo = True, name = \"%s_Constraint\" %(self.nodeName))\n                    self.Constraint = temp[0]\n                    mayac.setAttr(\"%s.offsetX\" % (self.Constraint), 0)\n                    mayac.setAttr(\"%s.offsetY\" % (self.Constraint), 0)\n                    mayac.setAttr(\"%s.offsetZ\" % (self.Constraint), 0)\n                else:\n                    temp = mayac.orientConstraint(self.FK_CTRL, self.Bind_Joint, mo = True, name = \"%s_Constraint\" %(self.nodeName))\n                    self.Constraint = temp[0]\n                    mayac.setAttr(\"%s.offsetX\" % (self.Constraint), 0)\n                    mayac.setAttr(\"%s.offsetY\" % (self.Constraint), 0)\n                    mayac.setAttr(\"%s.offsetZ\" % (self.Constraint), 0)\n            elif self.translateOpen:\n                temp= mayac.parentConstraint(self.FK_CTRL, self.FK_Joint, mo = True, name = \"%s_FK_Constraint\" %(self.nodeName))\n                self.FK_Constraint = temp[0]\n                temp = mayac.parentConstraint(self.FK_Joint, self.Bind_Joint, mo = True, name = \"%s_%s_Constraint\" %(self.nodeName, switchName))\n                self.Constraint = temp[0]\n            else:\n                temp= mayac.orientConstraint(self.FK_CTRL, self.FK_Joint, mo = True, name = \"%s_FK_Constraint\" %(self.nodeName))\n                self.FK_Constraint = temp[0]\n                temp = mayac.orientConstraint(self.FK_Joint, self.Bind_Joint, mo = True, name = \"%s_%s_Constraint\" %(self.nodeName, switchName))\n                self.Constraint = temp[0]\n                mayac.setAttr(\"%s.offsetX\" % (self.Constraint), 0)\n                mayac.setAttr(\"%s.offsetY\" % (self.Constraint), 0)\n                mayac.setAttr(\"%s.offsetZ\" % (self.Constraint), 0)\n        \n        if self.IK_Dummy_Joint:\n            mayac.connectAttr(\"%s.rotateX\" %(self.AnimData_Joint), \"%s.rotateX\" %(self.IK_Dummy_Joint), force = True)\n            mayac.connectAttr(\"%s.rotateY\" %(self.AnimData_Joint), \"%s.rotateY\" %(self.IK_Dummy_Joint), force = True)\n            mayac.connectAttr(\"%s.rotateZ\" %(self.AnimData_Joint), \"%s.rotateZ\" %(self.IK_Dummy_Joint), force = True)\n\n        if self.IK_CTRL:\n            #place control\n            if \"Foot\" in self.nodeName:\n                self.footRotateLOC = mayac.spaceLocator(n = self.IK_CTRL + \"_footRotateLOC\")\n                self.footRotateLOC = self.footRotateLOC[0]\n                DJB_movePivotToObject(self.footRotateLOC, self.IK_Joint)\n                mayac.delete(mayac.orientConstraint(self.IK_CTRL, self.footRotateLOC))\n                mayac.setAttr(\"%s.rotateOrder\" % (self.footRotateLOC), self.rotOrder)\n\n                \n                \n            temp = mayac.duplicate(self.Bind_Joint, parentOnly = True, name = \"UnRotate\" + self.nodeName)\n            mayac.parent(self.IK_CTRL, temp[0])\n            mayac.rotate(0,0,0, temp[0])\n            mayac.parent(self.IK_CTRL, world = True)\n            DJB_movePivotToObject(self.IK_CTRL, temp[0])\n            mayac.delete(temp[0])\n            #add attributes  \n            mayac.addAttr(self.IK_CTRL, longName='AnimDataMult', defaultValue=1.0, keyable = True)\n            mayac.addAttr(self.IK_CTRL, longName='FollowBody', defaultValue=1.0, minValue = 0, maxValue = 1.0, keyable = True)\n            if \"Foot\" in self.nodeName:\n                self.IK_CTRL_ReorientGRP = DJB_createGroup(transform = self.IK_CTRL, fullName = self.IK_CTRL + \"_Reorient_GRP\")\n                self.IK_CTRL_inRig_CONST_GRP = DJB_createGroup(transform = self.IK_CTRL_ReorientGRP, fullName = self.IK_CTRL + \"_In_Rig_CONST_GRP\")\n                DJB_movePivotToObject(self.IK_CTRL, self.footRotateLOC)\n                DJB_movePivotToObject(self.IK_CTRL_ReorientGRP, self.footRotateLOC)\n                mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_ReorientGRP), self.rotOrder)\n                mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_inRig_CONST_GRP), self.rotOrder)\n                #mayac.delete(self.footRotateLOC)\n                mayac.parent(self.IK_CTRL_ReorientGRP, self.IK_CTRL_inRig_CONST_GRP)\n                mayac.parent(self.IK_CTRL, self.IK_CTRL_ReorientGRP)\n            else:\n                self.IK_CTRL_inRig_CONST_GRP = DJB_createGroup(transform = self.IK_CTRL, fullName = self.IK_CTRL + \"_In_Rig_CONST_GRP\")\n            self.IK_CTRL_animData_CONST_GRP = DJB_createGroup(transform = self.IK_CTRL_inRig_CONST_GRP, fullName = self.IK_CTRL + \"_AnimData_CONST_GRP\")\n            self.IK_CTRL_animData_MultNode = mayac.createNode( 'multiplyDivide', n=self.IK_CTRL + \"_AnimData_MultNode\")\n            self.IK_CTRL_POS_GRP = DJB_createGroup(transform = self.IK_CTRL_animData_CONST_GRP, fullName = self.IK_CTRL + \"_POS_GRP\")\n            \n            #set rotation orders\n            mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL), self.rotOrder)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_inRig_CONST_GRP), self.rotOrder)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_animData_CONST_GRP), self.rotOrder)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_POS_GRP), self.rotOrder)\n            \n            #place in hierarchy\n            #hook up CTRLs\n            mayac.connectAttr(\"%s.rotateX\" %(self.AnimData_Joint), \"%s.input1X\" %(self.IK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2X\" %(self.IK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.rotateY\" %(self.AnimData_Joint), \"%s.input1Y\" %(self.IK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2Y\" %(self.IK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.rotateZ\" %(self.AnimData_Joint), \"%s.input1Z\" %(self.IK_CTRL_animData_MultNode), force = True)\n            mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2Z\" %(self.IK_CTRL_animData_MultNode), force = True)\n            \n            mayac.connectAttr(\"%s.outputX\" %(self.IK_CTRL_animData_MultNode), \"%s.rotateX\" %(self.IK_CTRL_animData_CONST_GRP), force = True)\n            mayac.connectAttr(\"%s.outputY\" %(self.IK_CTRL_animData_MultNode), \"%s.rotateY\" %(self.IK_CTRL_animData_CONST_GRP), force = True)\n            mayac.connectAttr(\"%s.outputZ\" %(self.IK_CTRL_animData_MultNode), \"%s.rotateZ\" %(self.IK_CTRL_animData_CONST_GRP), force = True)\n            \n            if \"Hand\" in self.nodeName or \"ForeArm\" in self.nodeName or \"Foot\" in self.nodeName or \"Leg\" in self.nodeName:\n                self.IK_CTRL_parent_animData_CONST_GRP = DJB_createGroup(transform = self.IK_CTRL_POS_GRP, fullName = self.IK_CTRL + \"_parent_AnimData_CONST_GRP\")\n                \n                #place parent GRP\n                temp = mayac.duplicate(self.parent.Bind_Joint, parentOnly = True, name = \"UnRotate\" + self.nodeName)\n                mayac.parent(self.IK_CTRL_parent_animData_CONST_GRP, temp[0])\n                mayac.rotate(0,0,0, temp[0])\n                mayac.parent(self.IK_CTRL_POS_GRP, world = True)\n                mayac.parent(self.IK_CTRL_parent_animData_CONST_GRP, world = True)\n                DJB_movePivotToObject(self.IK_CTRL_parent_animData_CONST_GRP, temp[0])\n                mayac.delete(temp[0])\n                mayac.parent(self.IK_CTRL_POS_GRP, self.IK_CTRL_parent_animData_CONST_GRP)\n                \n                self.IK_CTRL_parent_animData_MultNode = mayac.createNode( 'multiplyDivide', n=self.IK_CTRL + \"_parent_AnimData_MultNode\")\n                self.IK_CTRL_parent_Global_POS_GRP = DJB_createGroup(transform = self.IK_CTRL_parent_animData_CONST_GRP, fullName = self.IK_CTRL + \"_parent_Global_POS_GRP\")\n                self.IK_CTRL_parent_POS_GRP = DJB_createGroup(transform = self.IK_CTRL_parent_Global_POS_GRP, fullName = self.IK_CTRL + \"_parent_POS_GRP\")\n\n                #set rotation orders\n                mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_parent_animData_CONST_GRP), self.parent.rotOrder)\n                mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_parent_Global_POS_GRP), self.parent.rotOrder)\n                mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_parent_POS_GRP), self.parent.rotOrder)\n\n                mayac.connectAttr(\"%s.rotateX\" %(self.parent.AnimData_Joint), \"%s.input1X\" %(self.IK_CTRL_parent_animData_MultNode), force = True)\n                mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2X\" %(self.IK_CTRL_parent_animData_MultNode), force = True)\n                mayac.connectAttr(\"%s.rotateY\" %(self.parent.AnimData_Joint), \"%s.input1Y\" %(self.IK_CTRL_parent_animData_MultNode), force = True)\n                mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2Y\" %(self.IK_CTRL_parent_animData_MultNode), force = True)\n                mayac.connectAttr(\"%s.rotateZ\" %(self.parent.AnimData_Joint), \"%s.input1Z\" %(self.IK_CTRL_parent_animData_MultNode), force = True)\n                mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2Z\" %(self.IK_CTRL_parent_animData_MultNode), force = True)\n                \n                mayac.connectAttr(\"%s.outputX\" %(self.IK_CTRL_parent_animData_MultNode), \"%s.rotateX\" %(self.IK_CTRL_parent_animData_CONST_GRP), force = True)\n                mayac.connectAttr(\"%s.outputY\" %(self.IK_CTRL_parent_animData_MultNode), \"%s.rotateY\" %(self.IK_CTRL_parent_animData_CONST_GRP), force = True)\n                mayac.connectAttr(\"%s.outputZ\" %(self.IK_CTRL_parent_animData_MultNode), \"%s.rotateZ\" %(self.IK_CTRL_parent_animData_CONST_GRP), force = True)\n                \n                mayac.addAttr(self.IK_CTRL, longName='ParentToGlobal', defaultValue=0.0, minValue = 0, maxValue = 1.0, keyable = True)\n\n                if \"ForeArm\" in self.nodeName:\n                    mayac.addAttr(self.IK_CTRL, longName='FollowHand', defaultValue=0.0, minValue = 0, maxValue = 1.0, keyable = True)\n                    #if \"Left\" in self.nodeName:\n                        #mayac.aimConstraint(self.IK_Joint, self.IK_CTRL, upVector = (0,1,0), aimVector = (-1,0,0))\n                    #elif \"Right\" in self.nodeName:\n                        #mayac.aimConstraint(self.IK_Joint, self.IK_CTRL, upVector = (0,1,0), aimVector = (1,0,0))\n                        \n                    #IK elbow bakingLOCs\n                    temp = mayac.spaceLocator(name = \"%s_IK_BakingLOC\" % (self.nodeName))\n                    self.IK_BakingLOC = temp[0]\n                    mayac.parent(self.IK_BakingLOC, self.Bind_Joint)\n                    DJB_ZeroOut(self.IK_BakingLOC)\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.IK_BakingLOC), self.rotOrder)\n                    \n                    \n                \n                        \n                if \"Leg\" in self.nodeName:\n                    mayac.addAttr(self.IK_CTRL, longName='FollowFoot', defaultValue=0.0, minValue = 0, maxValue = 1.0, keyable = True)\n                    #mayac.aimConstraint(self.IK_Joint, self.IK_CTRL, upVector = (0,1,0), aimVector = (0,0,-1))\n                    \n                    #groups for follow foot Attr\n                    self.Follow_Knee_GRP = DJB_createGroup(transform = None, fullName = self.IK_CTRL + \"_Follow_Knee_GRP\", pivotFrom = self.FK_CTRL)\n                    self.Follow_Foot_GRP = DJB_createGroup(transform = self.Follow_Knee_GRP, fullName = self.IK_CTRL + \"_Follow_Foot_GRP\", pivotFrom = self.FK_CTRL)\n                    #set rotation orders\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.Follow_Knee_GRP), self.rotOrder)\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.Follow_Foot_GRP), self.rotOrder)\n\n                    mayac.parent(self.Follow_Foot_GRP, self.IK_CTRL_animData_CONST_GRP)\n                    selfPOS = mayac.xform(self.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n                    parentPOS = mayac.xform(self.parent.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n                    tempDistance = math.sqrt((selfPOS[0]-parentPOS[0])*(selfPOS[0]-parentPOS[0]) + (selfPOS[1]-parentPOS[1])*(selfPOS[1]-parentPOS[1]) + (selfPOS[2]-parentPOS[2])*(selfPOS[2]-parentPOS[2]))\n                    mayac.setAttr(\"%s.translateZ\" % (self.Follow_Knee_GRP), tempDistance / 2)\n                    temp = mayac.pointConstraint(self.IK_Joint, self.Follow_Knee_GRP, sk = (\"x\", \"y\"), mo = True)\n                    self.Follow_Knee_Constraint = temp[0]\n                    \n                    #IK knee bakingLOCs\n                    temp = mayac.spaceLocator(name = \"%s_IK_BakingLOC\" % (self.nodeName))\n                    self.IK_BakingLOC = temp[0]\n                    mayac.parent(self.IK_BakingLOC, self.Bind_Joint)\n                    DJB_ZeroOut(self.IK_BakingLOC)\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.IK_BakingLOC), self.rotOrder)\n\n                    if \"Left\" in self.nodeName:\n                        mayac.setAttr(\"%s.translateZ\" % (self.IK_BakingLOC), tempDistance / 2)\n                        #mayac.setAttr(\"%s.translateX\" % (self.IK_BakingLOC), -2.017)\n                    elif \"Right\" in self.nodeName:\n                        mayac.setAttr(\"%s.translateZ\" % (self.IK_BakingLOC), tempDistance / 2)\n                    \n\n                if \"Hand\" in self.nodeName or \"Foot\" in self.nodeName:\n                    self.IK_CTRL_grandparent_inRig_CONST_GRP = DJB_createGroup(transform = self.IK_CTRL_parent_POS_GRP, fullName = self.IK_CTRL + \"_grandparent_inRig_CONST_GRP\", pivotFrom = self.parent.parent.Bind_Joint)\n                    \n                    \n                    #place parent GRP\n                    temp = mayac.duplicate(self.parent.parent.Bind_Joint, parentOnly = True, name = \"UnRotate\" + self.nodeName)\n                    mayac.parent(self.IK_CTRL_grandparent_inRig_CONST_GRP, temp[0])\n                    mayac.rotate(0,0,0, temp[0])\n                    mayac.parent(self.IK_CTRL_parent_POS_GRP, world = True)\n                    mayac.parent(self.IK_CTRL_grandparent_inRig_CONST_GRP, world = True)\n                    DJB_movePivotToObject(self.IK_CTRL_grandparent_inRig_CONST_GRP, temp[0])\n                    mayac.delete(temp[0])\n                    mayac.parent(self.IK_CTRL_parent_POS_GRP, self.IK_CTRL_grandparent_inRig_CONST_GRP)\n                \n                    self.IK_CTRL_grandparent_animData_CONST_GRP = DJB_createGroup(transform = self.IK_CTRL_grandparent_inRig_CONST_GRP, fullName = self.IK_CTRL + \"_grandparent_AnimData_CONST_GRP\")\n                    self.IK_CTRL_grandparent_animData_MultNode = mayac.createNode( 'multiplyDivide', n=self.IK_CTRL + \"_grandparent_AnimData_MultNode\")\n                    self.IK_CTRL_grandparent_Global_POS_GRP = DJB_createGroup(transform = self.IK_CTRL_grandparent_animData_CONST_GRP, fullName = self.IK_CTRL + \"_grandparent_Global_POS_GRP\")\n                    self.IK_CTRL_grandparent_POS_GRP = DJB_createGroup(transform = self.IK_CTRL_grandparent_Global_POS_GRP, fullName = self.IK_CTRL + \"_grandparent_POS_GRP\")\n                    \n                    #set rotation orders\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_grandparent_inRig_CONST_GRP), self.parent.parent.rotOrder)\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_grandparent_animData_CONST_GRP), self.parent.parent.rotOrder)\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_grandparent_Global_POS_GRP), self.parent.parent.rotOrder)\n                    mayac.setAttr(\"%s.rotateOrder\" % (self.IK_CTRL_grandparent_POS_GRP), self.parent.parent.rotOrder)\n                    \n                    mayac.connectAttr(\"%s.rotateX\" %(self.parent.parent.AnimData_Joint), \"%s.input1X\" %(self.IK_CTRL_grandparent_animData_MultNode), force = True)\n                    mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2X\" %(self.IK_CTRL_grandparent_animData_MultNode), force = True)\n                    mayac.connectAttr(\"%s.rotateY\" %(self.parent.parent.AnimData_Joint), \"%s.input1Y\" %(self.IK_CTRL_grandparent_animData_MultNode), force = True)\n                    mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2Y\" %(self.IK_CTRL_grandparent_animData_MultNode), force = True)\n                    mayac.connectAttr(\"%s.rotateZ\" %(self.parent.parent.AnimData_Joint), \"%s.input1Z\" %(self.IK_CTRL_grandparent_animData_MultNode), force = True)\n                    mayac.connectAttr(\"%s.AnimDataMult\" %(self.IK_CTRL), \"%s.input2Z\" %(self.IK_CTRL_grandparent_animData_MultNode), force = True)\n                    \n                    mayac.connectAttr(\"%s.outputX\" %(self.IK_CTRL_grandparent_animData_MultNode), \"%s.rotateX\" %(self.IK_CTRL_grandparent_animData_CONST_GRP), force = True)\n                    mayac.connectAttr(\"%s.outputY\" %(self.IK_CTRL_grandparent_animData_MultNode), \"%s.rotateY\" %(self.IK_CTRL_grandparent_animData_CONST_GRP), force = True)\n                    mayac.connectAttr(\"%s.outputZ\" %(self.IK_CTRL_grandparent_animData_MultNode), \"%s.rotateZ\" %(self.IK_CTRL_grandparent_animData_CONST_GRP), force = True)\n                    \n                    temp = mayac.ikHandle( n=\"%s_IK_Handle\" % (self.nodeName), sj= self.parent.parent.IK_Joint, ee= self.IK_Joint, solver = \"ikRPsolver\", weight = 1)\n                    self.IK_Handle = temp[0]\n                    mayac.setAttr(\"%s.visibility\" % (self.IK_Handle), 0)\n                    self.IK_EndEffector = temp[1]\n                    temp = mayac.poleVectorConstraint( self.parent.IK_CTRL, self.IK_Handle )\n                    self.PV_Constraint = temp[0]\n                    if \"Foot\" in self.nodeName:\n                        temp = mayac.orientConstraint(self.IK_CTRL_inRig_CONST_GRP, self.IK_Joint)\n                        self.IK_Constraint = temp[0]\n                    else:\n                        temp = mayac.orientConstraint(self.IK_CTRL, self.IK_Joint)\n                        self.IK_Constraint = temp[0]\n                                     \n                    \n                    if \"Hand\" in self.nodeName:\n                        mayac.parent(self.IK_Handle, self.IK_CTRL)\n                        DJB_LockNHide(self.IK_Handle)\n                        DJB_LockNHide(self.IK_EndEffector)\n                    if \"Foot\" in self.nodeName:\n                        mayac.addAttr(self.IK_CTRL, longName='FootControls', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.setAttr(\"%s.FootControls\" % (self.IK_CTRL), lock = True)\n                        mayac.addAttr(self.IK_CTRL, longName='FootRoll', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='ToeTap', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='ToeSideToSide', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='ToeRotate', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='ToeRoll', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='HipPivot', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='BallPivot', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='ToePivot', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='HipSideToSide', defaultValue=0.0, hidden = False, keyable = True)\n                        mayac.addAttr(self.IK_CTRL, longName='HipBackToFront', defaultValue=0.0, hidden = False, keyable = True)\n                        \n                        #Foot IK Baking LOCs\n                        temp = mayac.spaceLocator(n = \"%s_IK_BakingLOC\" % (self.nodeName))\n                        self.IK_BakingLOC = temp[0]\n                        mayac.setAttr(\"%s.visibility\"%(self.IK_BakingLOC), 0)\n                        mayac.parent(self.IK_BakingLOC, self.Bind_Joint)\n                        mayac.delete(mayac.parentConstraint(self.IK_CTRL, self.IK_BakingLOC))\n                        \n            \n            mayac.orientConstraint(self.IK_Joint, self.Bind_Joint, mo = True)\n        if not self.IK_CTRL and self.IK_Joint and not self.translateOpen:\n            mayac.orientConstraint(self.IK_Joint, self.Bind_Joint, mo = True)\n        elif not self.IK_CTRL and self.IK_Joint and self.translateOpen:\n            mayac.parentConstraint(self.IK_Joint, self.Bind_Joint, mo = True)\n        if self.Dyn_Joint:\n            if not self.translateOpen:\n                mayac.orientConstraint(self.DynMult_Joint, self.Bind_Joint, mo = True)\n            else:\n                mayac.parentConstraint(self.DynMult_Joint, self.Bind_Joint, mo = True)\n                self.Dyn_Mult1 = mayac.createNode( 'multiplyDivide', n=\"%s_MultNodeTrans\" %(self.nodeName))\n                mayac.connectAttr(\"%s.translate\"%(self.Dyn_Joint), \"%s.input1\"%(self.Dyn_Mult1))\n                mayac.connectAttr(\"%s.output\"%(self.Dyn_Mult1), \"%s.translate\"%(self.DynMult_Joint))\n            self.Dyn_Mult = mayac.createNode( 'multiplyDivide', n=\"%s_MultNode\" %(self.nodeName))\n            mayac.connectAttr(\"%s.rotate\"%(self.Dyn_Joint), \"%s.input1\"%(self.Dyn_Mult))\n            mayac.connectAttr(\"%s.output\"%(self.Dyn_Mult), \"%s.rotate\"%(self.DynMult_Joint))\n        if self.Dyn_CTRL:\n            mayac.addAttr(self.Dyn_CTRL, longName='weight', defaultValue=1.0, min = 0.0, max = 1.0, keyable = True)\n            mayac.addAttr(self.Dyn_CTRL, longName='conserve', defaultValue=1.0, min = 0.0, max = 1.0, keyable = True)\n            mayac.addAttr(self.Dyn_CTRL, longName='multiplier', defaultValue=1.0, min = 0.0, keyable = True)\n            \n        if self.Options_CTRL:\n            #place control\n            DJB_movePivotToObject(self.Options_CTRL, self.Bind_Joint)\n            mayac.parentConstraint(self.Bind_Joint, self.Options_CTRL, mo = True, name = \"%s_Constraint\" %(self.Options_CTRL))\n            #add attributes  \n            mayac.addAttr(self.Options_CTRL, longName=switchName, defaultValue=0.0, min = 0.0, max = 1.0, keyable = True)\n            mayac.setAttr(\"%s.rotateOrder\" % (self.Options_CTRL), self.rotOrder)\n            if \"Hand\" in self.nodeName:\n                mayac.addAttr(self.Options_CTRL, longName='FingerControls', defaultValue=0.0, hidden = False, keyable = True)\n                mayac.setAttr(\"%s.FingerControls\" % (self.Options_CTRL), lock = True)\n                mayac.addAttr(self.Options_CTRL, longName='ThumbCurl', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                mayac.addAttr(self.Options_CTRL, longName='IndexCurl', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                mayac.addAttr(self.Options_CTRL, longName='MiddleCurl', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                mayac.addAttr(self.Options_CTRL, longName='RingCurl', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                mayac.addAttr(self.Options_CTRL, longName='PinkyCurl', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                mayac.addAttr(self.Options_CTRL, longName='Sway', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                mayac.addAttr(self.Options_CTRL, longName='Spread', defaultValue=0.0, min = -10.0, max = 10.0, hidden = False, keyable = True)\n                \n            \n            \n        \n    def lockUpCTRLs(self):    \n        #lock and hide attributes\n        if self.Dyn_CTRL:\n            DJB_LockNHide(self.Dyn_CTRL)\n        if self.FK_CTRL:\n            if self.nodeName == \"Root\":\n                DJB_LockNHide(self.FK_CTRL, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False)\n            elif self.nodeName == \"Hips\" and self.actAsRoot:\n                DJB_LockNHide(self.FK_CTRL, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False)\n            elif self.translateOpen:\n                DJB_LockNHide(self.FK_CTRL, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False)\n            else:\n                DJB_LockNHide(self.FK_CTRL, rx = False, ry = False, rz = False)\n            DJB_LockNHide(self.FK_CTRL_inRig_CONST_GRP)\n            DJB_LockNHide(self.FK_CTRL_animData_CONST_GRP)\n            DJB_LockNHide(self.FK_CTRL_POS_GRP)\n            \n        if self.IK_CTRL:\n            #lock and hide channels\n            DJB_LockNHide(self.IK_CTRL, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False)\n            DJB_LockNHide(self.IK_CTRL_inRig_CONST_GRP)\n            DJB_LockNHide(self.IK_CTRL_animData_CONST_GRP)\n            DJB_LockNHide(self.IK_CTRL_POS_GRP)\n            if self.IK_CTRL_grandparent_inRig_CONST_GRP:\n                DJB_LockNHide(self.IK_CTRL_grandparent_inRig_CONST_GRP)\n            if self.IK_CTRL_parent_POS_GRP:\n                DJB_LockNHide(self.IK_CTRL_parent_POS_GRP)\n                DJB_LockNHide(self.IK_CTRL_parent_Global_POS_GRP)\n                DJB_LockNHide(self.IK_CTRL_parent_animData_CONST_GRP)\n                if self.IK_CTRL_grandparent_POS_GRP:\n                    DJB_LockNHide(self.IK_CTRL_grandparent_POS_GRP)\n                    DJB_LockNHide(self.IK_CTRL_grandparent_Global_POS_GRP)\n                    DJB_LockNHide(self.IK_CTRL_grandparent_animData_CONST_GRP)\n            if self.IK_CTRL_ReorientGRP:\n                DJB_LockNHide(self.IK_CTRL_ReorientGRP)\n            if self.IK_Handle:\n                DJB_LockNHide(self.IK_Handle)\n            if \"ForeArm\" in self.nodeName or \"LeftLeg\" in self.nodeName or \"RightLeg\" in self.nodeName:\n                DJB_LockNHide(self.IK_CTRL, tx = False, ty = False, tz = False, rx = True, ry = True, rz = True)\n                mayac.setAttr(\"%s.visibility\" % (self.IK_BakingLOC), 0)\n            \n        if self.Options_CTRL:\n            DJB_LockNHide(self.Options_CTRL)\n            \n        \n\n\nclass DJB_Character():\n    def __init__(self, infoNode_ = None, hulaOption_ = 0, name_ = \"Character\"):\n        self.characterNameSpace = None\n        self.name = None\n        self.joints = None\n        self.original_Mesh_Names = None\n        self.mesh = None\n        self.jointNamespace = None\n        self.BoundingBox = None\n        self.Root = None\n        self.Hips = None\n        self.Spine = None\n        self.Spine1 = None\n        self.Spine2 = None\n        self.Spine3 = None\n        self.Neck = None\n        self.Neck1 = None\n        self.Head = None\n        self.HeadTop_End = None\n        self.LeftShoulder = None\n        self.LeftArm = None\n        self.LeftForeArm = None\n        self.LeftHand = None\n        self.LeftHandThumb1 = None\n        self.LeftHandThumb2 = None\n        self.LeftHandThumb3 = None\n        self.LeftHandThumb4 = None\n        self.LeftHandIndex1 = None\n        self.LeftHandIndex2 = None\n        self.LeftHandIndex3 = None\n        self.LeftHandIndex4 = None\n        self.LeftHandMiddle1 = None\n        self.LeftHandMiddle2 = None\n        self.LeftHandMiddle3 = None\n        self.LeftHandMiddle4 = None\n        self.LeftHandRing1 = None\n        self.LeftHandRing2 = None\n        self.LeftHandRing3 = None\n        self.LeftHandRing4 = None\n        self.LeftHandPinky1 = None\n        self.LeftHandPinky2 = None\n        self.LeftHandPinky3 = None\n        self.LeftHandPinky4 = None\n        self.RightShoulder = None\n        self.RightArm = None\n        self.RightForeArm = None\n        self.RightHand = None\n        self.RightHandThumb1 = None\n        self.RightHandThumb2 = None\n        self.RightHandThumb3 = None\n        self.RightHandThumb4 = None\n        self.RightHandIndex1 = None\n        self.RightHandIndex2 = None\n        self.RightHandIndex3 = None\n        self.RightHandIndex4 = None\n        self.RightHandMiddle1 = None\n        self.RightHandMiddle2 = None\n        self.RightHandMiddle3 = None\n        self.RightHandMiddle4 = None\n        self.RightHandRing1 = None\n        self.RightHandRing2 = None\n        self.RightHandRing3 = None\n        self.RightHandRing4 = None\n        self.RightHandPinky1 = None\n        self.RightHandPinky2 = None\n        self.RightHandPinky3 = None\n        self.RightHandPinky4 = None\n        self.LeftUpLeg = None\n        self.LeftLeg = None\n        self.LeftFoot = None\n        self.LeftToeBase = None\n        self.LeftToe_End = None\n        self.RightUpLeg = None\n        self.RightLeg = None\n        self.RightFoot = None\n        self.RightToeBase = None\n        self.RightToe_End = None\n        self.bodyParts = None\n        self.proportions = {}\n        self.defaultControlScale = 0\n        self.Character_GRP = None\n        self.global_CTRL = None\n        self.CTRL_GRP = None\n        self.Joint_GRP = None\n        self.AnimData_Joint_GRP = None\n        self.Bind_Joint_GRP = None\n        self.Mesh_GRP = None\n        self.Misc_GRP = None\n        self.LeftArm_Switch_Reverse = None\n        self.RightArm_Switch_Reverse = None\n        self.LeftLeg_Switch_Reverse = None\n        self.RightLeg_Switch_Reverse = None\n        self.Bind_Joint_SelectSet = None\n        self.AnimData_Joint_SelectSet = None\n        self.Controls_SelectSet = None\n        self.Geo_SelectSet = None\n        self.Left_Toe_IK_AnimData_GRP = None\n        self.Left_Toe_IK_CTRL = None\n        self.Left_ToeBase_IK_AnimData_GRP = None\n        self.Left_IK_ToeBase_animData_MultNode = None\n        self.Left_ToeBase_IK_CTRL = None\n        self.Left_Ankle_IK_AnimData_GRP = None\n        self.Left_Ankle_IK_CTRL = None\n        self.Left_ToeBase_IkHandle = None\n        self.Left_ToeEnd_IkHandle = None\n        self.Right_Toe_IK_AnimData_GRP = None\n        self.Right_Toe_IK_CTRL = None\n        self.Right_ToeBase_IK_AnimData_GRP = None\n        self.Right_IK_ToeBase_animData_MultNode = None\n        self.Right_ToeBase_IK_CTRL = None\n        self.Right_Ankle_IK_AnimData_GRP = None\n        self.Right_Ankle_IK_CTRL = None\n        self.Right_ToeBase_IkHandle = None\n        self.Right_ToeEnd_IkHandle = None\n        self.LeftHand_CTRLs_GRP = None\n        self.RightHand_CTRLs_GRP = None\n        self.LeftFoot_FootRoll_MultNode = None\n        self.LeftFoot_ToeRoll_MultNode = None\n        self.RightFoot_FootRoll_MultNode = None\n        self.RightFoot_ToeRoll_MultNode = None\n        self.RightFoot_HipPivot_MultNode = None\n        self.RightFoot_BallPivot_MultNode = None\n        self.RightFoot_ToePivot_MultNode = None\n        self.RightFoot_HipSideToSide_MultNode = None\n        self.RightFoot_ToeRotate_MultNode = None\n        self.IK_Dummy_Joint_GRP = None\n        self.LeftHand_grandparent_Constraint = None\n        self.LeftHand_grandparent_Constraint_Reverse = None\n        self.RightHand_grandparent_Constraint = None\n        self.RightHand_grandparent_Constraint_Reverse = None\n        self.LeftForeArm_grandparent_Constraint = None\n        self.LeftForeArm_grandparent_Constraint_Reverse = None\n        self.RightForeArm_grandparent_Constraint = None\n        self.RightForeArm_grandparent_Constraint_Reverse = None\n        self.origAnim = None\n        self.origAnimation_Layer = None\n        self.Mesh_Layer = None\n        self.Control_Layer = None\n        self.Bind_Joint_Layer = None\n        self.infoNode = infoNode_\n        self.rigType = None\n        self.blendShapeTrackers = None\n        \n        \n        self.ExtraJoints = None\n        self.numExtraJointChains = 0\n        self.Dyn_CTRL = None\n        \n        self.hulaOption = hulaOption_\n        self.exportList = None\n        \n        if not self.infoNode:\n            self.name = name_\n            mayac.currentTime(1)\n            self.joints = mayac.ls(type = \"joint\")\n            locators = mayac.ls(et = \"locator\")\n            if locators:\n                mayac.delete(locators)\n            global JOINT_NAMESPACE\n            self.mesh = []\n            temp = mayac.ls(geometry = True)\n            self.original_Mesh_Names = []\n            shapes = []\n            for geo in temp:\n                #Shape22Orig, ShapeOrig, should make a better test\n                if \"Orig\" not in geo and \"Bounding_Box_Override_Cube\" not in geo:\n                    shapes.append(geo)\n                    transform = mayac.listRelatives(geo, parent = True)[0]\n                    self.original_Mesh_Names.append(transform)\n            for geo in shapes:\n                parent = mayac.listRelatives(geo, parent = True, path = True)[0]\n                if \"|\" in geo:\n                    geo = makeUnique(geo, \"Shape\")\n                parent = mayac.listRelatives(geo, parent = True, path = True)[0]\n                DJB_Unlock(parent)\n                parent = mayac.rename(parent, \"Mesh_%s\" % (DJB_findAfterSeperator(parent, \":\")))\n                self.mesh.append(mayac.listRelatives(parent, children = True, type = \"shape\", path = True)[0])\n                \n            self.jointNamespace = JOINT_NAMESPACE = DJB_findBeforeSeparator(self.joints[1], ':') #changed from 0 for one special case - zombie lores\n            \n            #override box gets proportions if it exists\n            global DJB_Character_ProportionOverrideCube\n            if DJB_Character_ProportionOverrideCube:\n                if mayac.objExists(DJB_Character_ProportionOverrideCube):\n                    self.BoundingBox = mayac.exactWorldBoundingBox(DJB_Character_ProportionOverrideCube)\n                    mayac.delete(DJB_Character_ProportionOverrideCube)\n                else:\n                    DJB_Character_ProportionOverrideCube = \"\"\n                    self.BoundingBox = mayac.exactWorldBoundingBox(self.mesh)\n            else:\n                self.BoundingBox = mayac.exactWorldBoundingBox(self.mesh)\n            \n            if self.hulaOption:              \n                self.Root = DJB_CharacterNode(\"Root\", actAsRoot_ = 1, optional_ = 1)\n                if not self.Root.Bind_Joint:\n                    mayac.duplicate(self.jointNamespace + \"Hips\", parentOnly = True, name = self.jointNamespace + \"Root\")\n                    self.Root = DJB_CharacterNode(\"Root\", actAsRoot_ = 1)\n                self.Hips = DJB_CharacterNode(\"Hips\", parent = self.Root)\n                self.Spine = DJB_CharacterNode(\"Spine\", parent = self.Root)\n                mayac.parent(self.Hips.Bind_Joint, self.Spine.Bind_Joint, self.Root.Bind_Joint)\n            else:\n                self.Root = DJB_CharacterNode(\"Root\", optional_ = 1)\n                if self.Root.Bind_Joint:\n                    self.Hips = DJB_CharacterNode(\"Hips\")\n                    self.hulaOption = True\n                else:\n                    self.Hips = DJB_CharacterNode(\"Hips\", actAsRoot_ = 1)\n                self.Spine = DJB_CharacterNode(\"Spine\", parent = self.Hips)\n                \n            self.Spine1 = DJB_CharacterNode(\"Spine1\", parent = self.Spine)\n            self.Spine2 = DJB_CharacterNode(\"Spine2\", parent = self.Spine1, optional_ = 1)\n            if self.Spine2.Bind_Joint:\n                self.Spine3 = DJB_CharacterNode(\"Spine3\", parent = self.Spine2, optional_ = 1)\n                if self.Spine3.Bind_Joint:\n                    self.Neck = DJB_CharacterNode(\"Neck\", parent = self.Spine3)\n                else:\n                    self.Neck = DJB_CharacterNode(\"Neck\", parent = self.Spine2)\n                self.Neck1 = DJB_CharacterNode(\"Neck1\", parent = self.Neck, optional_ = 1)\n                if self.Neck1.Bind_Joint:\n                    self.Head = DJB_CharacterNode(\"Head\", parent = self.Neck1)\n                else:\n                    self.Head = DJB_CharacterNode(\"Head\", parent = self.Neck)\n                self.HeadTop_End = DJB_CharacterNode(\"HeadTop_End\", parent = self.Head, alias_ = [\"Head_End\", \"Head_END\"])\n                if self.Spine3.Bind_Joint:\n                    self.LeftShoulder = DJB_CharacterNode(\"LeftShoulder\", parent = self.Spine3)\n                else:\n                    self.LeftShoulder = DJB_CharacterNode(\"LeftShoulder\", parent = self.Spine2)\n            else:\n                #going to put in a blank spine3 just to mitigate errors, TODO: better handling\n                self.Spine3 = DJB_CharacterNode(\"Spine3\", parent = self.Spine1, optional_ = 1)\n                self.Neck = DJB_CharacterNode(\"Neck\", parent = self.Spine1)\n                self.Neck1 = DJB_CharacterNode(\"Neck1\", parent = self.Neck, optional_ = 1)\n                if self.Neck1.Bind_Joint:\n                    self.Head = DJB_CharacterNode(\"Head\", parent = self.Neck1)\n                else:\n                    self.Head = DJB_CharacterNode(\"Head\", parent = self.Neck)\n                self.HeadTop_End = DJB_CharacterNode(\"HeadTop_End\", parent = self.Head, alias_ = [\"Head_End\", \"Head_END\"])\n                self.LeftShoulder = DJB_CharacterNode(\"LeftShoulder\", parent = self.Spine1)\n            self.LeftArm = DJB_CharacterNode(\"LeftArm\", parent = self.LeftShoulder)\n            self.LeftForeArm = DJB_CharacterNode(\"LeftForeArm\", parent = self.LeftArm)\n            self.LeftHand = DJB_CharacterNode(\"LeftHand\", parent = self.LeftForeArm)\n            self.LeftHandThumb1 = DJB_CharacterNode(\"LeftHandThumb1\", optional_ = 1, parent = self.LeftHand)\n            self.LeftHandThumb2 = DJB_CharacterNode(\"LeftHandThumb2\", optional_ = 1, parent = self.LeftHandThumb1)\n            self.LeftHandThumb3 = DJB_CharacterNode(\"LeftHandThumb3\", optional_ = 1, parent = self.LeftHandThumb2)\n            self.LeftHandThumb4 = DJB_CharacterNode(\"LeftHandThumb4\", optional_ = 1, parent = self.LeftHandThumb3)\n            self.LeftHandIndex1 = DJB_CharacterNode(\"LeftHandIndex1\", optional_ = 1,parent = self.LeftHand)\n            self.LeftHandIndex2 = DJB_CharacterNode(\"LeftHandIndex2\", optional_ = 1, parent = self.LeftHandIndex1)\n            self.LeftHandIndex3 = DJB_CharacterNode(\"LeftHandIndex3\", optional_ = 1, parent = self.LeftHandIndex2)\n            self.LeftHandIndex4 = DJB_CharacterNode(\"LeftHandIndex4\", optional_ = 1, parent = self.LeftHandIndex3)\n            self.LeftHandMiddle1 = DJB_CharacterNode(\"LeftHandMiddle1\", optional_ = 1, parent = self.LeftHand)\n            self.LeftHandMiddle2 = DJB_CharacterNode(\"LeftHandMiddle2\", optional_ = 1, parent = self.LeftHandMiddle1)\n            self.LeftHandMiddle3 = DJB_CharacterNode(\"LeftHandMiddle3\", optional_ = 1, parent = self.LeftHandMiddle2)\n            self.LeftHandMiddle4 = DJB_CharacterNode(\"LeftHandMiddle4\", optional_ = 1, parent = self.LeftHandMiddle3)\n            self.LeftHandRing1 = DJB_CharacterNode(\"LeftHandRing1\", optional_ = 1, parent = self.LeftHand)\n            self.LeftHandRing2 = DJB_CharacterNode(\"LeftHandRing2\", optional_ = 1, parent = self.LeftHandRing1)\n            self.LeftHandRing3 = DJB_CharacterNode(\"LeftHandRing3\", optional_ = 1, parent = self.LeftHandRing2)\n            self.LeftHandRing4 = DJB_CharacterNode(\"LeftHandRing4\", optional_ = 1, parent = self.LeftHandRing3)\n            self.LeftHandPinky1 = DJB_CharacterNode(\"LeftHandPinky1\", optional_ = 1, parent = self.LeftHand)\n            self.LeftHandPinky2 = DJB_CharacterNode(\"LeftHandPinky2\", optional_ = 1, parent = self.LeftHandPinky1)\n            self.LeftHandPinky3 = DJB_CharacterNode(\"LeftHandPinky3\", optional_ = 1, parent = self.LeftHandPinky2)\n            self.LeftHandPinky4 = DJB_CharacterNode(\"LeftHandPinky4\", optional_ = 1, parent = self.LeftHandPinky3)\n            if self.Spine2.Bind_Joint:\n                if self.Spine3.Bind_Joint:\n                    self.RightShoulder = DJB_CharacterNode(\"RightShoulder\", parent = self.Spine3)\n                else:\n                    self.RightShoulder = DJB_CharacterNode(\"RightShoulder\", parent = self.Spine2)\n            else:\n                self.RightShoulder = DJB_CharacterNode(\"RightShoulder\", parent = self.Spine1)\n            self.RightArm = DJB_CharacterNode(\"RightArm\", parent = self.RightShoulder)\n            self.RightForeArm = DJB_CharacterNode(\"RightForeArm\", parent = self.RightArm)\n            self.RightHand = DJB_CharacterNode(\"RightHand\", parent = self.RightForeArm)\n            self.RightHandThumb1 = DJB_CharacterNode(\"RightHandThumb1\", optional_ = 1, parent = self.RightHand)\n            self.RightHandThumb2 = DJB_CharacterNode(\"RightHandThumb2\", optional_ = 1, parent = self.RightHandThumb1)\n            self.RightHandThumb3 = DJB_CharacterNode(\"RightHandThumb3\", optional_ = 1, parent = self.RightHandThumb2)\n            self.RightHandThumb4 = DJB_CharacterNode(\"RightHandThumb4\", optional_ = 1, parent = self.RightHandThumb3)\n            self.RightHandIndex1 = DJB_CharacterNode(\"RightHandIndex1\", optional_ = 1, parent = self.RightHand)\n            self.RightHandIndex2 = DJB_CharacterNode(\"RightHandIndex2\", optional_ = 1, parent = self.RightHandIndex1)\n            self.RightHandIndex3 = DJB_CharacterNode(\"RightHandIndex3\", optional_ = 1, parent = self.RightHandIndex2)\n            self.RightHandIndex4 = DJB_CharacterNode(\"RightHandIndex4\", optional_ = 1, parent = self.RightHandIndex3)\n            self.RightHandMiddle1 = DJB_CharacterNode(\"RightHandMiddle1\", optional_ = 1, parent = self.RightHand)\n            self.RightHandMiddle2 = DJB_CharacterNode(\"RightHandMiddle2\", optional_ = 1, parent = self.RightHandMiddle1)\n            self.RightHandMiddle3 = DJB_CharacterNode(\"RightHandMiddle3\", optional_ = 1, parent = self.RightHandMiddle2)\n            self.RightHandMiddle4 = DJB_CharacterNode(\"RightHandMiddle4\", optional_ = 1, parent = self.RightHandMiddle3)\n            self.RightHandRing1 = DJB_CharacterNode(\"RightHandRing1\", optional_ = 1, parent = self.RightHand)\n            self.RightHandRing2 = DJB_CharacterNode(\"RightHandRing2\", optional_ = 1, parent = self.RightHandRing1)\n            self.RightHandRing3 = DJB_CharacterNode(\"RightHandRing3\", optional_ = 1, parent = self.RightHandRing2)\n            self.RightHandRing4 = DJB_CharacterNode(\"RightHandRing4\", optional_ = 1, parent = self.RightHandRing3)\n            self.RightHandPinky1 = DJB_CharacterNode(\"RightHandPinky1\", optional_ = 1, parent = self.RightHand)\n            self.RightHandPinky2 = DJB_CharacterNode(\"RightHandPinky2\", optional_ = 1, parent = self.RightHandPinky1)\n            self.RightHandPinky3 = DJB_CharacterNode(\"RightHandPinky3\", optional_ = 1, parent = self.RightHandPinky2)\n            self.RightHandPinky4 = DJB_CharacterNode(\"RightHandPinky4\", optional_ = 1, parent = self.RightHandPinky3)\n            self.LeftUpLeg = DJB_CharacterNode(\"LeftUpLeg\", parent = self.Hips)\n            self.LeftLeg = DJB_CharacterNode(\"LeftLeg\", parent = self.LeftUpLeg)\n            self.LeftFoot = DJB_CharacterNode(\"LeftFoot\", parent = self.LeftLeg)\n            self.LeftToeBase = DJB_CharacterNode(\"LeftToeBase\", parent = self.LeftFoot)\n            self.LeftToe_End = DJB_CharacterNode(\"LeftToe_End\", parent = self.LeftToeBase, alias_ = [\"toe_L\", \"LeftFootToeBase_End\"])\n            self.RightUpLeg = DJB_CharacterNode(\"RightUpLeg\", parent = self.Hips)\n            self.RightLeg = DJB_CharacterNode(\"RightLeg\", parent = self.RightUpLeg)\n            self.RightFoot = DJB_CharacterNode(\"RightFoot\", parent = self.RightLeg)\n            self.RightToeBase = DJB_CharacterNode(\"RightToeBase\", parent = self.RightFoot)\n            self.RightToe_End = DJB_CharacterNode(\"RightToe_End\", parent = self.RightToeBase, alias_ = [\"toe_R\", \"RightFootToeBase_End\"])\n            \n            #educated guess with 2 samples for rig type\n            if mayac.getAttr(\"%s.jointOrient\" % self.LeftUpLeg.Bind_Joint)[0] == (0,0,0) and mayac.getAttr(\"%s.jointOrient\" % self.RightArm.Bind_Joint)[0] == (0,0,0):\n                self.rigType = \"World\"\n            else:\n                self.rigType = \"AutoRig\"\n            \n            #educated guess for fingerFlip\n            if self.LeftHandIndex1.Bind_Joint:\n                jox = mayac.getAttr(\"%s.jointOrientX\" % (self.LeftHandIndex1.Bind_Joint))\n                if jox < -100 or jox > 100:\n                    self.fingerFlip = False\n                else:\n                    self.fingerFlip = True\n            \n        #there is an infoNode for this Character\n        else:\n            \n            self.characterNameSpace = DJB_findBeforeSeparator(self.infoNode, ':')\n            self.jointNamespace = attrToPy(\"%s.jointNamespace\" % (self.infoNode))\n            #filmbox attrs\n            self.name = attrToPy(\"%s.name\" % (self.infoNode))\n            \n            \n            \n            self.mesh = attrToPy(\"%s.mesh\" % (self.infoNode))\n            self.original_Mesh_Names = attrToPy(\"%s.original_Mesh_Names\" % (self.infoNode))\n            self.BoundingBox = attrToPy(\"%s.BoundingBox\" % (self.infoNode))\n            self.rigType = attrToPy(\"%s.rigType\" % (self.infoNode))\n            #####################\n            self.hulaOption = attrToPy(\"%s.hulaOption\" % (self.infoNode))\n            \n            self.Root = DJB_CharacterNode(\"Root\", infoNode_ = attrToPy(\"%s.Root\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            if self.hulaOption:\n                if not self.Root.Bind_Joint:\n                    return None\n                self.Hips = DJB_CharacterNode(\"Hips\", parent = self.Root, infoNode_ = attrToPy(\"%s.Hips\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                self.Spine = DJB_CharacterNode(\"Spine\", parent = self.Root, infoNode_ = attrToPy(\"%s.Spine\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            else:\n                self.Hips = DJB_CharacterNode(\"Hips\", infoNode_ = attrToPy(\"%s.Hips\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                self.Spine = DJB_CharacterNode(\"Spine\", parent = self.Hips, infoNode_ = attrToPy(\"%s.Spine\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.Spine1 = DJB_CharacterNode(\"Spine1\", parent = self.Spine, infoNode_ = attrToPy(\"%s.Spine1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.Spine2 = DJB_CharacterNode(\"Spine2\", parent = self.Spine1, optional_ = 1, infoNode_ = attrToPy(\"%s.Spine2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            if self.Spine2.Bind_Joint:\n                self.Spine3 = DJB_CharacterNode(\"Spine3\", parent = self.Spine2, optional_ = 1, infoNode_ = attrToPy(\"%s.Spine3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                if self.Spine3.Bind_Joint:\n                    self.Neck = DJB_CharacterNode(\"Neck\", parent = self.Spine3, infoNode_ = attrToPy(\"%s.Neck\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                else:\n                    self.Neck = DJB_CharacterNode(\"Neck\", parent = self.Spine2, infoNode_ = attrToPy(\"%s.Neck\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            else:\n                self.Spine3 = DJB_CharacterNode(\"Spine3\", parent = self.Spine1, optional_ = 1, infoNode_ = attrToPy(\"%s.Spine3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                self.Neck = DJB_CharacterNode(\"Neck\", parent = self.Spine1, infoNode_ = attrToPy(\"%s.Neck\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.Neck1 = DJB_CharacterNode(\"Neck1\", parent = self.Neck, optional_ = 1, infoNode_ = attrToPy(\"%s.Neck1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            if self.Neck1.Bind_Joint:\n                self.Head = DJB_CharacterNode(\"Head\", parent = self.Neck1, infoNode_ = attrToPy(\"%s.Head\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            else:\n                self.Head = DJB_CharacterNode(\"Head\", parent = self.Neck, infoNode_ = attrToPy(\"%s.Head\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.HeadTop_End = DJB_CharacterNode(\"HeadTop_End\", parent = self.Head, infoNode_ = attrToPy(\"%s.HeadTop_End\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            if self.Spine2.Bind_Joint:\n                if self.Spine3.Bind_Joint:\n                    self.LeftShoulder = DJB_CharacterNode(\"LeftShoulder\", parent = self.Spine3, infoNode_ = attrToPy(\"%s.LeftShoulder\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                else:\n                    self.LeftShoulder = DJB_CharacterNode(\"LeftShoulder\", parent = self.Spine2, infoNode_ = attrToPy(\"%s.LeftShoulder\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            else:\n                self.LeftShoulder = DJB_CharacterNode(\"LeftShoulder\", parent = self.Spine1, infoNode_ = attrToPy(\"%s.LeftShoulder\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftArm = DJB_CharacterNode(\"LeftArm\", parent = self.LeftShoulder, infoNode_ = attrToPy(\"%s.LeftArm\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftForeArm = DJB_CharacterNode(\"LeftForeArm\", parent = self.LeftArm, infoNode_ = attrToPy(\"%s.LeftForeArm\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHand = DJB_CharacterNode(\"LeftHand\", parent = self.LeftForeArm, infoNode_ = attrToPy(\"%s.LeftHand\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandThumb1 = DJB_CharacterNode(\"LeftHandThumb1\", optional_ = 1, parent = self.LeftHand, infoNode_ = attrToPy(\"%s.LeftHandThumb1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandThumb2 = DJB_CharacterNode(\"LeftHandThumb2\", optional_ = 1, parent = self.LeftHandThumb1, infoNode_ = attrToPy(\"%s.LeftHandThumb2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandThumb3 = DJB_CharacterNode(\"LeftHandThumb3\", optional_ = 1, parent = self.LeftHandThumb2, infoNode_ = attrToPy(\"%s.LeftHandThumb3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandThumb4 = DJB_CharacterNode(\"LeftHandThumb4\", optional_ = 1, parent = self.LeftHandThumb3, infoNode_ = attrToPy(\"%s.LeftHandThumb4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandIndex1 = DJB_CharacterNode(\"LeftHandIndex1\", optional_ = 1, parent = self.LeftHand, infoNode_ = attrToPy(\"%s.LeftHandIndex1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandIndex2 = DJB_CharacterNode(\"LeftHandIndex2\", optional_ = 1, parent = self.LeftHandIndex1, infoNode_ = attrToPy(\"%s.LeftHandIndex2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandIndex3 = DJB_CharacterNode(\"LeftHandIndex3\", optional_ = 1, parent = self.LeftHandIndex2, infoNode_ = attrToPy(\"%s.LeftHandIndex3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandIndex4 = DJB_CharacterNode(\"LeftHandIndex4\", optional_ = 1, parent = self.LeftHandIndex3, infoNode_ = attrToPy(\"%s.LeftHandIndex4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandMiddle1 = DJB_CharacterNode(\"LeftHandMiddle1\", optional_ = 1, parent = self.LeftHand, infoNode_ = attrToPy(\"%s.LeftHandMiddle1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandMiddle2 = DJB_CharacterNode(\"LeftHandMiddle2\", optional_ = 1, parent = self.LeftHandMiddle1, infoNode_ = attrToPy(\"%s.LeftHandMiddle2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandMiddle3 = DJB_CharacterNode(\"LeftHandMiddle3\", optional_ = 1, parent = self.LeftHandMiddle2, infoNode_ = attrToPy(\"%s.LeftHandMiddle3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandMiddle4 = DJB_CharacterNode(\"LeftHandMiddle4\", optional_ = 1, parent = self.LeftHandMiddle3, infoNode_ = attrToPy(\"%s.LeftHandMiddle4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandRing1 = DJB_CharacterNode(\"LeftHandRing1\", optional_ = 1, parent = self.LeftHand, infoNode_ = attrToPy(\"%s.LeftHandRing1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandRing2 = DJB_CharacterNode(\"LeftHandRing2\", optional_ = 1, parent = self.LeftHandRing1, infoNode_ = attrToPy(\"%s.LeftHandRing2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandRing3 = DJB_CharacterNode(\"LeftHandRing3\", optional_ = 1, parent = self.LeftHandRing2, infoNode_ = attrToPy(\"%s.LeftHandRing3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandRing4 = DJB_CharacterNode(\"LeftHandRing4\", optional_ = 1, parent = self.LeftHandRing3, infoNode_ = attrToPy(\"%s.LeftHandRing4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandPinky1 = DJB_CharacterNode(\"LeftHandPinky1\", optional_ = 1, parent = self.LeftHand, infoNode_ = attrToPy(\"%s.LeftHandPinky1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandPinky2 = DJB_CharacterNode(\"LeftHandPinky2\", optional_ = 1, parent = self.LeftHandPinky1, infoNode_ = attrToPy(\"%s.LeftHandPinky2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandPinky3 = DJB_CharacterNode(\"LeftHandPinky3\", optional_ = 1, parent = self.LeftHandPinky2, infoNode_ = attrToPy(\"%s.LeftHandPinky3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftHandPinky4 = DJB_CharacterNode(\"LeftHandPinky4\", optional_ = 1, parent = self.LeftHandPinky3, infoNode_ = attrToPy(\"%s.LeftHandPinky4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            if self.Spine2.Bind_Joint:\n                if self.Spine3.Bind_Joint:\n                    self.RightShoulder = DJB_CharacterNode(\"RightShoulder\", parent = self.Spine3, infoNode_ = attrToPy(\"%s.RightShoulder\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n                else:\n                    self.RightShoulder = DJB_CharacterNode(\"RightShoulder\", parent = self.Spine2, infoNode_ = attrToPy(\"%s.RightShoulder\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            else:\n                self.RightShoulder = DJB_CharacterNode(\"RightShoulder\", parent = self.Spine1, infoNode_ = attrToPy(\"%s.RightShoulder\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightArm = DJB_CharacterNode(\"RightArm\", parent = self.RightShoulder, infoNode_ = attrToPy(\"%s.RightArm\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightForeArm = DJB_CharacterNode(\"RightForeArm\", parent = self.RightArm, infoNode_ = attrToPy(\"%s.RightForeArm\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHand = DJB_CharacterNode(\"RightHand\", parent = self.RightForeArm, infoNode_ = attrToPy(\"%s.RightHand\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandThumb1 = DJB_CharacterNode(\"RightHandThumb1\", optional_ = 1, parent = self.RightHand, infoNode_ = attrToPy(\"%s.RightHandThumb1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandThumb2 = DJB_CharacterNode(\"RightHandThumb2\", optional_ = 1, parent = self.RightHandThumb1, infoNode_ = attrToPy(\"%s.RightHandThumb2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandThumb3 = DJB_CharacterNode(\"RightHandThumb3\", optional_ = 1, parent = self.RightHandThumb2, infoNode_ = attrToPy(\"%s.RightHandThumb3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandThumb4 = DJB_CharacterNode(\"RightHandThumb4\", optional_ = 1, parent = self.RightHandThumb3, infoNode_ = attrToPy(\"%s.RightHandThumb4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandIndex1 = DJB_CharacterNode(\"RightHandIndex1\", optional_ = 1, parent = self.RightHand, infoNode_ = attrToPy(\"%s.RightHandIndex1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandIndex2 = DJB_CharacterNode(\"RightHandIndex2\", optional_ = 1, parent = self.RightHandIndex1, infoNode_ = attrToPy(\"%s.RightHandIndex2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandIndex3 = DJB_CharacterNode(\"RightHandIndex3\", optional_ = 1, parent = self.RightHandIndex2, infoNode_ = attrToPy(\"%s.RightHandIndex3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandIndex4 = DJB_CharacterNode(\"RightHandIndex4\", optional_ = 1, parent = self.RightHandIndex3, infoNode_ = attrToPy(\"%s.RightHandIndex4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandMiddle1 = DJB_CharacterNode(\"RightHandMiddle1\", optional_ = 1, parent = self.RightHand, infoNode_ = attrToPy(\"%s.RightHandMiddle1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandMiddle2 = DJB_CharacterNode(\"RightHandMiddle2\", optional_ = 1, parent = self.RightHandMiddle1, infoNode_ = attrToPy(\"%s.RightHandMiddle2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandMiddle3 = DJB_CharacterNode(\"RightHandMiddle3\", optional_ = 1, parent = self.RightHandMiddle2, infoNode_ = attrToPy(\"%s.RightHandMiddle3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandMiddle4 = DJB_CharacterNode(\"RightHandMiddle4\", optional_ = 1, parent = self.RightHandMiddle3, infoNode_ = attrToPy(\"%s.RightHandMiddle4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandRing1 = DJB_CharacterNode(\"RightHandRing1\", optional_ = 1, parent = self.RightHand, infoNode_ = attrToPy(\"%s.RightHandRing1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandRing2 = DJB_CharacterNode(\"RightHandRing2\", optional_ = 1, parent = self.RightHandRing1, infoNode_ = attrToPy(\"%s.RightHandRing2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandRing3 = DJB_CharacterNode(\"RightHandRing3\", optional_ = 1, parent = self.RightHandRing2, infoNode_ = attrToPy(\"%s.RightHandRing3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandRing4 = DJB_CharacterNode(\"RightHandRing4\", optional_ = 1, parent = self.RightHandRing3, infoNode_ = attrToPy(\"%s.RightHandRing4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandPinky1 = DJB_CharacterNode(\"RightHandPinky1\", optional_ = 1, parent = self.RightHand, infoNode_ = attrToPy(\"%s.RightHandPinky1\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandPinky2 = DJB_CharacterNode(\"RightHandPinky2\", optional_ = 1, parent = self.RightHandPinky1, infoNode_ = attrToPy(\"%s.RightHandPinky2\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandPinky3 = DJB_CharacterNode(\"RightHandPinky3\", optional_ = 1, parent = self.RightHandPinky2, infoNode_ = attrToPy(\"%s.RightHandPinky3\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightHandPinky4 = DJB_CharacterNode(\"RightHandPinky4\", optional_ = 1, parent = self.RightHandPinky3, infoNode_ = attrToPy(\"%s.RightHandPinky4\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftUpLeg = DJB_CharacterNode(\"LeftUpLeg\", parent = self.Hips, infoNode_ = attrToPy(\"%s.LeftUpLeg\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftLeg = DJB_CharacterNode(\"LeftLeg\", parent = self.LeftUpLeg, infoNode_ = attrToPy(\"%s.LeftLeg\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftFoot = DJB_CharacterNode(\"LeftFoot\", parent = self.LeftLeg, infoNode_ = attrToPy(\"%s.LeftFoot\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftToeBase = DJB_CharacterNode(\"LeftToeBase\", parent = self.LeftFoot, infoNode_ = attrToPy(\"%s.LeftToeBase\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.LeftToe_End = DJB_CharacterNode(\"LeftToe_End\", parent = self.LeftToeBase, infoNode_ = attrToPy(\"%s.LeftToe_End\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightUpLeg = DJB_CharacterNode(\"RightUpLeg\", parent = self.Hips, infoNode_ = attrToPy(\"%s.RightUpLeg\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightLeg = DJB_CharacterNode(\"RightLeg\", parent = self.RightUpLeg, infoNode_ = attrToPy(\"%s.RightLeg\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightFoot = DJB_CharacterNode(\"RightFoot\", parent = self.RightLeg, infoNode_ = attrToPy(\"%s.RightFoot\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightToeBase = DJB_CharacterNode(\"RightToeBase\", parent = self.RightFoot, infoNode_ = attrToPy(\"%s.RightToeBase\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n            self.RightToe_End = DJB_CharacterNode(\"RightToe_End\", parent = self.RightToeBase, infoNode_ = attrToPy(\"%s.RightToe_End\" % (self.infoNode)), nameSpace_ = self.characterNameSpace)\n\n            ##############################################\n            self.proportions = attrToPy(\"%s.proportions\" % (self.infoNode))\n            self.defaultControlScale = attrToPy(\"%s.defaultControlScale\" % (self.infoNode))\n            self.Character_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Character_GRP\" % (self.infoNode)))\n            self.global_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.global_CTRL\" % (self.infoNode)))\n            self.CTRL_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.CTRL_GRP\" % (self.infoNode)))\n            self.Joint_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Joint_GRP\" % (self.infoNode)))\n            self.AnimData_Joint_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.AnimData_Joint_GRP\" % (self.infoNode)))\n            self.Bind_Joint_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Bind_Joint_GRP\" % (self.infoNode)))\n            self.Mesh_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Mesh_GRP\" % (self.infoNode)))\n            self.Misc_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Misc_GRP\" % (self.infoNode)))\n            self.LeftArm_Switch_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Misc_GRP\" % (self.infoNode)))\n            self.RightArm_Switch_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightArm_Switch_Reverse\" % (self.infoNode)))\n            self.LeftLeg_Switch_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftLeg_Switch_Reverse\" % (self.infoNode)))\n            self.RightLeg_Switch_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightLeg_Switch_Reverse\" % (self.infoNode)))\n            self.Bind_Joint_SelectSet = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Bind_Joint_SelectSet\" % (self.infoNode)))\n            self.AnimData_Joint_SelectSet = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.AnimData_Joint_SelectSet\" % (self.infoNode)))\n            self.Controls_SelectSet = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Controls_SelectSet\" % (self.infoNode)))\n            self.Geo_SelectSet = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Geo_SelectSet\" % (self.infoNode)))\n            self.Left_Toe_IK_AnimData_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_Toe_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Left_Toe_IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_Toe_IK_CTRL\" % (self.infoNode)))\n            self.Left_ToeBase_IK_AnimData_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_ToeBase_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Left_IK_ToeBase_animData_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_IK_ToeBase_animData_MultNode\" % (self.infoNode)))\n            self.Left_ToeBase_IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_ToeBase_IK_CTRL\" % (self.infoNode)))\n            self.Left_Ankle_IK_AnimData_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_Ankle_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Left_Ankle_IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_Ankle_IK_CTRL\" % (self.infoNode)))\n            self.Left_ToeBase_IkHandle = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_ToeBase_IkHandle\" % (self.infoNode)))\n            self.Left_ToeEnd_IkHandle = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Left_ToeEnd_IkHandle\" % (self.infoNode)))\n            self.Right_Toe_IK_AnimData_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_Toe_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Right_Toe_IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_Toe_IK_CTRL\" % (self.infoNode)))\n            self.Right_ToeBase_IK_AnimData_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_ToeBase_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Right_IK_ToeBase_animData_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_IK_ToeBase_animData_MultNode\" % (self.infoNode)))\n            self.Right_ToeBase_IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_ToeBase_IK_CTRL\" % (self.infoNode)))\n            self.Right_Ankle_IK_AnimData_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_Ankle_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Right_Ankle_IK_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_Ankle_IK_AnimData_GRP\" % (self.infoNode)))\n            self.Right_ToeBase_IkHandle = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_ToeBase_IkHandle\" % (self.infoNode)))\n            self.Right_ToeEnd_IkHandle = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Right_ToeEnd_IkHandle\" % (self.infoNode)))\n            self.LeftHand_CTRLs_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftHand_CTRLs_GRP\" % (self.infoNode)))\n            self.RightHand_CTRLs_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightHand_CTRLs_GRP\" % (self.infoNode)))\n            self.LeftFoot_FootRoll_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftFoot_FootRoll_MultNode\" % (self.infoNode)))\n            self.LeftFoot_ToeRoll_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftFoot_ToeRoll_MultNode\" % (self.infoNode)))\n            self.RightFoot_FootRoll_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_FootRoll_MultNode\" % (self.infoNode)))\n            self.RightFoot_ToeRoll_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_ToeRoll_MultNode\" % (self.infoNode)))\n            self.RightFoot_HipPivot_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_HipPivot_MultNode\" % (self.infoNode)))\n            self.RightFoot_BallPivot_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_BallPivot_MultNode\" % (self.infoNode)))\n            self.RightFoot_ToePivot_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_ToePivot_MultNode\" % (self.infoNode)))\n            self.RightFoot_HipSideToSide_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_HipSideToSide_MultNode\" % (self.infoNode)))\n            self.RightFoot_ToeRotate_MultNode = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightFoot_ToeRotate_MultNode\" % (self.infoNode)))\n            self.IK_Dummy_Joint_GRP = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.IK_Dummy_Joint_GRP\" % (self.infoNode)))\n            self.LeftHand_grandparent_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftHand_grandparent_Constraint\" % (self.infoNode)))\n            self.LeftHand_grandparent_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftHand_grandparent_Constraint_Reverse\" % (self.infoNode)))\n            self.RightHand_grandparent_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightHand_grandparent_Constraint\" % (self.infoNode)))\n            self.RightHand_grandparent_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightHand_grandparent_Constraint_Reverse\" % (self.infoNode)))\n            self.LeftForeArm_grandparent_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftForeArm_grandparent_Constraint\" % (self.infoNode)))\n            self.LeftForeArm_grandparent_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.LeftForeArm_grandparent_Constraint_Reverse\" % (self.infoNode)))\n            self.RightForeArm_grandparent_Constraint = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightForeArm_grandparent_Constraint\" % (self.infoNode)))\n            self.RightForeArm_grandparent_Constraint_Reverse = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.RightForeArm_grandparent_Constraint_Reverse\" % (self.infoNode)))\n            self.exportList = attrToPy(\"%s.exportList\" % (self.infoNode))\n            \n            if attrToPy(\"%s.origAnim\" % (self.infoNode)):\n                if mayac.objExists(DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.origAnim\" % (self.infoNode)))):\n                    self.origAnim = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.origAnim\" % (self.infoNode)))\n                    self.origAnimation_Layer = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.origAnimation_Layer\" % (self.infoNode)))\n                else:\n                    self.origAnim = attrToPy(\"%s.origAnim\" % (self.infoNode))\n                    self.origAnimation_Layer = attrToPy(\"%s.origAnimation_Layer\" % (self.infoNode))\n            self.Mesh_Layer = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Mesh_Layer\" % (self.infoNode)))\n            #self.Control_Layer = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Control_Layer\" % (self.infoNode)))\n            self.Bind_Joint_Layer = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Bind_Joint_Layer\" % (self.infoNode)))\n            self.fingerFlip = attrToPy(\"%s.fingerFlip\" % (self.infoNode))\n            \n            \n            \n            \n            \n        \n        \n           \n        self.bodyParts = []\n        for bodyPart in (self.Root, self.Hips, self.Spine, self.Spine1, self.Spine2, self.Spine3, self.Neck, self.Neck1, self.Head, self.HeadTop_End, self.LeftShoulder, \n                              self.LeftArm, self.LeftForeArm, self.LeftHand, self.LeftHandThumb1, self.LeftHandThumb2, self.LeftHandThumb3, \n                              self.LeftHandThumb4, self.LeftHandIndex1, self.LeftHandIndex2, self.LeftHandIndex3, self.LeftHandIndex4,\n                              self.LeftHandMiddle1, self.LeftHandMiddle2, self.LeftHandMiddle3, self.LeftHandMiddle4, self.LeftHandRing1,\n                              self.LeftHandRing2, self.LeftHandRing3, self.LeftHandRing4, self.LeftHandPinky1, self.LeftHandPinky2, \n                              self.LeftHandPinky3, self.LeftHandPinky4, self.RightShoulder, self.RightArm, self.RightForeArm, \n                              self.RightHand, self.RightHandThumb1, self.RightHandThumb2, self.RightHandThumb3, \n                              self.RightHandThumb4, self.RightHandIndex1, self.RightHandIndex2, self.RightHandIndex3, self.RightHandIndex4,\n                              self.RightHandMiddle1, self.RightHandMiddle2, self.RightHandMiddle3, self.RightHandMiddle4, self.RightHandRing1,\n                              self.RightHandRing2, self.RightHandRing3, self.RightHandRing4, self.RightHandPinky1, self.RightHandPinky2, \n                              self.RightHandPinky3, self.RightHandPinky4, self.LeftUpLeg, self.LeftLeg, self.LeftFoot, self.LeftToeBase,\n                              self.LeftToe_End, self.RightUpLeg, self.RightLeg, self.RightFoot, self.RightToeBase, self.RightToe_End):\n            if bodyPart and bodyPart.Bind_Joint:\n                self.bodyParts.append(bodyPart)\n                \n        #Dynamics\n        if self.infoNode:\n            self.Dyn_CTRL = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Dyn_CTRL\" % (self.infoNode)))\n            self.numExtraJointChains = attrToPy(\"%s.numExtraJointChains\" % (self.infoNode))\n            self.ExtraJoints = []\n            extraJointInfoNodes = attrToPy(\"%s.ExtraJoints\" % (self.infoNode))\n            if extraJointInfoNodes:\n                for extraJointInfoNode in extraJointInfoNodes:\n                    extraJointInfoNode = DJB_addNameSpace(self.characterNameSpace, extraJointInfoNode)\n                    extraJointName = DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.nodeName\" % (extraJointInfoNode)))\n                    if not extraJointName:\n                        print self.nodeName\n                        extraJointName = attrToPy(\"%s.Bind_Joint\" % (extraJointInfoNode))[5:]\n                    nodesParent = None\n                    parentShouldBe = attrToPy(\"%s.parent\" % (extraJointInfoNode))\n                    if not parentShouldBe:\n                        parentShouldBe = mayac.listRelatives(DJB_addNameSpace(self.characterNameSpace, attrToPy(\"%s.Bind_Joint\" % (extraJointInfoNode))), parent = True)[0]\n                        parentShouldBe = DJB_findAfterSeperator(parentShouldBe, \":\")[5:]\n                    for bodyPart in self.bodyParts:\n                        if bodyPart.nodeName == parentShouldBe:\n                            nodesParent = bodyPart\n                    if not nodesParent:\n                        for bodyPart in self.ExtraJoints:\n                            if bodyPart.nodeName == parentShouldBe:\n                                nodesParent = bodyPart\n                    if not nodesParent:\n                        for bodyPart in self.ExtraJoints:\n                            parentShouldBeNamespaced = DJB_addNameSpace(self.characterNameSpace, parentShouldBe)\n                            if bodyPart.nodeName == parentShouldBeNamespaced:\n                                nodesParent = bodyPart\n                    extraJointInfoNode = DJB_findAfterSeperator(extraJointInfoNode, \":\")\n                    self.ExtraJoints.append(DJB_CharacterNode(extraJointName, parent = nodesParent, infoNode_ = extraJointInfoNode, nameSpace_ = self.characterNameSpace))\n            else:\n                self.ExtraJoints = None  \n        \n        \n        \n        mayac.select(clear = True)\n        \n\n    \n    def fixArmsAndLegs(self):\n        LAnklePosStart = mayac.xform(self.LeftFoot.Bind_Joint, query = True, worldSpace = True, absolute = True, translation = True)\n        RAnklePosStart = mayac.xform(self.RightFoot.Bind_Joint, query = True, worldSpace = True, absolute = True, translation = True)\n        \n        if self.rigType == \"World\":\n            value = -1\n            while not DJB_CheckAngle(self.LeftUpLeg.Bind_Joint, self.LeftLeg.Bind_Joint, self.LeftFoot.Bind_Joint, axis = \"x\", multiplier = -1):\n                mayac.rotate(value, 0, 0, self.LeftUpLeg.Bind_Joint, relative = True)\n                mayac.rotate(value*-1, 0, 0, self.LeftLeg.Bind_Joint, relative = True)\n                mayac.refresh()\n            mayac.rotate(-45, 0, 0, self.LeftUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(90, 0, 0, self.LeftLeg.Bind_Joint, relative = True)\n            mayac.joint(self.LeftUpLeg.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.rotate(45, 0, 0, self.LeftUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(-90, 0, 0, self.LeftLeg.Bind_Joint, relative = True)\n              \n            value = -1\n            while not DJB_CheckAngle(self.RightUpLeg.Bind_Joint, self.RightLeg.Bind_Joint, self.RightFoot.Bind_Joint, axis = \"x\", multiplier = -1):\n                mayac.rotate(value, 0, 0, self.RightUpLeg.Bind_Joint, relative = True)\n                mayac.rotate(value*-1, 0, 0, self.RightLeg.Bind_Joint, relative = True)\n                mayac.refresh()\n            mayac.rotate(-45, 0, 0, self.RightUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(90, 0, 0, self.RightLeg.Bind_Joint, relative = True)\n            mayac.joint( self.RightUpLeg.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.rotate(45, 0, 0, self.RightUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(-90, 0, 0, self.RightLeg.Bind_Joint, relative = True)\n            \n            value = -1\n            while not DJB_CheckAngle(self.LeftArm.Bind_Joint, self.LeftForeArm.Bind_Joint, self.LeftHand.Bind_Joint, axis = \"y\", multiplier = 1):\n                mayac.rotate(0, value, 0, self.LeftForeArm.Bind_Joint, relative = True)\n                mayac.refresh()\n            tempRotData = mayac.getAttr(\"%s.rotate\" %(self.LeftArm.Bind_Joint))\n            mayac.rotate(0, 0, 0, self.LeftArm.Bind_Joint, absolute = True)\n            mayac.rotate(0, -90, 0, self.LeftForeArm.Bind_Joint, relative = True)\n            mayac.joint( self.LeftArm.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.setAttr(\"%s.rotate\" %(self.LeftArm.Bind_Joint), tempRotData[0][0], tempRotData[0][1], tempRotData[0][2], type = \"double3\")\n            mayac.rotate(0, 90, 0, self.LeftForeArm.Bind_Joint, relative = True)\n                \n            value = 1\n            while not DJB_CheckAngle(self.RightArm.Bind_Joint, self.RightForeArm.Bind_Joint, self.RightHand.Bind_Joint, axis = \"y\", multiplier = -1):\n                mayac.rotate(0, value, 0, self.RightForeArm.Bind_Joint, relative = True)\n                mayac.refresh()\n            tempRotData = mayac.getAttr(\"%s.rotate\" %(self.RightArm.Bind_Joint))\n            mayac.rotate(0, 0, 0, self.RightArm.Bind_Joint, absolute = True)\n            mayac.rotate(0, 90, 0, self.RightForeArm.Bind_Joint, relative = True)\n            mayac.joint( self.RightArm.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.setAttr(\"%s.rotate\" %(self.RightArm.Bind_Joint), tempRotData[0][0], tempRotData[0][1], tempRotData[0][2], type = \"double3\")\n            mayac.rotate(0, -90, 0, self.RightForeArm.Bind_Joint, relative = True)\n        \n        elif self.rigType ==\"AutoRig\":\n            value = 1\n            while not DJB_CheckAngle(self.LeftUpLeg.Bind_Joint, self.LeftLeg.Bind_Joint, self.LeftFoot.Bind_Joint, axis = \"x\", multiplier = 1):\n                mayac.rotate(value, 0, 0, self.LeftUpLeg.Bind_Joint, relative = True)\n                mayac.rotate(value*-1, 0, 0, self.LeftLeg.Bind_Joint, relative = True)\n                mayac.refresh()\n            mayac.rotate(45, 0, 0, self.LeftUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(-90, 0, 0, self.LeftLeg.Bind_Joint, relative = True)\n            mayac.joint(self.LeftUpLeg.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.rotate(-45, 0, 0, self.LeftUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(90, 0, 0, self.LeftLeg.Bind_Joint, relative = True)\n              \n            value = 1\n            while not DJB_CheckAngle(self.RightUpLeg.Bind_Joint, self.RightLeg.Bind_Joint, self.RightFoot.Bind_Joint, axis = \"x\", multiplier = 1):\n                mayac.rotate(value, 0, 0, self.RightUpLeg.Bind_Joint, relative = True)\n                mayac.rotate(value*-1, 0, 0, self.RightLeg.Bind_Joint, relative = True)\n                mayac.refresh()\n            mayac.rotate(45, 0, 0, self.RightUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(-90, 0, 0, self.RightLeg.Bind_Joint, relative = True)\n            mayac.joint( self.RightUpLeg.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.rotate(-45, 0, 0, self.RightUpLeg.Bind_Joint, relative = True)\n            mayac.rotate(90, 0, 0, self.RightLeg.Bind_Joint, relative = True)\n            \n            value = 1\n            while not DJB_CheckAngle(self.LeftArm.Bind_Joint, self.LeftForeArm.Bind_Joint, self.LeftHand.Bind_Joint, axis = \"z\", multiplier = -1):\n                mayac.rotate(0, 0, value, self.LeftForeArm.Bind_Joint, relative = True)\n                mayac.refresh()\n            tempRotData = mayac.getAttr(\"%s.rotate\" %(self.LeftArm.Bind_Joint))\n            mayac.rotate(0, 0, 0, self.LeftArm.Bind_Joint, absolute = True)\n            mayac.rotate(0, 0, 90, self.LeftForeArm.Bind_Joint, relative = True)\n            mayac.joint( self.LeftArm.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.setAttr(\"%s.rotate\" %(self.LeftArm.Bind_Joint), tempRotData[0][0], tempRotData[0][1], tempRotData[0][2], type = \"double3\")\n            mayac.rotate(0, 0, -90, self.LeftForeArm.Bind_Joint, relative = True)\n                \n            value = -1\n            while not DJB_CheckAngle(self.RightArm.Bind_Joint, self.RightForeArm.Bind_Joint, self.RightHand.Bind_Joint, axis = \"z\", multiplier = 1):\n                mayac.rotate(0, 0, value, self.RightForeArm.Bind_Joint, relative = True)\n                mayac.refresh()\n            tempRotData = mayac.getAttr(\"%s.rotate\" %(self.RightArm.Bind_Joint))\n            mayac.rotate(0, 0, 0, self.RightArm.Bind_Joint, absolute = True)\n            mayac.rotate(0, 0, -90, self.RightForeArm.Bind_Joint, relative = True)\n            mayac.joint( self.RightArm.Bind_Joint, edit = True, setPreferredAngles=True, children=True)\n            mayac.setAttr(\"%s.rotate\" %(self.RightArm.Bind_Joint), tempRotData[0][0], tempRotData[0][1], tempRotData[0][2], type = \"double3\")\n            mayac.rotate(0, 0, 90, self.RightForeArm.Bind_Joint, relative = True)\n        \n        LAnklePosEnd = mayac.xform(self.LeftFoot.Bind_Joint, query = True, worldSpace = True, absolute = True, translation = True)\n        RAnklePosEnd = mayac.xform(self.RightFoot.Bind_Joint, query = True, worldSpace = True, absolute = True, translation = True)\n        AvgDiff = (LAnklePosStart[1]-LAnklePosEnd[1] + RAnklePosStart[1] - RAnklePosEnd[1]) / 2\n        \n        if self.hulaOption:\n            mayac.move(0,AvgDiff,0, self.Root.Bind_Joint, relative = True)\n        else:\n            mayac.move(0,AvgDiff,0, self.Hips.Bind_Joint, relative = True)\n        \n        \n        \n    def makeAnimDataJoints(self):\n        for bodyPart in self.bodyParts:\n            bodyPart.duplicateJoint(\"AnimData\")\n        mayac.select(clear = True)\n        \n        #IK dummy joints\n        if self.Root.Bind_Joint:\n            self.Root.duplicateJoint(\"IK_Dummy\")\n        self.Hips.duplicateJoint(\"IK_Dummy\")\n        self.Spine.duplicateJoint(\"IK_Dummy\")\n        self.Spine1.duplicateJoint(\"IK_Dummy\")\n        self.Spine2.duplicateJoint(\"IK_Dummy\")\n        if self.Spine3 and self.Spine3.Bind_Joint:\n            self.Spine3.duplicateJoint(\"IK_Dummy\")\n        self.LeftShoulder.duplicateJoint(\"IK_Dummy\")\n        self.RightShoulder.duplicateJoint(\"IK_Dummy\")\n            \n    def makeControls(self, estimateSize = True):\n    \n        if len(self.mesh):\n            bbox = self.BoundingBox\n            \n            self.proportions[\"highPoint\"] = bbox[4]\n            self.proportions[\"lowPoint\"] = bbox[1]\n            self.proportions[\"height\"] = bbox[4]-bbox[1]\n            self.proportions[\"front\"] = bbox[5]\n            self.proportions[\"back\"] = bbox[2]\n            self.proportions[\"depth\"] = bbox[5]-bbox[2]\n            self.proportions[\"depthMidpoint\"] = ((bbox[5]-bbox[2])/2) + bbox[2]\n            self.proportions[\"left\"] = bbox[0]\n            self.proportions[\"right\"] = bbox[3]\n            self.proportions[\"width\"] = bbox[3]-bbox[0]\n            self.proportions[\"widthMidpoint\"] = ((bbox[3]-bbox[0])/2) + bbox[0]\n            \n        #global   \n        temp = mayac.circle(\n                        radius = (self.proportions[\"width\"]+self.proportions[\"depth\"])*.35,\n                        constructionHistory = False,\n                        name = \"global_CTRL\")\n        self.global_CTRL = temp[0]\n        mayac.move(self.proportions[\"widthMidpoint\"], self.proportions[\"lowPoint\"], self.proportions[\"depthMidpoint\"], absolute = True, worldSpace = True)\n        mayac.rotate(90,0,0, self.global_CTRL)\n        DJB_cleanGEO(self.global_CTRL)\n        DJB_ChangeDisplayColor(self.global_CTRL)\n        \n        \n        \n        if self.rigType == \"AutoRig\":  \n            #root\n            if self.Root.Bind_Joint:\n                self.Root.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8), \n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize)\n            \n                #hips\n                self.Hips.createControl(type = \"normal\", \n                                        style = \"hula\", \n                                        scale = (self.proportions[\"depth\"]*0.75, self.proportions[\"depth\"]*0.75, self.proportions[\"depth\"]*0.75),\n                                        offset = (0,-.01*self.proportions[\"height\"],0), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n            else:\n                #hips\n                self.Hips.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8), \n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize)\n            #spine\n            self.Spine.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7),\n                                    offset = (0,0,self.proportions[\"depth\"]*0.1), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n            \n            #spine1\n            if self.Spine2.Bind_Joint:\n                self.Spine1.createControl(type = \"normal\", \n                                        style = \"circle\", \n                                        scale = (self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6),\n                                        offset = (0,0,self.proportions[\"depth\"]*0.15), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n                #spine2\n                if self.Spine3.Bind_Joint:\n                    self.Spine2.createControl(type = \"normal\", \n                                        style = \"circle\", \n                                        scale = (self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6),\n                                        offset = (0,0,self.proportions[\"depth\"]*0.15), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n                    self.Spine3.createControl(type = \"normal\", \n                                        style = \"box\", \n                                        scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, (self.proportions[\"depth\"])*0.8), \n                                        offset = (0,self.proportions[\"depth\"]*.2,self.proportions[\"depth\"]*0.1), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n                else:\n                    self.Spine2.createControl(type = \"normal\", \n                                        style = \"box\", \n                                        scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, (self.proportions[\"depth\"])*0.8), \n                                        offset = (0,self.proportions[\"depth\"]*.2,self.proportions[\"depth\"]*0.1), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n            else:\n                self.Spine1.createControl(type = \"normal\", \n                                        style = \"box\", \n                                        scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, (self.proportions[\"depth\"])*0.8), \n                                        offset = (0,self.proportions[\"depth\"]*.2,self.proportions[\"depth\"]*0.1), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n                                    \n            #neck\n            self.Neck.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*-0.18, self.proportions[\"depth\"]*0.18, self.proportions[\"depth\"]*0.18),\n                                    offset = (self.proportions[\"height\"]*0.033, 0, self.proportions[\"height\"]*-0.04),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n            if self.Neck1.Bind_Joint:\n                self.Neck1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*-0.18, self.proportions[\"depth\"]*0.18, self.proportions[\"depth\"]*0.18),\n                                    offset = (self.proportions[\"height\"]*0.033, 0, self.proportions[\"height\"]*-0.04),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n                                    \n            #head\n            self.Head.createControl(type = \"normal\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"height\"]*0.13, (self.proportions[\"depth\"])*0.5), \n                                    offset = (0,self.proportions[\"height\"]*.08,self.proportions[\"depth\"]*0.1), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n                              \n            #LeftShoulder\n            self.LeftShoulder.createControl(type = \"normal\", \n                                    style = \"circleWrapped\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.15, self.proportions[\"depth\"]*0.15), \n                                    offset = (0,self.proportions[\"depth\"]*0.3,self.proportions[\"height\"]*-0.04),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n            #RightShoulder\n            self.RightShoulder.createControl(type = \"normal\", \n                                    style = \"circleWrapped\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.15, self.proportions[\"depth\"]*0.15), \n                                    offset = (0,self.proportions[\"depth\"]*0.3,self.proportions[\"height\"]*-0.04),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            #LeftArm\n            self.LeftArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            #RightArm\n            self.RightArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            #LeftForeArm\n            self.LeftForeArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            self.LeftForeArm.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            \n            #RightForeArm\n            self.RightForeArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightForeArm.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, -90, 0),\n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            \n            #LeftHand\n            self.LeftHand.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            self.LeftHand.createControl(type = \"IK\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*0.2),\n                                    offset = (0, self.proportions[\"depth\"]*0.3, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            \n            #RightHand\n            self.RightHand.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightHand.createControl(type = \"IK\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*0.2),\n                                    offset = (0, self.proportions[\"depth\"]*0.3, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                                    \n                                    \n            #LeftUpLeg\n            self.LeftUpLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n            #LeftLeg\n            self.LeftLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.09, self.proportions[\"depth\"]*0.09, self.proportions[\"depth\"]*0.09),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n            self.LeftLeg.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            \n            #LeftFoot\n            self.LeftFoot.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.08, self.proportions[\"depth\"]*0.08, self.proportions[\"depth\"]*0.08),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            self.LeftFoot.createControl(type = \"IK\", \n                                    style = \"footBox\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*-0.4),\n                                    offset = (0, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    rotate = (90, 0, 0),  \n                                    partialConstraint = 1,\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            mayac.move(self.proportions[\"lowPoint\"], \"%s.scalePivot\" % (self.LeftFoot.IK_CTRL),  \"%s.rotatePivot\" % (self.LeftFoot.IK_CTRL),  y = True)\n    \n            #LeftToeBase\n            self.LeftToeBase.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.07, self.proportions[\"depth\"]*0.07, self.proportions[\"depth\"]*0.07),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n                                    \n            #RightUpLeg\n            self.RightUpLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.1, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n                                    \n            #RightLeg\n            self.RightLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.09, self.proportions[\"depth\"]*0.09, self.proportions[\"depth\"]*0.09),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightLeg.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                                    \n            #RightFoot\n            self.RightFoot.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.08, self.proportions[\"depth\"]*0.08, self.proportions[\"depth\"]*0.08),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightFoot.createControl(type = \"IK\", \n                                    style = \"footBox\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*-0.4),\n                                    offset = (0, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    rotate = (90, 0, 0),\n                                    partialConstraint = 1,  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            mayac.move(self.proportions[\"lowPoint\"], \"%s.scalePivot\" % (self.RightFoot.IK_CTRL),  \"%s.rotatePivot\" % (self.RightFoot.IK_CTRL),  y = True)\n    \n            #RightToeBase\n            self.RightToeBase.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.07, self.proportions[\"depth\"]*0.07, self.proportions[\"depth\"]*0.07),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            #fingers\n            if self.LeftHandThumb1.Bind_Joint:\n                self.LeftHandThumb1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandThumb2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandThumb3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n            if self.LeftHandIndex1.Bind_Joint:\n                self.LeftHandIndex1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandIndex2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandIndex3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n            if self.LeftHandMiddle1.Bind_Joint:\n                self.LeftHandMiddle1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandMiddle2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandMiddle3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n            if self.LeftHandRing1.Bind_Joint:\n                self.LeftHandRing1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandRing2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandRing3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n            if self.LeftHandPinky1.Bind_Joint:\n                self.LeftHandPinky1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandPinky2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                self.LeftHandPinky3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"blue2\")\n                \n            if self.RightHandThumb1.Bind_Joint:\n                self.RightHandThumb1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandThumb2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandThumb3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n            if self.RightHandIndex1.Bind_Joint:\n                self.RightHandIndex1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandIndex2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandIndex3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n            if self.RightHandMiddle1.Bind_Joint:\n                self.RightHandMiddle1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandMiddle2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandMiddle3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n            if self.RightHandRing1.Bind_Joint:\n                self.RightHandRing1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandRing2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandRing3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n            if self.RightHandPinky1.Bind_Joint:\n                self.RightHandPinky1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandPinky2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                self.RightHandPinky3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    flipFingers = self.fingerFlip,\n                                    color_ = \"red2\")\n                \n            #Options\n            self.LeftFoot.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (0, 0, self.proportions[\"depth\"]*-0.4),  \n                                    estimateSize = estimateSize,\n                                    partialConstraint = 2,\n                                    color_ = \"black\")\n            \n            self.RightFoot.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (0, 0, self.proportions[\"depth\"]*-0.4),  \n                                    estimateSize = estimateSize,\n                                    partialConstraint = 2,\n                                    color_ = \"black\")\n            \n            self.LeftHand.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (0, self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*-0.3),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"black\")\n            \n            self.RightHand.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (0, self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*-0.3),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"black\")\n        \n        \n        elif self.rigType == \"World\":     \n            #root\n            if self.Root.Bind_Joint:\n                self.Root.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8), \n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize)\n            \n                #hips\n                self.Hips.createControl(type = \"normal\", \n                                        style = \"hula\", \n                                        scale = (self.proportions[\"depth\"]*0.75, self.proportions[\"depth\"]*0.75, self.proportions[\"depth\"]*0.75),\n                                        offset = (0,-.01*self.proportions[\"height\"],0), \n                                        estimateSize = estimateSize,\n                                        color_ = \"yellow\")\n            else:\n                #hips\n                self.Hips.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8, self.proportions[\"depth\"]*0.8), \n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize)\n            #spine\n            self.Spine.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7),\n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n            \n            #spine1\n            self.Spine1.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6),\n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n            #spine2\n            if self.Spine3.Bind_Joint:\n                self.Spine2.createControl(type = \"normal\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6, self.proportions[\"depth\"]*0.6),\n                                    offset = (0,0,0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n                self.Spine3.createControl(type = \"normal\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, (self.proportions[\"depth\"])*0.8), \n                                    offset = (0,self.proportions[\"depth\"]*.2,0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n            else:\n                self.Spine2.createControl(type = \"normal\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*0.7, (self.proportions[\"depth\"])*0.8), \n                                    offset = (0,self.proportions[\"depth\"]*.2,0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n                                    \n            #neck\n            self.Neck.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*-0.18, self.proportions[\"depth\"]*0.18, self.proportions[\"depth\"]*0.18),\n                                    offset = (self.proportions[\"height\"]*0.033, 0, self.proportions[\"height\"]*-0.04),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n            if self.Neck1.Bind_Joint:\n                self.Neck1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*-0.18, self.proportions[\"depth\"]*0.18, self.proportions[\"depth\"]*0.18),\n                                    offset = (self.proportions[\"height\"]*0.033, 0, self.proportions[\"height\"]*-0.04),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n                                    \n            #head\n            self.Head.createControl(type = \"normal\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"height\"]*0.13, (self.proportions[\"depth\"])*0.5), \n                                    offset = (0,self.proportions[\"height\"]*.06,self.proportions[\"depth\"]*0.1), \n                                    estimateSize = estimateSize,\n                                    color_ = \"yellow\")\n                               \n            #LeftShoulder\n            self.LeftShoulder.createControl(type = \"normal\", \n                                    style = \"circleWrapped\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.15, self.proportions[\"depth\"]*0.15), \n                                    offset = (self.proportions[\"height\"]*0.04, self.proportions[\"depth\"]*0.3, 0), \n                                    rotate = (0, -90, 90), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n            #RightShoulder\n            self.RightShoulder.createControl(type = \"normal\", \n                                    style = \"circleWrapped\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.15, self.proportions[\"depth\"]*0.15), \n                                    offset = (self.proportions[\"height\"]*-0.04, self.proportions[\"depth\"]*0.3, 0), \n                                    rotate = (0, -90, 90),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            #LeftArm\n            self.LeftArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0), \n                                    rigType = \"World\",\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            #RightArm\n            self.RightArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0), \n                                    rigType = \"World\",\n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            #LeftForeArm\n            self.LeftForeArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0),  \n                                    rigType = \"World\",\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            self.LeftForeArm.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            \n            #RightForeArm\n            self.RightForeArm.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25, self.proportions[\"depth\"]*0.25),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0), \n                                    rigType = \"World\", \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightForeArm.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 180, 0),\n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            \n            #LeftHand\n            self.LeftHand.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0), \n                                    rigType = \"World\",\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            self.LeftHand.createControl(type = \"IK\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*0.2),\n                                    offset = (self.proportions[\"depth\"]*0.3, 0, 0),  \n                                    rotate = (0, -90, -90),\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            \n            #RightHand\n            self.RightHand.createControl(type = \"FK\", \n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.2),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0),\n                                    rigType = \"World\",\n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightHand.createControl(type = \"IK\", \n                                    style = \"box\", \n                                    scale = (self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*0.2),\n                                    offset = (self.proportions[\"depth\"]*-0.3, 0, 0), \n                                    rotate = (0, 90, 90), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                                    \n                                    \n            #LeftUpLeg\n            self.LeftUpLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n            #LeftLeg\n            self.LeftLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.09, self.proportions[\"depth\"]*0.09, self.proportions[\"depth\"]*0.09),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0),\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n            self.LeftLeg.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            \n            #LeftFoot\n            self.LeftFoot.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.08, self.proportions[\"depth\"]*0.08, self.proportions[\"depth\"]*0.08),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n            \n            self.LeftFoot.createControl(type = \"IK\", \n                                    style = \"footBox\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*-0.4),\n                                    offset = (0, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    rotate = (90, 0, 0),  \n                                    partialConstraint = 1,\n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            mayac.move(self.proportions[\"lowPoint\"], \"%s.scalePivot\" % (self.LeftFoot.IK_CTRL),  \"%s.rotatePivot\" % (self.LeftFoot.IK_CTRL),  y = True)\n    \n            #LeftToeBase\n            self.LeftToeBase.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*0.07, self.proportions[\"depth\"]*0.07, self.proportions[\"depth\"]*0.07),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0),   \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue1\")\n                                    \n                                    \n            #RightUpLeg\n            self.RightUpLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.1, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n                                    \n            #RightLeg\n            self.RightLeg.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.09, self.proportions[\"depth\"]*0.09, self.proportions[\"depth\"]*0.09),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightLeg.createControl(type = \"IK\", \n                                    style = \"PoleVector\", \n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.2, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                                    \n            #RightFoot\n            self.RightFoot.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.08, self.proportions[\"depth\"]*0.08, self.proportions[\"depth\"]*0.08),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 180, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            self.RightFoot.createControl(type = \"IK\", \n                                    style = \"footBox\", \n                                    scale = (self.proportions[\"depth\"]*0.4, self.proportions[\"depth\"]*0.7, self.proportions[\"depth\"]*-0.4),\n                                    offset = (0, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    rotate = (90, 0, 0),\n                                    partialConstraint = 1,  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            mayac.move(self.proportions[\"lowPoint\"], \"%s.scalePivot\" % (self.RightFoot.IK_CTRL),  \"%s.rotatePivot\" % (self.RightFoot.IK_CTRL),  y = True)\n    \n            #RightToeBase\n            self.RightToeBase.createControl(type = \"FK\", \n                                    style = \"pin\", \n                                    scale = (self.proportions[\"depth\"]*-0.07, self.proportions[\"depth\"]*0.07, self.proportions[\"depth\"]*0.07),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 180, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red1\")\n            \n            #fingers\n            if self.LeftHandThumb1.Bind_Joint:\n                self.LeftHandThumb1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandThumb2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandThumb3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),\n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            if self.LeftHandIndex1.Bind_Joint:\n                self.LeftHandIndex1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandIndex2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandIndex3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            if self.LeftHandMiddle1.Bind_Joint:\n                self.LeftHandMiddle1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandMiddle2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandMiddle3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            if self.LeftHandRing1.Bind_Joint:\n                self.LeftHandRing1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandRing2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandRing3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n            if self.LeftHandPinky1.Bind_Joint:\n                self.LeftHandPinky1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandPinky2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                self.LeftHandPinky3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"blue2\")\n                \n            if self.RightHandThumb1.Bind_Joint:\n                self.RightHandThumb1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandThumb2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandThumb3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            if self.RightHandIndex1.Bind_Joint:\n                self.RightHandIndex1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandIndex2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandIndex3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            if self.RightHandMiddle1.Bind_Joint:\n                self.RightHandMiddle1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandMiddle2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0), \n                                    rotate = (0, 90, 0),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandMiddle3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            if self.RightHandRing1.Bind_Joint:\n                self.RightHandRing1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandRing2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandRing3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n            if self.RightHandPinky1.Bind_Joint:\n                self.RightHandPinky1.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02, self.proportions[\"depth\"]*0.02),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandPinky2.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016, self.proportions[\"depth\"]*0.016),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n                self.RightHandPinky3.createControl(type = \"normal\", \n                                    style = \"pin1\", \n                                    scale = (self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012, self.proportions[\"depth\"]*0.012),\n                                    offset = (0, 0, 0),  \n                                    rotate = (0, 90, 0), \n                                    estimateSize = estimateSize,\n                                    color_ = \"red2\")\n        \n            #Options\n            self.LeftFoot.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (0, 0, self.proportions[\"depth\"]*-0.4),  \n                                    estimateSize = estimateSize,\n                                    partialConstraint = 2,\n                                    color_ = \"black\")\n            \n            self.RightFoot.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (0, 0, self.proportions[\"depth\"]*-0.4),  \n                                    estimateSize = estimateSize,\n                                    partialConstraint = 2,\n                                    color_ = \"black\")\n            \n            self.LeftHand.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (self.proportions[\"depth\"]*0.3, self.proportions[\"depth\"]*0.3, 0),  \n                                    rotate = (-90, 0, -90),  \n                                    estimateSize = estimateSize,\n                                    color_ = \"black\")\n            \n            self.RightHand.createControl(type = \"options\", \n                                    style = \"options\", \n                                    scale = (self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*0.12, self.proportions[\"depth\"]*-0.12),\n                                    offset = (self.proportions[\"depth\"]*-0.3, self.proportions[\"depth\"]*0.3, 0),  \n                                    rotate = (-90, 0, -90), \n                                    estimateSize = estimateSize,\n                                    color_ = \"black\")\n                                \n                \n                \n    def hookUpControls(self):\n        #Groupings\n        self.Character_GRP = mayac.group(em = True, name = \"Character\")\n        DJB_movePivotToObject(self.Character_GRP, self.global_CTRL)\n        self.CTRL_GRP = mayac.group(em = True, name = \"CTRL_GRP\")\n        DJB_movePivotToObject(self.CTRL_GRP, self.global_CTRL)\n        mayac.parent(self.global_CTRL, self.CTRL_GRP)\n        mayac.parent(self.CTRL_GRP, self.Character_GRP)\n        self.Joint_GRP = mayac.group(em = True, name = \"Joint_GRP\")\n        DJB_movePivotToObject(self.Joint_GRP, self.global_CTRL)\n        mayac.parent(self.Joint_GRP, self.Character_GRP)\n        self.AnimData_Joint_GRP = mayac.group(em = True, name = \"AnimData_Joint_GRP\")\n        DJB_movePivotToObject(self.AnimData_Joint_GRP, self.global_CTRL)\n        mayac.parent(self.AnimData_Joint_GRP, self.Joint_GRP)\n        if self.hulaOption:\n            mayac.parent(self.Root.AnimData_Joint, self.AnimData_Joint_GRP)\n        else:\n            mayac.parent(self.Hips.AnimData_Joint, self.AnimData_Joint_GRP)\n        self.Bind_Joint_GRP = mayac.group(em = True, name = \"Bind_Joint_GRP\")\n        DJB_movePivotToObject(self.Bind_Joint_GRP, self.global_CTRL)\n        mayac.parent(self.Bind_Joint_GRP, self.Joint_GRP)\n        if self.hulaOption:\n            mayac.parent(self.Root.Bind_Joint, self.Bind_Joint_GRP)\n        else:\n            mayac.parent(self.Hips.Bind_Joint, self.Bind_Joint_GRP)\n        self.Mesh_GRP = mayac.group(em = True, name = \"Mesh_GRP\")\n        DJB_movePivotToObject(self.Mesh_GRP, self.global_CTRL)\n        tempTransList =[]\n        for geo in self.mesh:\n            transform = mayac.listRelatives(geo, parent = True)\n            if mayac.objectType(transform) == \"transform\" and transform not in tempTransList:\n                mayac.parent(transform, self.Mesh_GRP)\n                DJB_LockNHide(transform[0])\n                tempTransList.append(transform)\n        mayac.parent(self.Mesh_GRP, self.Character_GRP)\n\n        #get rid of any limitations\n        for bodyPart in self.bodyParts:\n            if bodyPart.Bind_Joint:\n                mayac.transformLimits(bodyPart.Bind_Joint, rm = True)\n        \n        #create FK and IK Joints\n        self.LeftArm.duplicateJoint(\"FK\", parent_ = \"Bind_Joint\")\n        self.LeftForeArm.duplicateJoint(\"FK\")\n        self.LeftHand.duplicateJoint(\"FK\")\n        self.RightArm.duplicateJoint(\"FK\", parent_ = \"Bind_Joint\")\n        self.RightForeArm.duplicateJoint(\"FK\")\n        self.RightHand.duplicateJoint(\"FK\")\n        self.LeftUpLeg.duplicateJoint(\"FK\", parent_ = \"Bind_Joint\")\n        self.LeftLeg.duplicateJoint(\"FK\")\n        self.LeftFoot.duplicateJoint(\"FK\")\n        self.LeftToeBase.duplicateJoint(\"FK\")\n        self.LeftToe_End.duplicateJoint(\"FK\")\n        self.RightUpLeg.duplicateJoint(\"FK\", parent_ = \"Bind_Joint\")\n        self.RightLeg.duplicateJoint(\"FK\")\n        self.RightFoot.duplicateJoint(\"FK\")\n        self.RightToeBase.duplicateJoint(\"FK\")\n        self.RightToe_End.duplicateJoint(\"FK\")\n        \n        self.LeftArm.duplicateJoint(\"IK\", parent_ = \"Bind_Joint\")\n        self.LeftForeArm.duplicateJoint(\"IK\")\n        self.LeftHand.duplicateJoint(\"IK\")\n        self.RightArm.duplicateJoint(\"IK\", parent_ = \"Bind_Joint\")\n        self.RightForeArm.duplicateJoint(\"IK\")\n        self.RightHand.duplicateJoint(\"IK\")\n        self.LeftUpLeg.duplicateJoint(\"IK\", parent_ = \"Bind_Joint\")\n        self.LeftLeg.duplicateJoint(\"IK\")\n        self.LeftFoot.duplicateJoint(\"IK\")\n        self.LeftToeBase.duplicateJoint(\"IK\")\n        self.LeftToe_End.duplicateJoint(\"IK\")\n        self.RightUpLeg.duplicateJoint(\"IK\", parent_ = \"Bind_Joint\")\n        self.RightLeg.duplicateJoint(\"IK\")\n        self.RightFoot.duplicateJoint(\"IK\")\n        self.RightToeBase.duplicateJoint(\"IK\")\n        self.RightToe_End.duplicateJoint(\"IK\")\n        \n        #finalize CTRLs\n        for bodyPart in self.bodyParts:\n            bodyPart.finalizeCTRLs()\n            \n        #Left Arm IK BakingLOC Positions\n        selfPOS = mayac.xform(self.LeftForeArm.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        parentPOS = mayac.xform(self.LeftForeArm.parent.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        tempDistance = math.sqrt((selfPOS[0]-parentPOS[0])*(selfPOS[0]-parentPOS[0]) + (selfPOS[1]-parentPOS[1])*(selfPOS[1]-parentPOS[1]) + (selfPOS[2]-parentPOS[2])*(selfPOS[2]-parentPOS[2]))\n        if self.rigType == \"AutoRig\":\n            mayac.setAttr(\"%s.translateX\" % (self.LeftForeArm.IK_BakingLOC), tempDistance / 2)\n        elif self.rigType == \"World\":  \n            mayac.setAttr(\"%s.translateZ\" % (self.LeftForeArm.IK_BakingLOC), tempDistance / -2)\n            \n        #Right Arm IK BakingLOC Positions\n        selfPOS = mayac.xform(self.RightForeArm.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        parentPOS = mayac.xform(self.RightForeArm.parent.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        tempDistance = math.sqrt((selfPOS[0]-parentPOS[0])*(selfPOS[0]-parentPOS[0]) + (selfPOS[1]-parentPOS[1])*(selfPOS[1]-parentPOS[1]) + (selfPOS[2]-parentPOS[2])*(selfPOS[2]-parentPOS[2]))\n        if self.rigType == \"AutoRig\":\n            mayac.setAttr(\"%s.translateX\" % (self.RightForeArm.IK_BakingLOC), tempDistance / -2)\n        elif self.rigType == \"World\":  \n            mayac.setAttr(\"%s.translateZ\" % (self.RightForeArm.IK_BakingLOC), tempDistance / -2)\n            \n        #more groupings\n        self.LeftHand_CTRLs_GRP = mayac.group(em = True, name = \"LeftHand_CTRLs_GRP\")\n        self.RightHand_CTRLs_GRP = mayac.group(em = True, name = \"RightHand_CTRLs_GRP\")\n        DJB_movePivotToObject(self.LeftHand_CTRLs_GRP, self.LeftHand.Bind_Joint)\n        DJB_movePivotToObject(self.RightHand_CTRLs_GRP, self.RightHand.Bind_Joint)\n        #set rotation orders\n        mayac.setAttr(\"%s.rotateOrder\" % (self.LeftHand_CTRLs_GRP), self.LeftHand.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.RightHand_CTRLs_GRP), self.RightHand.rotOrder)\n\n        mayac.parent(self.LeftHand_CTRLs_GRP, self.RightHand_CTRLs_GRP, self.global_CTRL)\n        if self.LeftHandIndex1.Bind_Joint:\n            mayac.parent(self.LeftHandIndex1.FK_CTRL_POS_GRP, self.LeftHand_CTRLs_GRP)\n        if self.LeftHandThumb1.Bind_Joint:\n            mayac.parent(self.LeftHandThumb1.FK_CTRL_POS_GRP, self.LeftHand_CTRLs_GRP)\n        if self.LeftHandMiddle1.Bind_Joint:\n            mayac.parent(self.LeftHandMiddle1.FK_CTRL_POS_GRP, self.LeftHand_CTRLs_GRP)\n        if self.LeftHandRing1.Bind_Joint:\n            mayac.parent(self.LeftHandRing1.FK_CTRL_POS_GRP, self.LeftHand_CTRLs_GRP)\n        if self.LeftHandPinky1.Bind_Joint:\n            mayac.parent(self.LeftHandPinky1.FK_CTRL_POS_GRP, self.LeftHand_CTRLs_GRP)\n        if self.RightHandIndex1.Bind_Joint:\n            mayac.parent(self.RightHandIndex1.FK_CTRL_POS_GRP, self.RightHand_CTRLs_GRP)    \n        if self.RightHandThumb1.Bind_Joint:\n            mayac.parent(self.RightHandThumb1.FK_CTRL_POS_GRP, self.RightHand_CTRLs_GRP)\n        if self.RightHandMiddle1.Bind_Joint:\n            mayac.parent(self.RightHandMiddle1.FK_CTRL_POS_GRP, self.RightHand_CTRLs_GRP)\n        if self.RightHandRing1.Bind_Joint:\n            mayac.parent(self.RightHandRing1.FK_CTRL_POS_GRP, self.RightHand_CTRLs_GRP)\n        if self.RightHandPinky1.Bind_Joint:\n            mayac.parent(self.RightHandPinky1.FK_CTRL_POS_GRP, self.RightHand_CTRLs_GRP)\n\n        mayac.parentConstraint(self.LeftHand.Bind_Joint, self.LeftHand_CTRLs_GRP, name = \"%s_Constraint\" %(self.LeftHand_CTRLs_GRP))\n        mayac.parentConstraint(self.RightHand.Bind_Joint, self.RightHand_CTRLs_GRP, name = \"%s_Constraint\" %(self.RightHand_CTRLs_GRP))\n        DJB_LockNHide(self.LeftHand_CTRLs_GRP)\n        DJB_LockNHide(self.RightHand_CTRLs_GRP)\n        \n        mayac.parent(self.LeftFoot.Options_CTRL, self.RightFoot.Options_CTRL, self.LeftHand.Options_CTRL, self.RightHand.Options_CTRL, self.global_CTRL)\n        if self.hulaOption:\n            mayac.parent(self.Root.FK_CTRL_POS_GRP, self.global_CTRL)\n        else:\n            mayac.parent(self.Hips.FK_CTRL_POS_GRP, self.global_CTRL)\n        mayac.parent(self.LeftForeArm.IK_CTRL_parent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.LeftHand.IK_CTRL_grandparent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.RightForeArm.IK_CTRL_parent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.RightHand.IK_CTRL_grandparent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.LeftLeg.IK_CTRL_parent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.LeftFoot.IK_CTRL_grandparent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.RightLeg.IK_CTRL_parent_POS_GRP, self.global_CTRL)\n        mayac.parent(self.RightFoot.IK_CTRL_grandparent_POS_GRP, self.global_CTRL)\n        \n        self.IK_Dummy_Joint_GRP = mayac.group(em = True, name = \"IK_Dummy_Joint_GRP\")\n        if self.hulaOption:\n            mayac.parent(self.Root.IK_Dummy_Joint, self.IK_Dummy_Joint_GRP)\n        else:\n            mayac.parent(self.Hips.IK_Dummy_Joint, self.IK_Dummy_Joint_GRP)\n        mayac.parent(self.IK_Dummy_Joint_GRP, self.global_CTRL)\n        \n        #IKFK follow body\n        #arms\n        temp = mayac.parentConstraint(self.LeftShoulder.IK_Dummy_Joint, self.LeftHand.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.LeftHand_grandparent_Constraint = temp[0]\n        mayac.parentConstraint(self.LeftShoulder.Bind_Joint, self.LeftHand.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.LeftHand_grandparent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftHand_grandparent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftHand.IK_CTRL), \"%s.inputX\" %(self.LeftHand_grandparent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftHand.IK_CTRL), \"%s.%sW1\" %(self.LeftHand_grandparent_Constraint, self.LeftShoulder.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftHand_grandparent_Constraint_Reverse), \"%s.%sW0\" %(self.LeftHand_grandparent_Constraint, self.LeftShoulder.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftHand_grandparent_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightShoulder.IK_Dummy_Joint, self.RightHand.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.RightHand_grandparent_Constraint = temp[0]\n        mayac.parentConstraint(self.RightShoulder.Bind_Joint, self.RightHand.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.RightHand_grandparent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightHand_grandparent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightHand.IK_CTRL), \"%s.inputX\" %(self.RightHand_grandparent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightHand.IK_CTRL), \"%s.%sW1\" %(self.RightHand_grandparent_Constraint, self.RightShoulder.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightHand_grandparent_Constraint_Reverse), \"%s.%sW0\" %(self.RightHand_grandparent_Constraint, self.RightShoulder.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.RightHand_grandparent_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.LeftShoulder.IK_Dummy_Joint, self.LeftForeArm.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.LeftForeArm_parent_Constraint = temp[0]\n        mayac.parentConstraint(self.LeftShoulder.Bind_Joint, self.LeftForeArm.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.LeftForeArm_parent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftForeArm_parent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftForeArm.IK_CTRL), \"%s.inputX\" %(self.LeftForeArm_parent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftForeArm.IK_CTRL), \"%s.%sW1\" %(self.LeftForeArm_parent_Constraint, self.LeftShoulder.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftForeArm_parent_Constraint_Reverse), \"%s.%sW0\" %(self.LeftForeArm_parent_Constraint, self.LeftShoulder.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftForeArm_parent_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightShoulder.IK_Dummy_Joint, self.RightForeArm.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.RightForeArm_parent_Constraint = temp[0]\n        mayac.parentConstraint(self.RightShoulder.Bind_Joint, self.RightForeArm.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.RightForeArm_parent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightForeArm_parent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightForeArm.IK_CTRL), \"%s.inputX\" %(self.RightForeArm_parent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightForeArm.IK_CTRL), \"%s.%sW1\" %(self.RightForeArm_parent_Constraint, self.RightShoulder.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightForeArm_parent_Constraint_Reverse), \"%s.%sW0\" %(self.RightForeArm_parent_Constraint, self.RightShoulder.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.RightForeArm_parent_Constraint), 2)\n        \n        #legs\n        temp = mayac.parentConstraint(self.Hips.IK_Dummy_Joint, self.LeftFoot.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.LeftFoot_grandparent_Constraint = temp[0]\n        mayac.parentConstraint(self.Hips.Bind_Joint, self.LeftFoot.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.LeftFoot_grandparent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftFoot_grandparent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftFoot.IK_CTRL), \"%s.inputX\" %(self.LeftFoot_grandparent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftFoot.IK_CTRL), \"%s.%sW1\" %(self.LeftFoot_grandparent_Constraint, self.Hips.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftFoot_grandparent_Constraint_Reverse), \"%s.%sW0\" %(self.LeftFoot_grandparent_Constraint, self.Hips.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftFoot_grandparent_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.Hips.IK_Dummy_Joint, self.RightFoot.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.RightFoot_grandparent_Constraint = temp[0]\n        mayac.parentConstraint(self.Hips.Bind_Joint, self.RightFoot.IK_CTRL_grandparent_POS_GRP, maintainOffset = True)\n        self.RightFoot_grandparent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightFoot_grandparent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightFoot.IK_CTRL), \"%s.inputX\" %(self.RightFoot_grandparent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightFoot.IK_CTRL), \"%s.%sW1\" %(self.RightFoot_grandparent_Constraint, self.Hips.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_grandparent_Constraint_Reverse), \"%s.%sW0\" %(self.RightFoot_grandparent_Constraint, self.Hips.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.RightFoot_grandparent_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.Hips.IK_Dummy_Joint, self.LeftLeg.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.LeftLeg_parent_Constraint = temp[0]\n        mayac.parentConstraint(self.Hips.Bind_Joint, self.LeftLeg.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.LeftLeg_parent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftLeg_parent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftLeg.IK_CTRL), \"%s.inputX\" %(self.LeftLeg_parent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.LeftLeg.IK_CTRL), \"%s.%sW1\" %(self.LeftLeg_parent_Constraint, self.Hips.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg_parent_Constraint_Reverse), \"%s.%sW0\" %(self.LeftLeg_parent_Constraint, self.Hips.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftLeg_parent_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.Hips.IK_Dummy_Joint, self.RightLeg.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.RightLeg_parent_Constraint = temp[0]\n        mayac.parentConstraint(self.Hips.Bind_Joint, self.RightLeg.IK_CTRL_parent_POS_GRP, maintainOffset = True)\n        self.RightLeg_parent_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightLeg_parent_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightLeg.IK_CTRL), \"%s.inputX\" %(self.RightLeg_parent_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowBody\" %(self.RightLeg.IK_CTRL), \"%s.%sW1\" %(self.RightLeg_parent_Constraint, self.Hips.Bind_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg_parent_Constraint_Reverse), \"%s.%sW0\" %(self.RightLeg_parent_Constraint, self.Hips.IK_Dummy_Joint))\n        mayac.setAttr(\"%s.interpType\" %(self.RightLeg_parent_Constraint), 2)\n        \n        \n        \n        #IK Legs and Arms to Global\n        temp = mayac.parentConstraint(self.LeftFoot.IK_CTRL_grandparent_POS_GRP, self.LeftFoot.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.LeftFoot.grandparent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.LeftFoot.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.LeftFoot.grandparent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftFoot_grandparent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftFoot.IK_CTRL), \"%s.inputX\" %(self.LeftFoot.grandparent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftFoot.IK_CTRL), \"%s.%sW1\" %(self.LeftFoot.grandparent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftFoot.grandparent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.LeftFoot.grandparent_Global_Constraint, self.LeftFoot.IK_CTRL_grandparent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftFoot.grandparent_Global_Constraint), 0)\n        \n        temp = mayac.parentConstraint(self.RightFoot.IK_CTRL_grandparent_POS_GRP, self.RightFoot.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.RightFoot.grandparent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.RightFoot.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.RightFoot.grandparent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightFoot_grandparent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightFoot.IK_CTRL), \"%s.inputX\" %(self.RightFoot.grandparent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightFoot.IK_CTRL), \"%s.%sW1\" %(self.RightFoot.grandparent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightFoot.grandparent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.RightFoot.grandparent_Global_Constraint, self.RightFoot.IK_CTRL_grandparent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.RightFoot.grandparent_Global_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.LeftHand.IK_CTRL_grandparent_POS_GRP, self.LeftHand.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.LeftHand.grandparent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.LeftHand.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.LeftHand.grandparent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftHand_grandparent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftHand.IK_CTRL), \"%s.inputX\" %(self.LeftHand.grandparent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftHand.IK_CTRL), \"%s.%sW1\" %(self.LeftHand.grandparent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftHand.grandparent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.LeftHand.grandparent_Global_Constraint, self.LeftHand.IK_CTRL_grandparent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftHand.grandparent_Global_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightHand.IK_CTRL_grandparent_POS_GRP, self.RightHand.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.RightHand.grandparent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.RightHand.IK_CTRL_grandparent_Global_POS_GRP, maintainOffset = True)\n        self.RightHand.grandparent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightHand_grandparent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightHand.IK_CTRL), \"%s.inputX\" %(self.RightHand.grandparent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightHand.IK_CTRL), \"%s.%sW1\" %(self.RightHand.grandparent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightHand.grandparent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.RightHand.grandparent_Global_Constraint, self.RightHand.IK_CTRL_grandparent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.RightHand.grandparent_Global_Constraint), 2)\n        \n\n        ''' self.IK_CTRL_inRig_CONST_GRP = None\n        self.follow_extremity_Constraint = None\n        self.follow_extremity_Constraint_Reverse = None'''\n        \n        #IK Elbows and Knees to Global\n        temp = mayac.parentConstraint(self.LeftLeg.IK_CTRL_parent_POS_GRP, self.LeftLeg.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.LeftLeg.parent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.LeftLeg.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.LeftLeg.parent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftLeg_parent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftLeg.IK_CTRL), \"%s.inputX\" %(self.LeftLeg.parent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftLeg.IK_CTRL), \"%s.%sW1\" %(self.LeftLeg.parent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg.parent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.LeftLeg.parent_Global_Constraint, self.LeftLeg.IK_CTRL_parent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftLeg.parent_Global_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightLeg.IK_CTRL_parent_POS_GRP, self.RightLeg.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.RightLeg.parent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.RightLeg.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.RightLeg.parent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightLeg_parent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightLeg.IK_CTRL), \"%s.inputX\" %(self.RightLeg.parent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightLeg.IK_CTRL), \"%s.%sW1\" %(self.RightLeg.parent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg.parent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.RightLeg.parent_Global_Constraint, self.RightLeg.IK_CTRL_parent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.RightLeg.parent_Global_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.LeftForeArm.IK_CTRL_parent_POS_GRP, self.LeftForeArm.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.LeftForeArm.parent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.LeftForeArm.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.LeftForeArm.parent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftForeArm_parent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftForeArm.IK_CTRL), \"%s.inputX\" %(self.LeftForeArm.parent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.LeftForeArm.IK_CTRL), \"%s.%sW1\" %(self.LeftForeArm.parent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftForeArm.parent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.LeftForeArm.parent_Global_Constraint, self.LeftForeArm.IK_CTRL_parent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftForeArm.parent_Global_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightForeArm.IK_CTRL_parent_POS_GRP, self.RightForeArm.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.RightForeArm.parent_Global_Constraint = temp[0]\n        mayac.parentConstraint(self.global_CTRL, self.RightForeArm.IK_CTRL_parent_Global_POS_GRP, maintainOffset = True)\n        self.RightForeArm.parent_Global_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightForeArm_parent_Global_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightForeArm.IK_CTRL), \"%s.inputX\" %(self.RightForeArm.parent_Global_Constraint_Reverse))\n        mayac.connectAttr(\"%s.ParentToGlobal\" %(self.RightForeArm.IK_CTRL), \"%s.%sW1\" %(self.RightForeArm.parent_Global_Constraint, self.global_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightForeArm.parent_Global_Constraint_Reverse), \"%s.%sW0\" %(self.RightForeArm.parent_Global_Constraint, self.RightForeArm.IK_CTRL_parent_POS_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.RightForeArm.parent_Global_Constraint), 2)\n        \n        \n        \n        #IK Elbows and Knees to Hands and feet     \n        temp = mayac.parentConstraint(self.LeftFoot.IK_CTRL, self.LeftLeg.Follow_Foot_GRP, maintainOffset = True)\n        self.LeftLeg.Follow_Foot_Constraint = temp[0]\n        temp = mayac.parentConstraint(self.LeftLeg.IK_CTRL_animData_CONST_GRP, self.LeftLeg.IK_CTRL_inRig_CONST_GRP, maintainOffset = False)\n        self.LeftLeg.follow_extremity_Constraint = temp[0]\n        mayac.parentConstraint(self.LeftLeg.Follow_Knee_GRP, self.LeftLeg.IK_CTRL_inRig_CONST_GRP, maintainOffset = False)\n        self.LeftLeg.follow_extremity_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftLeg_follow_extremity_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowFoot\" %(self.LeftLeg.IK_CTRL), \"%s.inputX\" %(self.LeftLeg.follow_extremity_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowFoot\" %(self.LeftLeg.IK_CTRL), \"%s.%sW1\" %(self.LeftLeg.follow_extremity_Constraint, self.LeftLeg.Follow_Knee_GRP))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg.follow_extremity_Constraint_Reverse), \"%s.%sW0\" %(self.LeftLeg.follow_extremity_Constraint, self.LeftLeg.IK_CTRL_animData_CONST_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftLeg.follow_extremity_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightFoot.IK_CTRL, self.RightLeg.Follow_Foot_GRP, maintainOffset = True)\n        self.RightLeg.Follow_Foot_Constraint = temp[0]\n        temp = mayac.parentConstraint(self.RightLeg.IK_CTRL_animData_CONST_GRP, self.RightLeg.IK_CTRL_inRig_CONST_GRP, maintainOffset = False)\n        self.RightLeg.follow_extremity_Constraint = temp[0]\n        mayac.parentConstraint(self.RightLeg.Follow_Knee_GRP, self.RightLeg.IK_CTRL_inRig_CONST_GRP, maintainOffset = False)\n        self.RightLeg.follow_extremity_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightLeg_follow_extremity_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowFoot\" %(self.RightLeg.IK_CTRL), \"%s.inputX\" %(self.RightLeg.follow_extremity_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowFoot\" %(self.RightLeg.IK_CTRL), \"%s.%sW1\" %(self.RightLeg.follow_extremity_Constraint, self.RightLeg.Follow_Knee_GRP))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg.follow_extremity_Constraint_Reverse), \"%s.%sW0\" %(self.RightLeg.follow_extremity_Constraint, self.RightLeg.IK_CTRL_animData_CONST_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.RightLeg.follow_extremity_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.LeftForeArm.IK_CTRL_animData_CONST_GRP, self.LeftForeArm.IK_CTRL_inRig_CONST_GRP, maintainOffset = True)\n        self.LeftForeArm.follow_extremity_Constraint = temp[0]\n        mayac.parentConstraint(self.LeftHand.IK_CTRL, self.LeftForeArm.IK_CTRL_inRig_CONST_GRP, maintainOffset = True)\n        self.LeftForeArm.follow_extremity_Constraint_Reverse = mayac.createNode( 'reverse', n=\"LeftForeArm_follow_extremity_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowHand\" %(self.LeftForeArm.IK_CTRL), \"%s.inputX\" %(self.LeftForeArm.follow_extremity_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowHand\" %(self.LeftForeArm.IK_CTRL), \"%s.%sW1\" %(self.LeftForeArm.follow_extremity_Constraint, self.LeftHand.IK_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftForeArm.follow_extremity_Constraint_Reverse), \"%s.%sW0\" %(self.LeftForeArm.follow_extremity_Constraint, self.LeftForeArm.IK_CTRL_animData_CONST_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.LeftForeArm.follow_extremity_Constraint), 2)\n        \n        temp = mayac.parentConstraint(self.RightForeArm.IK_CTRL_animData_CONST_GRP, self.RightForeArm.IK_CTRL_inRig_CONST_GRP, maintainOffset = True)\n        self.RightForeArm.follow_extremity_Constraint = temp[0]\n        mayac.parentConstraint(self.RightHand.IK_CTRL, self.RightForeArm.IK_CTRL_inRig_CONST_GRP, maintainOffset = True)\n        self.RightForeArm.follow_extremity_Constraint_Reverse = mayac.createNode( 'reverse', n=\"RightForeArm_follow_extremity_Constraint_Reverse\")\n        mayac.connectAttr(\"%s.FollowHand\" %(self.RightForeArm.IK_CTRL), \"%s.inputX\" %(self.RightForeArm.follow_extremity_Constraint_Reverse))\n        mayac.connectAttr(\"%s.FollowHand\" %(self.RightForeArm.IK_CTRL), \"%s.%sW1\" %(self.RightForeArm.follow_extremity_Constraint, self.RightHand.IK_CTRL))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightForeArm.follow_extremity_Constraint_Reverse), \"%s.%sW0\" %(self.RightForeArm.follow_extremity_Constraint, self.RightForeArm.IK_CTRL_animData_CONST_GRP))\n        mayac.setAttr(\"%s.interpType\" %(self.RightForeArm.follow_extremity_Constraint), 2)\n        \n\n        \n        #IK feet\n        self.Left_Ankle_IK_CTRL = DJB_createGroup(transform = None, suffix = None, fullName =\"Left_Ankle_IK_CTRL\", pivotFrom = self.LeftToeBase.Bind_Joint)\n        self.Left_ToeBase_IK_CTRL = DJB_createGroup(transform = None, suffix = None, fullName =\"Left_ToeBase_IK_CTRL\", pivotFrom = self.LeftToeBase.Bind_Joint)\n        self.Left_ToeBase_IK_AnimData_GRP = DJB_createGroup(transform = self.Left_ToeBase_IK_CTRL, suffix = None, fullName =\"Left_ToeBase_IK_AnimData_GRP\")\n        self.Left_Ankle_IK_AnimData_GRP = DJB_createGroup(transform = self.Left_Ankle_IK_CTRL, suffix = None, fullName =\"Left_Ankle_IK_AnimData_GRP\")\n        self.Left_Toe_IK_CTRL = DJB_createGroup(transform = None, suffix = None, fullName =\"Left_Toe_End_IK_CTRL\", pivotFrom = self.LeftToe_End.Bind_Joint)\n        self.Left_Toe_IK_AnimData_GRP = DJB_createGroup(transform = self.Left_Toe_IK_CTRL, suffix = None, fullName =\"Left_Toe_IK_AnimData_GRP\")   \n        #set rotation orders\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Left_Ankle_IK_CTRL), self.LeftFoot.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Left_ToeBase_IK_CTRL), self.LeftToeBase.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Left_ToeBase_IK_AnimData_GRP), self.LeftToeBase.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Left_Ankle_IK_AnimData_GRP), self.LeftFoot.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Left_Toe_IK_CTRL), self.LeftToeBase.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Left_Toe_IK_AnimData_GRP), self.LeftToeBase.rotOrder)\n        \n        \n        #handle     \n        temp = mayac.ikHandle( n=\"Left_ToeBase_IkHandle\", sj= self.LeftFoot.IK_Joint, ee= self.LeftToeBase.IK_Joint, solver = \"ikSCsolver\", weight = 1)\n        self.Left_ToeBase_IkHandle = temp[0]\n        mayac.setAttr(\"%s.visibility\" % (self.Left_ToeBase_IkHandle), 0)\n\n        mayac.parent(self.Left_Toe_IK_AnimData_GRP, self.LeftFoot.IK_CTRL)\n        mayac.parent(self.Left_ToeBase_IK_AnimData_GRP, self.Left_Toe_IK_CTRL)\n        mayac.parent(self.Left_Ankle_IK_AnimData_GRP, self.Left_Toe_IK_CTRL)\n        mayac.parent(self.LeftFoot.IK_Handle, self.Left_Ankle_IK_CTRL)\n        mayac.parent(self.Left_ToeBase_IkHandle, self.Left_Ankle_IK_CTRL)\n        mayac.orientConstraint(self.Left_Toe_IK_CTRL, self.LeftToe_End.IK_Joint)\n        mayac.orientConstraint(self.Left_ToeBase_IK_CTRL, self.LeftToeBase.IK_Joint)\n        mayac.delete(self.LeftFoot.IK_Constraint)\n        self.LeftFoot.IK_Constraint = None\n        mayac.orientConstraint(self.Left_Ankle_IK_CTRL, self.LeftFoot.IK_Joint)\n        \n        self.Left_IK_ToeBase_animData_MultNode = mayac.createNode( 'multiplyDivide', n=\"Left_IK_ToeBase_animData_MultNode\")\n        mayac.connectAttr(\"%s.rotateX\" %(self.LeftToeBase.AnimData_Joint), \"%s.input1X\" %(self.Left_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.AnimDataMult\" %(self.LeftFoot.IK_CTRL), \"%s.input2X\" %(self.Left_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.rotateY\" %(self.LeftToeBase.AnimData_Joint), \"%s.input1Y\" %(self.Left_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.AnimDataMult\" %(self.LeftFoot.IK_CTRL), \"%s.input2Y\" %(self.Left_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.rotateZ\" %(self.LeftToeBase.AnimData_Joint), \"%s.input1Z\" %(self.Left_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.AnimDataMult\" %(self.LeftFoot.IK_CTRL), \"%s.input2Z\" %(self.Left_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.outputX\" %(self.Left_IK_ToeBase_animData_MultNode), \"%s.rotateX\" %(self.Left_ToeBase_IK_AnimData_GRP), force = True)\n        mayac.connectAttr(\"%s.outputY\" %(self.Left_IK_ToeBase_animData_MultNode), \"%s.rotateY\" %(self.Left_ToeBase_IK_AnimData_GRP), force = True)\n        mayac.connectAttr(\"%s.outputZ\" %(self.Left_IK_ToeBase_animData_MultNode), \"%s.rotateZ\" %(self.Left_ToeBase_IK_AnimData_GRP), force = True)\n    \n        self.Right_Ankle_IK_CTRL = DJB_createGroup(transform = None, suffix = None, fullName =\"Right_Ankle_IK_CTRL\", pivotFrom = self.RightToeBase.Bind_Joint)\n        self.Right_ToeBase_IK_CTRL = DJB_createGroup(transform = None, suffix = None, fullName =\"Right_ToeBase_IK_CTRL\", pivotFrom = self.RightToeBase.Bind_Joint)\n        self.Right_ToeBase_IK_AnimData_GRP = DJB_createGroup(transform = self.Right_ToeBase_IK_CTRL, suffix = None, fullName =\"Right_ToeBase_IK_AnimData_GRP\")\n        self.Right_Ankle_IK_AnimData_GRP = DJB_createGroup(transform = self.Right_Ankle_IK_CTRL, suffix = None, fullName =\"Right_Ankle_IK_AnimData_GRP\")\n        self.Right_Toe_IK_CTRL = DJB_createGroup(transform = None, suffix = None, fullName =\"Right_Toe_End_IK_CTRL\", pivotFrom = self.RightToe_End.Bind_Joint)\n        self.Right_Toe_IK_AnimData_GRP = DJB_createGroup(transform = self.Right_Toe_IK_CTRL, suffix = None, fullName =\"Right_Toe_IK_AnimData_GRP\")            \n        #set rotation orders\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Right_Ankle_IK_CTRL), self.LeftFoot.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Right_ToeBase_IK_CTRL), self.LeftToeBase.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Right_ToeBase_IK_AnimData_GRP), self.LeftToeBase.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Right_Ankle_IK_AnimData_GRP), self.LeftFoot.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Right_Toe_IK_CTRL), self.LeftToeBase.rotOrder)\n        mayac.setAttr(\"%s.rotateOrder\" % (self.Right_Toe_IK_AnimData_GRP), self.LeftToeBase.rotOrder)\n        #IK Handle\n        temp = mayac.ikHandle( n=\"Right_ToeBase_IkHandle\", sj= self.RightFoot.IK_Joint, ee= self.RightToeBase.IK_Joint, solver = \"ikSCsolver\", weight = 1)\n        self.Right_ToeBase_IkHandle = temp[0]\n        mayac.setAttr(\"%s.visibility\" % (self.Right_ToeBase_IkHandle), 0)\n\n        \n        mayac.parent(self.Right_Toe_IK_AnimData_GRP, self.RightFoot.IK_CTRL)\n        mayac.parent(self.Right_ToeBase_IK_AnimData_GRP, self.Right_Toe_IK_CTRL)\n        mayac.parent(self.Right_Ankle_IK_AnimData_GRP, self.Right_Toe_IK_CTRL)\n        mayac.parent(self.RightFoot.IK_Handle, self.Right_Ankle_IK_CTRL)\n        mayac.parent(self.Right_ToeBase_IkHandle, self.Right_Ankle_IK_CTRL)\n        mayac.orientConstraint(self.Right_Toe_IK_CTRL, self.RightToe_End.IK_Joint)\n        mayac.orientConstraint(self.Right_ToeBase_IK_CTRL, self.RightToeBase.IK_Joint)\n        mayac.delete(self.RightFoot.IK_Constraint)\n        self.RightFoot.IK_Constraint = None\n        mayac.orientConstraint(self.Right_Ankle_IK_CTRL, self.RightFoot.IK_Joint)\n        \n        self.Right_IK_ToeBase_animData_MultNode = mayac.createNode( 'multiplyDivide', n=\"Right_IK_ToeBase_animData_MultNode\")\n        mayac.connectAttr(\"%s.rotateX\" %(self.RightToeBase.AnimData_Joint), \"%s.input1X\" %(self.Right_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.AnimDataMult\" %(self.RightFoot.IK_CTRL), \"%s.input2X\" %(self.Right_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.rotateY\" %(self.RightToeBase.AnimData_Joint), \"%s.input1Y\" %(self.Right_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.AnimDataMult\" %(self.RightFoot.IK_CTRL), \"%s.input2Y\" %(self.Right_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.rotateZ\" %(self.RightToeBase.AnimData_Joint), \"%s.input1Z\" %(self.Right_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.AnimDataMult\" %(self.RightFoot.IK_CTRL), \"%s.input2Z\" %(self.Right_IK_ToeBase_animData_MultNode), force = True)\n        mayac.connectAttr(\"%s.outputX\" %(self.Right_IK_ToeBase_animData_MultNode), \"%s.rotateX\" %(self.Right_ToeBase_IK_AnimData_GRP), force = True)\n        mayac.connectAttr(\"%s.outputY\" %(self.Right_IK_ToeBase_animData_MultNode), \"%s.rotateY\" %(self.Right_ToeBase_IK_AnimData_GRP), force = True)\n        mayac.connectAttr(\"%s.outputZ\" %(self.Right_IK_ToeBase_animData_MultNode), \"%s.rotateZ\" %(self.Right_ToeBase_IK_AnimData_GRP), force = True)\n\n        #Zero offsets on Foot Constraints\n        mayac.setAttr(\"%s.offsetX\" % (self.LeftFoot.Constraint), 0)\n        mayac.setAttr(\"%s.offsetY\" % (self.LeftFoot.Constraint), 0)\n        mayac.setAttr(\"%s.offsetZ\" % (self.LeftFoot.Constraint), 0)\n        mayac.setAttr(\"%s.offsetX\" % (self.RightFoot.Constraint), 0)\n        mayac.setAttr(\"%s.offsetY\" % (self.RightFoot.Constraint), 0)\n        mayac.setAttr(\"%s.offsetZ\" % (self.RightFoot.Constraint), 0)\n\n        #attr connections to foot controls\n        if self.rigType == \"AutoRig\":\n            self.LeftFoot_FootRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"LeftFoot_FootRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.LeftFoot_FootRoll_MultNode), -1)\n            mayac.connectAttr(\"%s.FootRoll\" %(self.LeftFoot.IK_CTRL), \"%s.input1X\" %(self.LeftFoot_FootRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.LeftFoot_FootRoll_MultNode), \"%s.rotateX\" %(self.Left_Ankle_IK_CTRL), force = True)\n    \n            mayac.connectAttr(\"%s.ToeTap\" %(self.LeftFoot.IK_CTRL), \"%s.rotateX\" %(self.Left_ToeBase_IK_CTRL), force = True)\n            Left_ToeBase_ZAdd = mayac.shadingNode('plusMinusAverage', asUtility=True, n = \"Left_ToeBase_ZAdd\")\n            mayac.connectAttr(\"%s.ToeSideToSide\" %(self.LeftFoot.IK_CTRL), \"%s.input1D[0]\" %(Left_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.output1D\" %(Left_ToeBase_ZAdd), \"%s.rotateZ\" %(self.Left_ToeBase_IK_CTRL), force = True)\n            mayac.connectAttr(\"%s.ToeRotate\" %(self.LeftFoot.IK_CTRL), \"%s.rotateY\" %(self.Left_ToeBase_IK_CTRL), force = True)\n            \n            self.LeftFoot_ToeRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"LeftFoot_ToeRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.LeftFoot_ToeRoll_MultNode), -1)\n            mayac.connectAttr(\"%s.ToeRoll\" %(self.LeftFoot.IK_CTRL), \"%s.input1X\" %(self.LeftFoot_ToeRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.LeftFoot_ToeRoll_MultNode), \"%s.rotateX\" %(self.Left_Toe_IK_CTRL), force = True)\n            \n            mayac.connectAttr(\"%s.HipPivot\" %(self.LeftFoot.IK_CTRL), \"%s.rotateY\" %(self.LeftFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n    \n            mayac.connectAttr(\"%s.BallPivot\" %(self.LeftFoot.IK_CTRL), \"%s.input1D[1]\" %(Left_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.BallPivot\" %(self.LeftFoot.IK_CTRL), \"%s.rotateZ\" %(self.Left_Ankle_IK_CTRL), force = True)\n            \n            mayac.connectAttr(\"%s.ToePivot\" %(self.LeftFoot.IK_CTRL), \"%s.rotateZ\" %(self.Left_Toe_IK_CTRL), force = True)\n            \n            mayac.connectAttr(\"%s.HipSideToSide\" %(self.LeftFoot.IK_CTRL), \"%s.rotateZ\" %(self.LeftFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n    \n            mayac.connectAttr(\"%s.HipBackToFront\" %(self.LeftFoot.IK_CTRL), \"%s.rotateX\" %(self.LeftFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n        \n        \n            self.RightFoot_FootRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_FootRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_FootRoll_MultNode), -1)\n            mayac.connectAttr(\"%s.FootRoll\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_FootRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_FootRoll_MultNode), \"%s.rotateX\" %(self.Right_Ankle_IK_CTRL), force = True)\n    \n            mayac.connectAttr(\"%s.ToeTap\" %(self.RightFoot.IK_CTRL), \"%s.rotateX\" %(self.Right_ToeBase_IK_CTRL), force = True)\n            Right_ToeBase_ZAdd = mayac.shadingNode('plusMinusAverage', asUtility=True, n = \"Right_ToeBase_ZAdd\")\n            mayac.connectAttr(\"%s.ToeSideToSide\" %(self.RightFoot.IK_CTRL), \"%s.input1D[0]\" %(Right_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.output1D\" %(Right_ToeBase_ZAdd), \"%s.rotateZ\" %(self.Right_ToeBase_IK_CTRL), force = True)\n            mayac.connectAttr(\"%s.ToeRotate\" %(self.RightFoot.IK_CTRL), \"%s.rotateY\" %(self.Right_ToeBase_IK_CTRL), force = True)\n    \n            self.RightFoot_ToeRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_ToeRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_ToeRoll_MultNode), -1)\n            mayac.connectAttr(\"%s.ToeRoll\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_ToeRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_ToeRoll_MultNode), \"%s.rotateX\" %(self.Right_Toe_IK_CTRL), force = True)\n            \n            self.RightFoot_HipPivot_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_HipPivot_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_HipPivot_MultNode), -1)\n            mayac.connectAttr(\"%s.HipPivot\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_HipPivot_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_HipPivot_MultNode), \"%s.rotateY\" %(self.RightFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n            \n            self.RightFoot_BallPivot_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_BallPivot_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_BallPivot_MultNode), -1)\n            mayac.connectAttr(\"%s.BallPivot\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_BallPivot_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_BallPivot_MultNode), \"%s.input1D[1]\" %(Right_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_BallPivot_MultNode), \"%s.rotateZ\" %(self.Right_Ankle_IK_CTRL), force = True)\n            \n            self.RightFoot_ToePivot_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_ToePivot_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_ToePivot_MultNode), -1)\n            mayac.connectAttr(\"%s.ToePivot\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_ToePivot_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_ToePivot_MultNode), \"%s.rotateZ\" %(self.Right_Toe_IK_CTRL), force = True)\n            \n            self.RightFoot_HipSideToSide_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_HipSideToSide_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_HipSideToSide_MultNode), -1)\n            mayac.connectAttr(\"%s.HipSideToSide\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_HipSideToSide_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_HipSideToSide_MultNode), \"%s.rotateZ\" %(self.RightFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n            \n            mayac.connectAttr(\"%s.HipBackToFront\" %(self.RightFoot.IK_CTRL), \"%s.rotateX\" %(self.RightFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n        \n        \n        \n        \n        elif self.rigType == \"World\":\n            self.LeftFoot_FootRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"LeftFoot_FootRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.LeftFoot_FootRoll_MultNode), 1)\n            mayac.connectAttr(\"%s.FootRoll\" %(self.LeftFoot.IK_CTRL), \"%s.input1X\" %(self.LeftFoot_FootRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.LeftFoot_FootRoll_MultNode), \"%s.rotateX\" %(self.Left_Ankle_IK_CTRL), force = True)\n    \n            LeftFoot_ToeTap_MultNode = mayac.createNode( 'multiplyDivide', n=\"LeftFoot_ToeTap_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(LeftFoot_ToeTap_MultNode), -1)\n            mayac.connectAttr(\"%s.ToeTap\" %(self.LeftFoot.IK_CTRL), \"%s.input1X\" %(LeftFoot_ToeTap_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(LeftFoot_ToeTap_MultNode), \"%s.rotateX\" %(self.Left_ToeBase_IK_CTRL), force = True)\n            \n            Left_ToeBase_ZAdd = mayac.shadingNode('plusMinusAverage', asUtility=True, n = \"Left_ToeBase_ZAdd\")\n            mayac.connectAttr(\"%s.ToeSideToSide\" %(self.LeftFoot.IK_CTRL), \"%s.input1D[0]\" %(Left_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.output1D\" %(Left_ToeBase_ZAdd), \"%s.rotateY\" %(self.Left_ToeBase_IK_CTRL), force = True)\n            mayac.connectAttr(\"%s.ToeRotate\" %(self.LeftFoot.IK_CTRL), \"%s.rotateZ\" %(self.Left_ToeBase_IK_CTRL), force = True)\n            \n            self.LeftFoot_ToeRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"LeftFoot_ToeRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.LeftFoot_ToeRoll_MultNode), 1)\n            mayac.connectAttr(\"%s.ToeRoll\" %(self.LeftFoot.IK_CTRL), \"%s.input1X\" %(self.LeftFoot_ToeRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.LeftFoot_ToeRoll_MultNode), \"%s.rotateX\" %(self.Left_Toe_IK_CTRL), force = True)\n            \n            mayac.connectAttr(\"%s.HipPivot\" %(self.LeftFoot.IK_CTRL), \"%s.rotateY\" %(self.LeftFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n    \n            mayac.connectAttr(\"%s.BallPivot\" %(self.LeftFoot.IK_CTRL), \"%s.input1D[1]\" %(Left_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.BallPivot\" %(self.LeftFoot.IK_CTRL), \"%s.rotateY\" %(self.Left_Ankle_IK_CTRL), force = True)\n            \n            mayac.connectAttr(\"%s.ToePivot\" %(self.LeftFoot.IK_CTRL), \"%s.rotateY\" %(self.Left_Toe_IK_CTRL), force = True)\n            \n            mayac.connectAttr(\"%s.HipSideToSide\" %(self.LeftFoot.IK_CTRL), \"%s.rotateZ\" %(self.LeftFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n    \n            mayac.connectAttr(\"%s.HipBackToFront\" %(self.LeftFoot.IK_CTRL), \"%s.rotateX\" %(self.LeftFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n            \n            \n            self.RightFoot_FootRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_FootRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_FootRoll_MultNode), 1)\n            mayac.connectAttr(\"%s.FootRoll\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_FootRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_FootRoll_MultNode), \"%s.rotateX\" %(self.Right_Ankle_IK_CTRL), force = True)\n    \n            RightFoot_ToeTap_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_ToeTap_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(RightFoot_ToeTap_MultNode), -1)\n            mayac.connectAttr(\"%s.ToeTap\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(RightFoot_ToeTap_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(RightFoot_ToeTap_MultNode), \"%s.rotateX\" %(self.Right_ToeBase_IK_CTRL), force = True)\n            \n            Right_ToeBase_ZAdd = mayac.shadingNode('plusMinusAverage', asUtility=True, n = \"Right_ToeBase_ZAdd\")\n            mayac.connectAttr(\"%s.ToeSideToSide\" %(self.RightFoot.IK_CTRL), \"%s.input1D[0]\" %(Right_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.output1D\" %(Right_ToeBase_ZAdd), \"%s.rotateY\" %(self.Right_ToeBase_IK_CTRL), force = True)\n            mayac.connectAttr(\"%s.ToeRotate\" %(self.RightFoot.IK_CTRL), \"%s.rotateZ\" %(self.Right_ToeBase_IK_CTRL), force = True)\n    \n            self.RightFoot_ToeRoll_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_ToeRoll_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_ToeRoll_MultNode), 1)\n            mayac.connectAttr(\"%s.ToeRoll\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_ToeRoll_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_ToeRoll_MultNode), \"%s.rotateX\" %(self.Right_Toe_IK_CTRL), force = True)\n            \n            self.RightFoot_HipPivot_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_HipPivot_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_HipPivot_MultNode), -1)\n            mayac.connectAttr(\"%s.HipPivot\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_HipPivot_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_HipPivot_MultNode), \"%s.rotateY\" %(self.RightFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n            \n            self.RightFoot_BallPivot_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_BallPivot_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_BallPivot_MultNode), -1)\n            mayac.connectAttr(\"%s.BallPivot\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_BallPivot_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_BallPivot_MultNode), \"%s.input1D[1]\" %(Right_ToeBase_ZAdd), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_BallPivot_MultNode), \"%s.rotateY\" %(self.Right_Ankle_IK_CTRL), force = True)\n            \n            self.RightFoot_ToePivot_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_ToePivot_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_ToePivot_MultNode), -1)\n            mayac.connectAttr(\"%s.ToePivot\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_ToePivot_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_ToePivot_MultNode), \"%s.rotateY\" %(self.Right_Toe_IK_CTRL), force = True)\n            \n            self.RightFoot_HipSideToSide_MultNode = mayac.createNode( 'multiplyDivide', n=\"RightFoot_HipSideToSide_MultNode\")\n            mayac.setAttr(\"%s.input2X\" %(self.RightFoot_HipSideToSide_MultNode), -1)\n            mayac.connectAttr(\"%s.HipSideToSide\" %(self.RightFoot.IK_CTRL), \"%s.input1X\" %(self.RightFoot_HipSideToSide_MultNode), force = True)\n            mayac.connectAttr(\"%s.outputX\" %(self.RightFoot_HipSideToSide_MultNode), \"%s.rotateZ\" %(self.RightFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n            \n            mayac.connectAttr(\"%s.HipBackToFront\" %(self.RightFoot.IK_CTRL), \"%s.rotateX\" %(self.RightFoot.IK_CTRL_grandparent_inRig_CONST_GRP), force = True)\n\n\n        \n        \n        #finger SDKs\n        if self.rigType == \"AutoRig\":\n            if self.LeftHandIndex1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 12.0)\n            else:\n                mayac.deleteAttr(\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL))\n            if self.LeftHandMiddle1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -10.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 3.0)\n            else:\n                mayac.deleteAttr(\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL))    \n            if self.LeftHandRing1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -5.0)\n            else:\n                mayac.deleteAttr(\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL))      \n            if self.LeftHandPinky1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.LeftHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -13.0)\n            else:\n                mayac.deleteAttr(\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL))    \n            if self.LeftHandThumb1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 30.0)\n            else:\n                mayac.deleteAttr(\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL))\n            if not self.LeftHandPinky1.Bind_Joint and not self.LeftHandRing1.Bind_Joint and not self.LeftHandMiddle1.Bind_Joint and not self.LeftHandIndex1.Bind_Joint:\n                mayac.deleteAttr(\"%s.Sway\"  % (self.LeftHand.Options_CTRL))\n                if not self.LeftHandThumb1.Bind_Joint:\n                    mayac.deleteAttr(\"%s.Spread\"  % (self.LeftHand.Options_CTRL))\n                    \n                    \n            if self.RightHandIndex1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -12.0)\n            else:\n                mayac.deleteAttr(\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL))\n            if self.RightHandMiddle1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 10.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -3.0)\n            else:\n                mayac.deleteAttr(\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL))    \n            if self.RightHandRing1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 5.0)\n            else:\n                mayac.deleteAttr(\"%s.RingCurl\"  % (self.RightHand.Options_CTRL))      \n            if self.RightHandPinky1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateX\" % (self.RightHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 13.0)\n            else:\n                mayac.deleteAttr(\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL))    \n            if self.RightHandThumb1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -30.0)\n            else:\n                mayac.deleteAttr(\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL))\n            if not self.RightHandPinky1.Bind_Joint and not self.RightHandRing1.Bind_Joint and not self.RightHandMiddle1.Bind_Joint and not self.RightHandIndex1.Bind_Joint:\n                mayac.deleteAttr(\"%s.Sway\"  % (self.RightHand.Options_CTRL))\n                if not self.RightHandThumb1.Bind_Joint:\n                    mayac.deleteAttr(\"%s.Spread\"  % (self.RightHand.Options_CTRL))\n\n        elif self.rigType == \"World\":\n            if self.LeftHandIndex1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 12.0)\n            else:\n                mayac.deleteAttr(\"%s.IndexCurl\"  % (self.LeftHand.Options_CTRL))\n            if self.LeftHandMiddle1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -10.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 3.0)\n            else:\n                mayac.deleteAttr(\"%s.MiddleCurl\"  % (self.LeftHand.Options_CTRL))    \n            if self.LeftHandRing1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -5.0)\n            else:\n                mayac.deleteAttr(\"%s.RingCurl\"  % (self.LeftHand.Options_CTRL))      \n            if self.LeftHandPinky1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.LeftHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -13.0)\n            else:\n                mayac.deleteAttr(\"%s.PinkyCurl\"  % (self.LeftHand.Options_CTRL))    \n            if self.LeftHandThumb1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = 10.0, value = -15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.LeftHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.LeftHand.Options_CTRL), driverValue = -10.0, value = 30.0)\n            else:\n                mayac.deleteAttr(\"%s.ThumbCurl\"  % (self.LeftHand.Options_CTRL))\n            if not self.LeftHandPinky1.Bind_Joint and not self.LeftHandRing1.Bind_Joint and not self.LeftHandMiddle1.Bind_Joint and not self.LeftHandIndex1.Bind_Joint:\n                mayac.deleteAttr(\"%s.Sway\"  % (self.LeftHand.Options_CTRL))\n                if not self.LeftHandThumb1.Bind_Joint:\n                    mayac.deleteAttr(\"%s.Spread\"  % (self.LeftHand.Options_CTRL))\n                    \n                    \n            if self.RightHandIndex1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandIndex3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandIndex1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -12.0)\n            else:\n                mayac.deleteAttr(\"%s.IndexCurl\"  % (self.RightHand.Options_CTRL))\n            if self.RightHandMiddle1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandMiddle3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 10.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandMiddle1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -3.0)\n            else:\n                mayac.deleteAttr(\"%s.MiddleCurl\"  % (self.RightHand.Options_CTRL))    \n            if self.RightHandRing1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandRing3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.RingCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandRing1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 5.0)\n            else:\n                mayac.deleteAttr(\"%s.RingCurl\"  % (self.RightHand.Options_CTRL))      \n            if self.RightHandPinky1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateZ\" % (self.RightHandPinky3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Sway\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 45.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -30.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandPinky1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 13.0)\n            else:\n                mayac.deleteAttr(\"%s.PinkyCurl\"  % (self.RightHand.Options_CTRL))    \n            if self.RightHandThumb1.Bind_Joint:\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 25.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 60.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = -90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb3.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = 90.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 0.0, value = 0.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = 10.0, value = 15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb1.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -15.0)\n                mayac.setDrivenKeyframe( \"%s.rotateY\" % (self.RightHandThumb2.FK_CTRL_inRig_CONST_GRP), currentDriver=\"%s.Spread\"  % (self.RightHand.Options_CTRL), driverValue = -10.0, value = -30.0)\n            else:\n                mayac.deleteAttr(\"%s.ThumbCurl\"  % (self.RightHand.Options_CTRL))\n            if not self.RightHandPinky1.Bind_Joint and not self.RightHandRing1.Bind_Joint and not self.RightHandMiddle1.Bind_Joint and not self.RightHandIndex1.Bind_Joint:\n                mayac.deleteAttr(\"%s.Sway\"  % (self.RightHand.Options_CTRL))\n                if not self.RightHandThumb1.Bind_Joint:\n                    mayac.deleteAttr(\"%s.Spread\"  % (self.RightHand.Options_CTRL))\n            \n            \n\n        \n        #global scale\n        mayac.scaleConstraint(self.global_CTRL, self.Joint_GRP, name = \"Global_Scale_Constraint\")\n        \n        #IKFK switches\n        self.LeftArm_Switch_Reverse = mayac.createNode( 'reverse', n=\"LeftArm_Switch_Reverse\")\n        self.RightArm_Switch_Reverse = mayac.createNode( 'reverse', n=\"RightArm_Switch_Reverse\")\n        self.LeftLeg_Switch_Reverse = mayac.createNode( 'reverse', n=\"LeftLeg_Switch_Reverse\")\n        self.RightLeg_Switch_Reverse = mayac.createNode( 'reverse', n=\"RightLeg_Switch_Reverse\")\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.inputX\" %(self.LeftArm_Switch_Reverse))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.inputX\" %(self.RightArm_Switch_Reverse))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.inputX\" %(self.LeftLeg_Switch_Reverse))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.inputX\" %(self.RightLeg_Switch_Reverse))\n        \n        mayac.setAttr(\"%s.interpType\" %(self.LeftArm.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.LeftForeArm.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.LeftHand.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightArm.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightForeArm.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightHand.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.LeftUpLeg.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.LeftLeg.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.LeftFoot.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.LeftToeBase.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightUpLeg.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightLeg.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightFoot.Constraint), 2)\n        mayac.setAttr(\"%s.interpType\" %(self.RightToeBase.Constraint), 2)\n        \n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.%sW1\" %(self.LeftArm.Constraint, self.LeftArm.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftArm_Switch_Reverse), \"%s.%sW0\" %(self.LeftArm.Constraint, self.LeftArm.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.%sW1\" %(self.LeftForeArm.Constraint, self.LeftForeArm.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftArm_Switch_Reverse), \"%s.%sW0\" %(self.LeftForeArm.Constraint, self.LeftForeArm.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.%sW1\" %(self.LeftHand.Constraint, self.LeftHand.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftArm_Switch_Reverse), \"%s.%sW0\" %(self.LeftHand.Constraint, self.LeftHand.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.%sW1\" %(self.RightArm.Constraint, self.RightArm.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightArm_Switch_Reverse), \"%s.%sW0\" %(self.RightArm.Constraint, self.RightArm.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.%sW1\" %(self.RightForeArm.Constraint, self.RightForeArm.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightArm_Switch_Reverse), \"%s.%sW0\" %(self.RightForeArm.Constraint, self.RightForeArm.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.%sW1\" %(self.RightHand.Constraint, self.RightHand.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightArm_Switch_Reverse), \"%s.%sW0\" %(self.RightHand.Constraint, self.RightHand.FK_Joint))\n        \n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.%sW1\" %(self.LeftUpLeg.Constraint, self.LeftUpLeg.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg_Switch_Reverse), \"%s.%sW0\" %(self.LeftUpLeg.Constraint, self.LeftUpLeg.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.%sW1\" %(self.LeftLeg.Constraint, self.LeftLeg.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg_Switch_Reverse), \"%s.%sW0\" %(self.LeftLeg.Constraint, self.LeftLeg.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.%sW1\" %(self.LeftFoot.Constraint, self.LeftFoot.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg_Switch_Reverse), \"%s.%sW0\" %(self.LeftFoot.Constraint, self.LeftFoot.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.%sW1\" %(self.LeftToeBase.Constraint, self.LeftToeBase.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.LeftLeg_Switch_Reverse), \"%s.%sW0\" %(self.LeftToeBase.Constraint, self.LeftToeBase.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.%sW1\" %(self.RightUpLeg.Constraint, self.RightUpLeg.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg_Switch_Reverse), \"%s.%sW0\" %(self.RightUpLeg.Constraint, self.RightUpLeg.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.%sW1\" %(self.RightLeg.Constraint, self.RightLeg.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg_Switch_Reverse), \"%s.%sW0\" %(self.RightLeg.Constraint, self.RightLeg.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.%sW1\" %(self.RightFoot.Constraint, self.RightFoot.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg_Switch_Reverse), \"%s.%sW0\" %(self.RightFoot.Constraint, self.RightFoot.FK_Joint))\n        mayac.connectAttr(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.%sW1\" %(self.RightToeBase.Constraint, self.RightToeBase.IK_Joint))\n        mayac.connectAttr(\"%s.outputX\" %(self.RightLeg_Switch_Reverse), \"%s.%sW0\" %(self.RightToeBase.Constraint, self.RightToeBase.FK_Joint))\n        \n        #FKIK Visibilities\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.visibility\" %(self.LeftArm.IK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.visibility\" %(self.LeftForeArm.IK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.LeftHand.Options_CTRL), \"%s.visibility\" %(self.LeftHand.IK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.visibility\" %(self.RightArm.IK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.visibility\" %(self.RightForeArm.IK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.RightHand.Options_CTRL), \"%s.visibility\" %(self.RightHand.IK_CTRL_POS_GRP))\n\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.visibility\" %(self.LeftUpLeg.IK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.visibility\" %(self.LeftLeg.IK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.LeftFoot.Options_CTRL), \"%s.visibility\" %(self.LeftFoot.IK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.visibility\" %(self.RightUpLeg.IK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.visibility\" %(self.RightLeg.IK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.FK_IK\" %(self.RightFoot.Options_CTRL), \"%s.visibility\" %(self.RightFoot.IK_CTRL_POS_GRP))\n     \n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.LeftArm_Switch_Reverse), \"%s.visibility\" %(self.LeftArm.FK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.LeftArm_Switch_Reverse), \"%s.visibility\" %(self.LeftArm.FK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.RightArm_Switch_Reverse), \"%s.visibility\" %(self.RightArm.FK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.RightArm_Switch_Reverse), \"%s.visibility\" %(self.RightArm.FK_CTRL_POS_GRP))\n        \n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.LeftLeg_Switch_Reverse), \"%s.visibility\" %(self.LeftUpLeg.FK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.LeftLeg_Switch_Reverse), \"%s.visibility\" %(self.LeftUpLeg.FK_CTRL_POS_GRP))\n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.RightLeg_Switch_Reverse), \"%s.visibility\" %(self.RightUpLeg.FK_Joint))\n        DJB_Unlock_Connect_Lock(\"%s.outputX\" %(self.RightLeg_Switch_Reverse), \"%s.visibility\" %(self.RightUpLeg.FK_CTRL_POS_GRP))\n        \n        mayac.select(clear = True)\n        self.Misc_GRP = mayac.group(em = True, name = \"Misc_GRP\", world = True)\n        DJB_movePivotToObject(self.Misc_GRP, self.global_CTRL)\n        mayac.parent(self.Misc_GRP, self.Character_GRP)\n        self.LeftForeArm.createGuideCurve(self.Misc_GRP, optionsCTRL = self.LeftHand.Options_CTRL)\n        self.RightForeArm.createGuideCurve(self.Misc_GRP, optionsCTRL = self.RightHand.Options_CTRL)\n        self.LeftLeg.createGuideCurve(self.Misc_GRP, optionsCTRL = self.LeftFoot.Options_CTRL)\n        self.RightLeg.createGuideCurve(self.Misc_GRP, optionsCTRL = self.RightFoot.Options_CTRL)\n\n        #Layers\n        mayac.select(clear = True)\n        self.Mesh_Layer = mayac.createDisplayLayer(name = \"MeshLayer\", number = 1)\n        mayac.editDisplayLayerMembers(self.Mesh_Layer, self.Mesh_GRP)\n        self.Bind_Joint_Layer = mayac.createDisplayLayer(name = \"BindJointLayer\", number = 2)\n        mayac.editDisplayLayerMembers(self.Bind_Joint_Layer, self.Bind_Joint_GRP)\n        #self.AnimData_Joint_Layer = mayac.createDisplayLayer(name = \"AnimDataJointLayer\", number = 3)\n        #mayac.editDisplayLayerMembers(self.AnimData_Joint_Layer, self.AnimData_Joint_GRP)\n        mayac.setAttr(\"%s.visibility\" % (self.AnimData_Joint_GRP), 0)\n        self.Control_Layer = mayac.createDisplayLayer(name = \"ControlLayer\", number = 4)\n        mayac.editDisplayLayerMembers(self.Control_Layer, self.CTRL_GRP)\n        mayac.editDisplayLayerMembers(self.Control_Layer, self.Misc_GRP)\n        mayac.setAttr(\"%s.visibility\" %(self.Mesh_Layer), 1)\n        mayac.setAttr(\"%s.displayType\" %(self.Mesh_Layer), 2)\n        mayac.setAttr(\"%s.visibility\" %(self.Bind_Joint_Layer), 1)\n        mayac.setAttr(\"%s.displayType\" %(self.Bind_Joint_Layer), 2)\n        #mayac.setAttr(\"%s.visibility\" %(self.AnimData_Joint_Layer), 0)\n        #mayac.setAttr(\"%s.displayType\" %(self.AnimData_Joint_Layer), 2)\n        \n        for bodyPart in self.bodyParts:\n            bodyPart.fixAllLayerOverrides(self.Control_Layer)\n        self.Hips.fixLayerOverrides(self.global_CTRL, \"black\", self.Control_Layer)\n        self.Hips.fixLayerOverrides(self.LeftForeArm.Guide_Curve, \"black\", self.Control_Layer, referenceAlways = True)\n        self.Hips.fixLayerOverrides(self.RightForeArm.Guide_Curve, \"black\", self.Control_Layer, referenceAlways = True)\n        self.Hips.fixLayerOverrides(self.LeftLeg.Guide_Curve, \"black\", self.Control_Layer, referenceAlways = True)\n        self.Hips.fixLayerOverrides(self.RightLeg.Guide_Curve, \"black\", self.Control_Layer, referenceAlways = True)\n         \n         \n        #quick select sets\n        mayac.select(clear = True)\n        for bodyPart in self.bodyParts:\n            if bodyPart.Bind_Joint:\n                mayac.select(bodyPart.Bind_Joint, add = True)\n        self.Bind_Joint_SelectSet = mayac.sets(text = \"gCharacterSet\", name = \"Bind_Joint_SelectSet\")\n        #mayac.select(clear = True)\n        #for bodyPart in self.bodyParts:\n            #if bodyPart.AnimData_Joint:\n                #mayac.select(bodyPart.AnimData_Joint, add = True)\n        #self.AnimData_Joint_SelectSet = mayac.sets(text = \"gCharacterSet\", name = \"AnimData_Joint_SelectSet\")\n        mayac.select(clear = True)\n        for bodyPart in self.bodyParts:\n            if bodyPart.FK_CTRL:\n                mayac.select(bodyPart.FK_CTRL, add = True)\n            if bodyPart.IK_CTRL:\n                mayac.select(bodyPart.IK_CTRL, add = True)\n            if bodyPart.Options_CTRL:\n                mayac.select(bodyPart.Options_CTRL, add = True)\n        mayac.select(self.global_CTRL, add = True)\n        self.Controls_SelectSet = mayac.sets(text = \"gCharacterSet\", name = \"Controls_SelectSet\")\n        mayac.select(clear = True)\n        for geo in self.mesh:\n            mayac.select(geo, add = True)\n        self.Geo_SelectSet = mayac.sets(text = \"gCharacterSet\", name = \"Geo_SelectSet\")\n        mayac.select(clear = True)\n        \n        #Cleanup\n        mayac.delete(self.LeftFoot.footRotateLOC)\n        mayac.delete(self.RightFoot.footRotateLOC)\n        DJB_LockNHide(self.Character_GRP)\n        DJB_LockNHide(self.CTRL_GRP)\n        DJB_LockNHide(self.Joint_GRP)\n        DJB_LockNHide(self.Bind_Joint_GRP)\n        DJB_LockNHide(self.AnimData_Joint_GRP)\n        DJB_LockNHide(self.Mesh_GRP)\n        DJB_LockNHide(self.Misc_GRP)\n        mayac.setAttr(\"%s.visibility\" % (self.IK_Dummy_Joint_GRP), 0)\n        DJB_LockNHide(self.IK_Dummy_Joint_GRP)\n        \n        DJB_LockNHide(self.Left_ToeBase_IkHandle)\n        DJB_LockNHide(self.Right_ToeBase_IkHandle)\n        DJB_LockNHide(self.Left_Ankle_IK_CTRL)\n        DJB_LockNHide(self.Left_ToeBase_IK_CTRL)\n        DJB_LockNHide(self.Left_ToeBase_IK_AnimData_GRP)\n        DJB_LockNHide(self.Left_Ankle_IK_AnimData_GRP)\n        DJB_LockNHide(self.Left_Toe_IK_CTRL)\n        DJB_LockNHide(self.Left_Toe_IK_AnimData_GRP)\n        DJB_LockNHide(self.Right_Ankle_IK_CTRL)\n        DJB_LockNHide(self.Right_ToeBase_IK_CTRL)\n        DJB_LockNHide(self.Right_ToeBase_IK_AnimData_GRP)\n        DJB_LockNHide(self.Right_Ankle_IK_AnimData_GRP)\n        DJB_LockNHide(self.Right_Toe_IK_CTRL)\n        DJB_LockNHide(self.Right_Toe_IK_AnimData_GRP)\n\n        \n        \n        \n        #lock CTRLS\n        for bodyPart in self.bodyParts:\n            bodyPart.lockUpCTRLs()\n        \n        #defaultValues\n        mayac.setAttr(\"%s.FK_IK\" % (self.LeftFoot.Options_CTRL), 1)\n        mayac.setAttr(\"%s.FK_IK\" % (self.RightFoot.Options_CTRL), 1)\n        mayac.setAttr(\"%s.FK_IK\" % (self.LeftHand.Options_CTRL), 0)\n        mayac.setAttr(\"%s.FK_IK\" % (self.RightHand.Options_CTRL), 0)\n        \n        mayac.setAttr(\"%s.FollowBody\" % (self.LeftHand.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.RightHand.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.LeftForeArm.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.RightForeArm.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.LeftFoot.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.RightFoot.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.LeftLeg.IK_CTRL), 0)\n        mayac.setAttr(\"%s.FollowBody\" % (self.RightLeg.IK_CTRL), 0)\n        \n        selfPOS = mayac.xform(self.LeftLeg.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        parentPOS = mayac.xform(self.LeftLeg.parent.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        tempDistance = math.sqrt((selfPOS[0]-parentPOS[0])*(selfPOS[0]-parentPOS[0]) + (selfPOS[1]-parentPOS[1])*(selfPOS[1]-parentPOS[1]) + (selfPOS[2]-parentPOS[2])*(selfPOS[2]-parentPOS[2]))\n        mayac.setAttr(\"%s.translateZ\" % (self.LeftLeg.IK_CTRL), tempDistance / 2)\n        mayac.setAttr(\"%s.translateZ\" % (self.RightLeg.IK_CTRL), tempDistance / 2)\n        if self.rigType == \"AutoRig\":\n            mayac.setAttr(\"%s.translateX\" % (self.LeftForeArm.IK_CTRL), tempDistance / 2)\n            mayac.setAttr(\"%s.translateX\" % (self.RightForeArm.IK_CTRL), tempDistance / -2)\n        elif self.rigType == \"World\":\n            mayac.setAttr(\"%s.translateZ\" % (self.LeftForeArm.IK_CTRL), tempDistance / -2)\n            mayac.setAttr(\"%s.translateZ\" % (self.RightForeArm.IK_CTRL), tempDistance / -2)\n        DJB_LockNHide(self.global_CTRL, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False, s = False, v = True)\n        \n        OpenMaya.MGlobal.displayInfo(\"Rig Complete\")\n\n        \n    def checkSkeletonProportions(self, incomingDataRootJoint):\n        return True\n        global proportionCheckTolerance\n        success = True\n        New_joint_Namespace = DJB_findBeforeSeparator(incomingDataRootJoint, ':')\n        if not self.hulaOption and \"Root\" in incomingDataRootJoint:\n            print \"failing because of hula\"\n            success = False\n        for bodyPart in self.bodyParts:\n            if bodyPart.children and bodyPart.nodeName != \"Root\" and bodyPart.Bind_Joint:\n                selfPOS = mayac.xform(bodyPart.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n                if not mayac.objExists(\"%s%s\" % (New_joint_Namespace, bodyPart.nodeName)):\n                    print \"failing becuase of %s%s not existing\"%(New_joint_Namespace, bodyPart.nodeName)\n                    success = False\n                    break\n                else:\n                    DataSelfPOS = mayac.xform(\"%s%s\" % (New_joint_Namespace, bodyPart.nodeName), query = True, absolute = True, worldSpace = True, translation = True)\n                    for child in bodyPart.children:\n                        if child in self.bodyParts:\n                            if child.Bind_Joint and \"End\" not in child.nodeName:\n                                childPOS = mayac.xform(child.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n                                if not mayac.objExists(\"%s%s\" % (New_joint_Namespace, child.nodeName)):\n                                    print \"failing becuase of %s%s not existing\"%(New_joint_Namespace, child.nodeName)\n                                    success = False\n                                    break\n                                else:\n                                    DataChildPOS = mayac.xform(\"%s%s\" % (New_joint_Namespace, child.nodeName), query = True, absolute = True, worldSpace = True, translation = True)\n                                    correctDistance = math.sqrt((selfPOS[0]-childPOS[0])*(selfPOS[0]-childPOS[0]) + (selfPOS[1]-childPOS[1])*(selfPOS[1]-childPOS[1]) + (selfPOS[2]-childPOS[2])*(selfPOS[2]-childPOS[2])) / mayac.getAttr(\"%s.scaleX\" % (self.global_CTRL))\n                                    distanceInQuestion = math.sqrt((DataSelfPOS[0]-DataChildPOS[0])*(DataSelfPOS[0]-DataChildPOS[0]) + (DataSelfPOS[1]-DataChildPOS[1])*(DataSelfPOS[1]-DataChildPOS[1]) + (DataSelfPOS[2]-DataChildPOS[2])*(DataSelfPOS[2]-DataChildPOS[2]))\n                                    if not math.fabs(distanceInQuestion/correctDistance) > 1 - proportionCheckTolerance or not math.fabs(distanceInQuestion/correctDistance) < 1 + proportionCheckTolerance:\n                                        print \"Failing because proportions are incorrect for %s%s\"%(New_joint_Namespace, bodyPart.nodeName)\n                                        success = False\n                                        break\n                                if bodyPart.rotOrder != mayac.getAttr(\"%s.rotateOrder\" % (New_joint_Namespace + bodyPart.nodeName)):\n                                    print \"Failing because rotation Orders are incorrect for %s%s\"%(New_joint_Namespace, bodyPart.nodeName)\n                                    success = False\n                                    break\n        return success\n        \n        \n    def connectMotionToAnimDataJoints(self, incomingDataRootJoint): \n        mayac.currentTime(1)\n        New_joint_Namespace = DJB_findBeforeSeparator(incomingDataRootJoint, ':')\n        curJoint = 0.0\n        objectsOfInterest = []\n        for bodyPart in self.bodyParts:\n            if bodyPart.nodeName == \"Root\" and self.hulaOption:\n                if mayac.objExists(\"%sRoot\" % (New_joint_Namespace)):\n                    objectsOfInterest.append(\"%sRoot\" % (New_joint_Namespace))\n                    DJB_ConnectAll(\"%sRoot\" % (New_joint_Namespace), bodyPart.AnimData_Joint)\n                else:\n                    objectsOfInterest.append(\"%sHips\" % (New_joint_Namespace))\n                    DJB_ConnectAll(\"%sHips\" % (New_joint_Namespace), bodyPart.AnimData_Joint)\n            elif bodyPart.nodeName == \"Hips\" and self.hulaOption and mayac.objExists(\"%sRoot\" % (New_joint_Namespace)):\n                objectsOfInterest.append(\"%sHips\" % (New_joint_Namespace))\n                DJB_ConnectAll(\"%sHips\" % (New_joint_Namespace), bodyPart.AnimData_Joint)\n            elif bodyPart.nodeName == \"Hips\" and not self.hulaOption:\n                objectsOfInterest.append(\"%sHips\" % (New_joint_Namespace))\n                DJB_ConnectAll(\"%sHips\" % (New_joint_Namespace), bodyPart.AnimData_Joint)\n            elif bodyPart.nodeName not in [\"Hips\", \"HeadTop_End\", \"LeftHandThumb4\", \"LeftHandIndex4\", \"LeftHandMiddle4\", \"LeftHandRing4\", \"LeftHandPinky4\", \"LeftToe_End\", \"RightHandThumb4\", \"RightHandIndex4\", \"RightHandMiddle4\", \"RightHandRing4\", \"RightHandPinky4\", \"RightToe_End\"]:\n                newAnimDataJoint = \"%s%s\" % (New_joint_Namespace, bodyPart.nodeName)\n                if mayac.objExists(newAnimDataJoint):\n                    objectsOfInterest.append(newAnimDataJoint)\n                    DJB_ConnectAll(newAnimDataJoint, bodyPart.AnimData_Joint)\n            curJoint += 1\n        \n        ##adjust timeline to fit animation\n        #find first and last frames\n        howManyKeys = []\n        last = 0\n        highestTime = -999999999\n        lowestTime = 99999999\n        for obj in objectsOfInterest:\n            myKeys = mayac.keyframe(obj, query = True, name = True)\n            if myKeys:\n                howManyKeys = mayac.keyframe(myKeys[0], query = True, timeChange = True)\n                last = len(howManyKeys)-1\n                if howManyKeys[last] > highestTime:\n                    highestTime = howManyKeys[last]\n                if howManyKeys[0] < lowestTime:\n                    lowestTime = howManyKeys[0]\n        \n        startTime = lowestTime\n        endTime = highestTime\n        mayac.playbackOptions(minTime = startTime, maxTime = highestTime)\n        \n        OpenMaya.MGlobal.displayInfo(\"Animation Data Connected\")\n        \n        \n        \n        \n    def transferMotionToAnimDataJoints(self, incomingDataRootJoint, newStartTime = 0, mixMethod = \"insert\", directConnect_ = False): #mixMethod - insert or merge\n        mayac.currentTime(1)\n        New_joint_Namespace = DJB_findBeforeSeparator(incomingDataRootJoint, ':')\n        keyList = mayac.keyframe(\"%s.translateX\"%(incomingDataRootJoint),query = True, timeChange = True)\n        lastFrame = keyList[len(keyList)-1]\n        curJoint = 0.0\n        gMainProgressBar = mel.eval('$tmp = $gMainProgressBar');\n        if not directConnect_:\n            mayac.progressBar( gMainProgressBar,\n                           edit=True,\n                           beginProgress=True,\n                           isInterruptable=True,\n                           status='Copying Keyframes for joint %d/%d ...' % (curJoint, len(self.bodyParts)-1),\n                           maxValue=lastFrame )\n            for bodyPart in self.bodyParts:\n                if mayac.progressBar(gMainProgressBar, query=True, isCancelled=True ) :\n                    break\n                if bodyPart.nodeName == \"Root\" and self.hulaOption:\n                    if mayac.objExists(\"%sRoot\" % (New_joint_Namespace)):\n                        mayac.copyKey(\"%sRoot\" % (New_joint_Namespace), time = (0,lastFrame), hierarchy = \"none\", controlPoints = 0, shape = 1)\n                        mayac.pasteKey(bodyPart.AnimData_Joint, option = mixMethod, connect = 1, timeOffset = newStartTime, valueOffset = 0)\n                    else:\n                        mayac.copyKey(\"%sHips\" % (New_joint_Namespace), time = (0,lastFrame), hierarchy = \"none\", controlPoints = 0, shape = 1)\n                        mayac.pasteKey(bodyPart.AnimData_Joint, option = mixMethod, connect = 1, timeOffset = newStartTime, valueOffset = 0)\n                elif bodyPart.nodeName == \"Hips\" and self.hulaOption and mayac.objExists(\"%sRoot\" % (New_joint_Namespace)):\n                    mayac.copyKey(\"%sHips\" % (New_joint_Namespace), time = (0,lastFrame), hierarchy = \"none\", controlPoints = 0, shape = 1)\n                    mayac.pasteKey(bodyPart.AnimData_Joint, option = mixMethod, connect = 1, timeOffset = newStartTime, valueOffset = 0)\n                elif bodyPart.nodeName == \"Hips\" and not self.hulaOption:\n                    mayac.copyKey(\"%sHips\" % (New_joint_Namespace), time = (0,lastFrame), hierarchy = \"none\", controlPoints = 0, shape = 1)\n                    mayac.pasteKey(bodyPart.AnimData_Joint, option = mixMethod, connect = 1, timeOffset = newStartTime, valueOffset = 0)\n                elif bodyPart.nodeName not in [\"Hips\", \"HeadTop_End\", \"LeftHandThumb4\", \"LeftHandIndex4\", \"LeftHandMiddle4\", \"LeftHandRing4\", \"LeftHandPinky4\", \"LeftToe_End\", \"RightHandThumb4\", \"RightHandIndex4\", \"RightHandMiddle4\", \"RightHandRing4\", \"RightHandPinky4\", \"RightToe_End\"]:\n                    newAnimDataJoint = \"%s%s\" % (New_joint_Namespace, bodyPart.nodeName)\n                    if mayac.objExists(newAnimDataJoint):\n                        numCurves = mayac.copyKey(newAnimDataJoint, time = (0,lastFrame), hierarchy = \"none\", controlPoints = 0, shape = 1)\n                        if numCurves:\n                            mayac.pasteKey(bodyPart.AnimData_Joint, option = mixMethod, connect = 1, timeOffset = newStartTime, valueOffset = 0)\n                mayac.progressBar(gMainProgressBar, edit=True, step=1)    \n                curJoint += 1\n        mayac.progressBar(gMainProgressBar, edit=True, endProgress=True)\n        sClusters = []\n        sClusters = mayac.listConnections(incomingDataRootJoint, destination = True, type = \"skinCluster\")\n        for joint in mayac.listRelatives(incomingDataRootJoint, allDescendents = True, type = 'joint'):\n            checkClusterList = mayac.listConnections(joint, destination = True, type = \"skinCluster\")\n            if checkClusterList:\n                for checkCluster in checkClusterList:\n                    if checkCluster not in sClusters:\n                        sClusters.append(checkCluster)\n        self.origAnim = mayac.group(incomingDataRootJoint, name = \"Original_Animation_GRP\")\n        if sClusters:\n            for sCluster in sClusters:\n                shapes =  mayac.listConnections(sCluster, destination = True, type = \"mesh\")\n                if shapes:\n                    for shape in shapes:\n                        parent = mayac.listRelatives(shape, parent = True)\n                        if parent and self.origAnim not in parent:\n                            DJB_Unlock(shape)\n                            while \"Original_Animation_\" not in shape:\n                                shape = mayac.rename(shape, \"Original_Animation_%s\" % (shape))\n                            shape = mayac.parent(shape, self.origAnim)[0]\n                        if not parent:\n                            DJB_Unlock(shape)\n                            while \"Original_Animation_\" not in shape:\n                                shape = mayac.rename(shape, \"Original_Animation_%s\" % (shape))\n                            shape = mayac.parent(shape, self.origAnim)[0]\n                                \n        if not directConnect_:                    \n            #rename orig anim joints\n            for bodyPart in self.bodyParts:\n                if mayac.objExists(\"%s%s\" % (New_joint_Namespace, bodyPart.nodeName)):\n                    mayac.rename(\"%s%s\" % (New_joint_Namespace, bodyPart.nodeName), \"Original_Animation_%s\" % (bodyPart.nodeName))\n            if self.ExtraJoints:\n                for extraJoint in self.ExtraJoints:\n                    if mayac.objExists(\"%s%s\" % (New_joint_Namespace, extraJoint.nodeName)):\n                        mayac.rename(\"%s%s\" % (New_joint_Namespace, extraJoint.nodeName), \"Original_Animation_%s\" % (extraJoint.nodeName))\n            \n            mayac.parent(self.origAnim, self.Character_GRP)\n            self.origAnimation_Layer = mayac.createDisplayLayer(name = \"OrigAnimationLayer\", number = 1)\n            mayac.editDisplayLayerMembers(self.origAnimation_Layer, self.origAnim)\n            mayac.setAttr(\"%s.visibility\" %(self.origAnimation_Layer), 0)\n            mayac.setAttr(\"%s.displayType\" %(self.origAnimation_Layer), 2)\n            #update infoNode\n            pyToAttr(\"%s.origAnim\" % (self.infoNode), self.origAnim)\n            pyToAttr(\"%s.origAnimation_Layer\" % (self.infoNode), self.origAnimation_Layer)\n        \n        \n        ##adjust timeline to fit animation\n        #find first and last frames\n        howManyKeys = []\n        last = 0\n        highestTime = -999999999\n        lowestTime = 99999999\n        objectsOfInterest = []\n        for bodyPart in self.bodyParts:\n            if \"4\" not in bodyPart.nodeName and \"End\" not in bodyPart.nodeName:\n                if bodyPart.FK_CTRL:\n                    objectsOfInterest.append(bodyPart.FK_CTRL)\n                if bodyPart.IK_CTRL:\n                    objectsOfInterest.append(bodyPart.IK_CTRL)\n                if bodyPart.Options_CTRL:\n                    objectsOfInterest.append(bodyPart.Options_CTRL)\n                if bodyPart.AnimData_Joint:\n                    objectsOfInterest.append(bodyPart.AnimData_Joint)\n        objectsOfInterest.append(self.global_CTRL)\n        for obj in objectsOfInterest:\n            myKeys = mayac.keyframe(obj, query = True, name = True)\n            if myKeys:\n                howManyKeys = mayac.keyframe(myKeys[0], query = True, timeChange = True)\n                last = len(howManyKeys)-1\n                if howManyKeys[last] > highestTime:\n                    highestTime = howManyKeys[last]\n                if howManyKeys[0] < lowestTime:\n                    lowestTime = howManyKeys[0]\n        \n        startTime = lowestTime\n        endTime = highestTime\n        mayac.playbackOptions(minTime = startTime, maxTime = highestTime)\n        \n        OpenMaya.MGlobal.displayInfo(\"Animation Data Attached\")\n        \n        \n    def deleteOriginalAnimation(self):\n        mayac.delete(self.origAnim, self.origAnimation_Layer)\n        self.origAnim = None\n        self.origAnimation_Layer = None\n        pyToAttr(\"%s.origAnim\" % (self.infoNode), self.origAnim)\n        pyToAttr(\"%s.origAnimation_Layer\" % (self.infoNode), self.origAnimation_Layer)\n        \n        OpenMaya.MGlobal.displayInfo(\"Original Animation Deleted\")\n        \n    \n    \n    def bakeAnimationToControls(self, bodyPart_ = \"all\"):\n        #find first and last frames\n        howManyKeys = []\n        last = 0\n        highestTime = -999999999\n        lowestTime = 99999999\n        objectsOfInterest = []\n        for bodyPart in self.bodyParts:\n            if \"4\" not in bodyPart.nodeName and \"End\" not in bodyPart.nodeName:\n                if bodyPart.FK_CTRL:\n                    objectsOfInterest.append(bodyPart.FK_CTRL)\n                if bodyPart.IK_CTRL:\n                    objectsOfInterest.append(bodyPart.IK_CTRL)\n                if bodyPart.Options_CTRL:\n                    objectsOfInterest.append(bodyPart.Options_CTRL)\n                if bodyPart.AnimData_Joint:\n                    objectsOfInterest.append(bodyPart.AnimData_Joint)\n        objectsOfInterest.append(self.global_CTRL)\n        for obj in objectsOfInterest:\n            myKeys = mayac.keyframe(obj, query = True, name = True)\n            if myKeys:\n                howManyKeys = mayac.keyframe(myKeys[0], query = True, timeChange = True)\n                last = len(howManyKeys)-1\n                if howManyKeys[last] > highestTime:\n                    highestTime = howManyKeys[last]\n                if howManyKeys[0] < lowestTime:\n                    lowestTime = howManyKeys[0]\n        \n        startTime = lowestTime\n        endTime = highestTime\n        \n        if startTime == 99999999 and endTime == -999999999:\n            OpenMaya.MGlobal.displayError(\"No Keyframes found on Character to bake!\")\n            return None\n        \n        #create locators\n        locators = []\n        for bodyPart in self.bodyParts:\n            if \"LeftLeg\" in bodyPart.nodeName or \"RightLeg\" in bodyPart.nodeName or \"ForeArm\" in bodyPart.nodeName:\n                temp = mayac.spaceLocator(n = \"%s_locator1\" % (bodyPart.nodeName))\n                bodyPart.locator1 = temp[0]\n                mayac.setAttr(\"%s.rotateOrder\" % (bodyPart.locator1), bodyPart.rotOrder)\n                mayac.setAttr(\"%s.visibility\"%(bodyPart.locator1), 0)\n                mayac.parent(bodyPart.locator1, self.global_CTRL)\n                locators.append(bodyPart.locator1)\n                temp = mayac.pointConstraint(bodyPart.IK_BakingLOC, bodyPart.locator1)\n                bodyPart.locatorConstraint1 = temp[0]\n            if \"Foot\" not in bodyPart.nodeName:\n                temp = mayac.spaceLocator(n = \"%s_locator\" % (bodyPart.nodeName))\n                bodyPart.locator = temp[0]\n                mayac.setAttr(\"%s.rotateOrder\" % (bodyPart.locator), bodyPart.rotOrder)\n                mayac.setAttr(\"%s.visibility\"%(bodyPart.locator), 0)\n                mayac.parent(bodyPart.locator, self.global_CTRL)\n                locators.append(bodyPart.locator)\n                temp = mayac.parentConstraint(bodyPart.Bind_Joint, bodyPart.locator)\n                bodyPart.locatorConstraint = temp[0]\n            else:\n                temp = mayac.spaceLocator(n = \"%s_locator1\" % (bodyPart.nodeName))\n                bodyPart.locator1 = temp[0]\n                mayac.setAttr(\"%s.rotateOrder\" % (bodyPart.locator1), bodyPart.rotOrder)\n                mayac.setAttr(\"%s.visibility\"%(bodyPart.locator1), 0)\n                mayac.parent(bodyPart.locator1, self.global_CTRL)\n                mayac.delete(mayac.parentConstraint(bodyPart.Bind_Joint, bodyPart.locator1))\n                temp = mayac.spaceLocator(n = \"%s_locator\" % (bodyPart.nodeName))\n                bodyPart.locator = temp[0]\n                mayac.setAttr(\"%s.rotateOrder\" % (bodyPart.locator), bodyPart.rotOrder)\n                mayac.setAttr(\"%s.visibility\"%(bodyPart.locator), 0)\n                mayac.parent(bodyPart.locator, self.global_CTRL)\n                mayac.delete(mayac.parentConstraint(bodyPart.IK_BakingLOC, bodyPart.locator))\n                temp = mayac.parentConstraint(bodyPart.locator1, bodyPart.locator, maintainOffset = True)\n                bodyPart.locatorConstraint1 = temp[0]\n                \n                locators.append(bodyPart.locator)\n                locators.append(bodyPart.locator1)\n                temp = mayac.parentConstraint(bodyPart.Bind_Joint, bodyPart.locator1)\n                bodyPart.locatorConstraint = temp[0]\n                \n        #bake onto locators\n        mayac.select(clear = True)\n        mayac.bakeResults(locators, simulation = True, time = (startTime, endTime))\n        for bodyPart in self.bodyParts:\n            mayac.delete(bodyPart.locatorConstraint)\n            bodyPart.locatorConstraint = None\n            if bodyPart.locatorConstraint1:\n                mayac.delete(bodyPart.locatorConstraint1)\n                bodyPart.locatorConstraint1 = None\n        \n        #zero out controls, animJoints\n        for bodyPart in self.bodyParts:\n            if bodyPart.AnimData_Joint:\n                bodyPart.zeroToOrig(bodyPart.AnimData_Joint)\n            if bodyPart.FK_CTRL:\n                DJB_ZeroOut(bodyPart.FK_CTRL)\n                DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".AnimDataMult\", value = 1)\n                if \"Root\" in bodyPart.nodeName and self.hulaOption:\n                    DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".AnimDataMultTrans\", value = 1)\n                elif \"Hips\" in bodyPart.nodeName and not self.hulaOption:\n                    DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".AnimDataMultTrans\", value = 1)\n                if \"Head\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".InheritRotation\", value = 1)\n            if bodyPart.IK_CTRL:\n                DJB_ZeroOut(bodyPart.IK_CTRL)\n                DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".AnimDataMult\", value = 1)\n                DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ParentToGlobal\")\n                DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FollowBody\")\n                if \"Leg\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FollowFoot\")\n                if \"ForeArm\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FollowHand\")\n                if \"Foot\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FootRoll\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeTap\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeSideToSide\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeRotate\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeRoll\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".HipPivot\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".BallPivot\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToePivot\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".HipSideToSide\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".HipBackToFront\")\n            if bodyPart.Options_CTRL:\n                if \"Hand\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".FollowHand\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".ThumbCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".IndexCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".MiddleCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".RingCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".PinkyCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".Sway\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".Spread\")\n                   \n            \n    \n        #constraints\n        bakeConstraintList = []\n        bakeCTRLList = []\n        EulerList = []\n        for bodyPart in self.bodyParts:\n            if bodyPart.FK_CTRL:\n                if \"Root\" in bodyPart.nodeName:\n                    temp = mayac.parentConstraint(bodyPart.locator, bodyPart.FK_CTRL)\n                    bakeConstraintList.append(temp[0])\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".translateX\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".translateY\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".translateZ\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateX\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateY\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateZ\")\n                    \n                elif \"Hips\" in bodyPart.nodeName and not self.hulaOption:\n                    temp = mayac.parentConstraint(bodyPart.locator, bodyPart.FK_CTRL)\n                    bakeConstraintList.append(temp[0])\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".translateX\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".translateY\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".translateZ\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateX\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateY\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateZ\")\n                   \n                elif \"Foot\" in bodyPart.nodeName:\n                    temp = mayac.orientConstraint(bodyPart.locator1, bodyPart.FK_CTRL)\n                    bakeConstraintList.append(temp[0])\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateX\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateY\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateZ\")\n                    \n                else:\n                    temp = mayac.orientConstraint(bodyPart.locator, bodyPart.FK_CTRL)\n                    bakeConstraintList.append(temp[0])\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateX\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateY\")\n                    bakeCTRLList.append(bodyPart.FK_CTRL + \".rotateZ\")\n\n            if bodyPart.IK_CTRL:\n                \n                if \"ForeArm\" in bodyPart.nodeName or \"Leg\" in bodyPart.nodeName:\n                    temp = mayac.pointConstraint(bodyPart.locator1, bodyPart.IK_CTRL)\n                    bakeConstraintList.append(temp[0])\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".translateX\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".translateY\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".translateZ\")\n                else:\n                    temp = mayac.parentConstraint(bodyPart.locator, bodyPart.IK_CTRL)\n                    bakeConstraintList.append(temp[0])\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".translateX\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".translateY\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".translateZ\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".rotateX\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".rotateY\")\n                    bakeCTRLList.append(bodyPart.IK_CTRL + \".rotateZ\")\n\n                \n        #bake onto controls\n        mayac.bakeResults(bakeCTRLList, simulation = True, time = (startTime, endTime))\n        mayac.delete(bakeConstraintList)\n\n        \n        #Euler filter\n        for bodyPart in self.bodyParts:\n            if bodyPart.FK_CTRL:\n                mayac.filterCurve( '%s_rotateX'%(bodyPart.FK_CTRL), '%s_rotateY'%(bodyPart.FK_CTRL), '%s_rotateZ'%(bodyPart.FK_CTRL))\n            if bodyPart.nodeName  == \"LeftHand\" or bodyPart.nodeName  == \"RightHand\" or bodyPart.nodeName  == \"LeftFoot\" or bodyPart.nodeName  == \"RightFoot\":\n                mayac.filterCurve( '%s_rotateX'%(bodyPart.IK_CTRL), '%s_rotateY'%(bodyPart.IK_CTRL), '%s_rotateZ'%(bodyPart.IK_CTRL))\n            \n        \n        #delete garbage\n        for bodyPart in self.bodyParts:\n            mayac.delete(bodyPart.locator)\n            bodyPart.locator = None\n            if bodyPart.locator1:\n                mayac.delete(bodyPart.locator1)\n                bodyPart.locator1 = None\n                \n        #make sure animLayer1 is active\n        baseLayer = mayac.animLayer(query = True, root = True)\n        if baseLayer:\n            layers = mayac.ls(type = 'animLayer')\n            for layer in layers:\n                mel.eval('animLayerEditorOnSelect \"%s\" 0;'%(layer))\n            mel.eval('animLayerEditorOnSelect \"%s\" 1;'%(baseLayer))\n             \n        #IK Toe Tap\n        if self.rigType == \"AutoRig\":\n            mayac.copyKey(self.LeftToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateX\")\n            mayac.pasteKey(self.LeftFoot.IK_CTRL, connect = 1, attribute = \"ToeTap\")\n            mayac.copyKey(self.LeftToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateY\")\n            mayac.pasteKey(self.LeftFoot.IK_CTRL, connect = 1, attribute = \"ToeRotate\")\n            mayac.copyKey(self.LeftToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateZ\")\n            mayac.pasteKey(self.LeftFoot.IK_CTRL, connect = 1, attribute = \"ToeSideToSide\")\n            mayac.copyKey(self.RightToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateX\")\n            mayac.pasteKey(self.RightFoot.IK_CTRL, connect = 1, attribute = \"ToeTap\")\n            mayac.copyKey(self.RightToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateY\")\n            mayac.pasteKey(self.RightFoot.IK_CTRL, connect = 1, attribute = \"ToeRotate\")\n            mayac.copyKey(self.RightToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateZ\")\n            mayac.pasteKey(self.RightFoot.IK_CTRL, connect = 1, attribute = \"ToeSideToSide\")\n        elif self.rigType == \"World\":\n            mayac.copyKey(self.LeftToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateX\")\n            mayac.pasteKey(self.LeftFoot.IK_CTRL, connect = 1, attribute = \"ToeTap\")\n            mayac.scaleKey(self.LeftFoot.IK_CTRL, at='ToeTap', time=(startTime, endTime), valueScale = -1, valuePivot=0 )\n            \n            mayac.copyKey(self.LeftToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateY\")\n            mayac.pasteKey(self.LeftFoot.IK_CTRL, connect = 1, attribute = \"ToeSideToSide\")\n            mayac.copyKey(self.LeftToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateZ\")\n            mayac.pasteKey(self.LeftFoot.IK_CTRL, connect = 1, attribute = \"ToeRotate\")\n            mayac.copyKey(self.RightToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateX\")\n            mayac.pasteKey(self.RightFoot.IK_CTRL, connect = 1, attribute = \"ToeTap\")\n            mayac.scaleKey(self.RightFoot.IK_CTRL, at='ToeTap', time=(startTime, endTime), valueScale = -1, valuePivot=0 )\n            \n            mayac.copyKey(self.RightToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateY\")\n            mayac.pasteKey(self.RightFoot.IK_CTRL, connect = 1, attribute = \"ToeSideToSide\")\n            mayac.copyKey(self.RightToeBase.FK_CTRL, time = (startTime, endTime), hierarchy = \"none\", controlPoints = 0, shape = 1, attribute = \"rotateZ\")\n            mayac.pasteKey(self.RightFoot.IK_CTRL, connect = 1, attribute = \"ToeRotate\")\n            \n        OpenMaya.MGlobal.displayInfo(\"Bake Successful\")\n\n\n    def clearAnimationControls(self, bodyPart_ = \"all\"):\n        #find first and last frames\n        #find first and last frames\n        howManyKeys = []\n        last = 0\n        highestTime = -999999999\n        lowestTime = 99999999\n        objectsOfInterest = []\n        for bodyPart in self.bodyParts:\n            if \"4\" not in bodyPart.nodeName and \"End\" not in bodyPart.nodeName:\n                if bodyPart.FK_CTRL:\n                    objectsOfInterest.append(bodyPart.FK_CTRL)\n                if bodyPart.IK_CTRL:\n                    objectsOfInterest.append(bodyPart.IK_CTRL)\n                if bodyPart.Options_CTRL:\n                    objectsOfInterest.append(bodyPart.Options_CTRL)\n                if bodyPart.AnimData_Joint:\n                    objectsOfInterest.append(bodyPart.AnimData_Joint)\n        objectsOfInterest.append(self.global_CTRL)\n        for object in objectsOfInterest:\n            myKeys = mayac.keyframe(object, query = True, name = True)\n            if myKeys:\n                howManyKeys = mayac.keyframe(myKeys[0], query = True, timeChange = True)\n                last = len(howManyKeys)-1\n                if howManyKeys[last] > highestTime:\n                    highestTime = howManyKeys[last]\n                if howManyKeys[0] < lowestTime:\n                    lowestTime = howManyKeys[0]\n        \n        startTime = lowestTime\n        endTime = highestTime\n        \n        if startTime == 99999999 and endTime == -999999999:\n            OpenMaya.MGlobal.displayError(\"No Keyframes found on Character to clear!\")\n            return None\n        \n            \n            \n            \n            \n        #create locators\n        locators = []\n        temp = mayac.duplicate(self.global_CTRL, parentOnly = True)\n        fakeGlobal = temp[0]\n        mayac.setAttr(\"%s.translateX\"%(fakeGlobal), 0)\n        mayac.setAttr(\"%s.translateY\"%(fakeGlobal), 0)\n        mayac.setAttr(\"%s.translateZ\"%(fakeGlobal), 0)\n        mayac.setAttr(\"%s.rotateX\"%(fakeGlobal), 0)\n        mayac.setAttr(\"%s.rotateY\"%(fakeGlobal), 0)\n        mayac.setAttr(\"%s.rotateZ\"%(fakeGlobal), 0)\n        mayac.connectAttr(\"%s.scaleX\"%(self.global_CTRL), \"%s.scaleX\"%(fakeGlobal))\n        mayac.connectAttr(\"%s.scaleY\"%(self.global_CTRL), \"%s.scaleY\"%(fakeGlobal))\n        mayac.connectAttr(\"%s.scaleZ\"%(self.global_CTRL), \"%s.scaleZ\"%(fakeGlobal))\n        mayac.setAttr(\"%s.visibility\"%(fakeGlobal), lock = False, keyable = True)\n        mayac.setAttr(\"%s.visibility\"%(fakeGlobal), 0)\n        for bodyPart in self.bodyParts:\n            temp = mayac.spaceLocator(n = \"%s_locator\" % (bodyPart.nodeName))\n            bodyPart.locator = temp[0]\n            locators.append(bodyPart.locator)\n            mayac.setAttr(\"%s.visibility\"%(bodyPart.locator), 0)\n            mayac.parent(bodyPart.locator, self.global_CTRL)\n            temp = mayac.parentConstraint(bodyPart.Bind_Joint, bodyPart.locator)\n            bodyPart.locatorConstraint = temp[0]\n            if \"LeftLeg\" in bodyPart.nodeName or \"RightLeg\" in bodyPart.nodeName or \"ForeArm\" in bodyPart.nodeName:\n                temp = mayac.spaceLocator(n = \"%s_locator2\" % (bodyPart.nodeName))\n                bodyPart.locator2 = temp[0]\n                locators.append(bodyPart.locator2)\n                mayac.setAttr(\"%s.visibility\"%(bodyPart.locator2), 0)\n                mayac.parent(bodyPart.locator2, self.global_CTRL)\n                temp = mayac.parentConstraint(bodyPart.IK_BakingLOC, bodyPart.locator2)\n                bodyPart.locatorConstraint2 = temp[0]\n                temp = mayac.spaceLocator(n = \"%s_locator3\" % (bodyPart.nodeName))\n                bodyPart.locator3 = temp[0]\n                mayac.parent(bodyPart.locator3, fakeGlobal)\n                mayac.setAttr(\"%s.visibility\"%(bodyPart.locator3), 0)\n                locators.append(bodyPart.locator3)\n                mayac.connectAttr(\"%s.translateX\" % (bodyPart.locator2), \"%s.translateX\" % (bodyPart.locator3))\n                mayac.connectAttr(\"%s.translateY\" % (bodyPart.locator2), \"%s.translateY\" % (bodyPart.locator3))\n                mayac.connectAttr(\"%s.translateZ\" % (bodyPart.locator2), \"%s.translateZ\" % (bodyPart.locator3))\n                mayac.connectAttr(\"%s.rotateX\" % (bodyPart.locator2), \"%s.rotateX\" % (bodyPart.locator3))\n                mayac.connectAttr(\"%s.rotateY\" % (bodyPart.locator2), \"%s.rotateY\" % (bodyPart.locator3))\n                mayac.connectAttr(\"%s.rotateZ\" % (bodyPart.locator2), \"%s.rotateZ\" % (bodyPart.locator3))\n           \n            temp = mayac.spaceLocator(n = \"%s_locator1\" % (bodyPart.nodeName))\n            bodyPart.locator1 = temp[0]\n            mayac.setAttr(\"%s.visibility\"%(bodyPart.locator1), 0)\n            locators.append(bodyPart.locator1)\n            mayac.parent(bodyPart.locator1, fakeGlobal)\n            mayac.connectAttr(\"%s.translateX\" % (bodyPart.locator), \"%s.translateX\" % (bodyPart.locator1))\n            mayac.connectAttr(\"%s.translateY\" % (bodyPart.locator), \"%s.translateY\" % (bodyPart.locator1))\n            mayac.connectAttr(\"%s.translateZ\" % (bodyPart.locator), \"%s.translateZ\" % (bodyPart.locator1))\n            mayac.connectAttr(\"%s.rotateX\" % (bodyPart.locator), \"%s.rotateX\" % (bodyPart.locator1))\n            mayac.connectAttr(\"%s.rotateY\" % (bodyPart.locator), \"%s.rotateY\" % (bodyPart.locator1))\n            mayac.connectAttr(\"%s.rotateZ\" % (bodyPart.locator), \"%s.rotateZ\" % (bodyPart.locator1))\n        mayac.select(clear = True)\n            \n                \n        \n        #bake onto locators\n        mayac.bakeResults(locators, simulation = True, time = (startTime, endTime))\n        for bodyPart in self.bodyParts:\n            mayac.delete(bodyPart.locatorConstraint)\n            bodyPart.locatorConstraint = None\n            if bodyPart.locatorConstraint1:\n                mayac.delete(bodyPart.locatorConstraint1)\n                bodyPart.locatorConstraint1 = None\n            if bodyPart.locatorConstraint2:\n                mayac.delete(bodyPart.locatorConstraint2)\n                bodyPart.locatorConstraint2 = None\n            if bodyPart.locatorConstraint3:\n                mayac.delete(bodyPart.locatorConstraint3)\n                bodyPart.locatorConstraint3 = None\n                \n        \n        bakeConstraintList = []\n        bakeJointList = []\n        #zero out controls, animJoints\n        for bodyPart in self.bodyParts:\n            if bodyPart.AnimData_Joint:\n                bodyPart.zeroToOrig(bodyPart.AnimData_Joint)\n            if bodyPart.FK_CTRL:\n                DJB_ZeroOut(bodyPart.FK_CTRL)\n                DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".AnimDataMult\", value = 1)\n                if \"Root\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".AnimDataMultTrans\", value = 1)\n                elif \"Hips\" in bodyPart.nodeName and not self.hulaOption:\n                    DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".AnimDataMultTrans\", value = 1)\n                if \"Head\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.FK_CTRL + \".InheritRotation\", value = 1)\n            if bodyPart.IK_CTRL:\n                DJB_ZeroOut(bodyPart.IK_CTRL)\n                DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".AnimDataMult\", value = 1)\n                DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ParentToGlobal\")\n                DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FollowBody\")\n                if \"LeftLeg\" in bodyPart.nodeName or \"RightLeg\" in bodyPart.nodeName or \"ForeArm\" in bodyPart.nodeName:\n                    temp = mayac.pointConstraint(bodyPart.IK_CTRL, bodyPart.locator1)\n                    bodyPart.locatorConstraint1 = temp[0]\n                if \"Leg\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FollowFoot\")\n                if \"ForeArm\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FollowHand\")\n                if \"Foot\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".FootRoll\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeTap\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeSideToSide\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeRotate\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToeRoll\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".HipPivot\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".BallPivot\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".ToePivot\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".HipSideToSide\")\n                    DJB_ZeroOutAtt(bodyPart.IK_CTRL + \".HipBackToFront\")\n            if bodyPart.Options_CTRL:\n                if \"Hand\" in bodyPart.nodeName:\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".FollowHand\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".ThumbCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".IndexCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".MiddleCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".RingCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".PinkyCurl\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".Sway\")\n                    DJB_ZeroOutAtt(bodyPart.Options_CTRL + \".Spread\")\n                    \n            \n        \n        #constraints\n        for bodyPart in self.bodyParts:\n            if \"Root\" in bodyPart.nodeName and self.hulaOption:\n                temp = mayac.parentConstraint(bodyPart.locator1, bodyPart.AnimData_Joint)\n                bakeConstraintList.append(temp[0])\n                bakeJointList.append(bodyPart.AnimData_Joint + \".translateX\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".translateY\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".translateZ\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateX\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateY\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateZ\")   \n            elif \"Hips\" in  bodyPart.nodeName and not self.hulaOption:\n                temp = mayac.parentConstraint(bodyPart.locator1, bodyPart.AnimData_Joint)\n                bakeConstraintList.append(temp[0])\n                bakeJointList.append(bodyPart.AnimData_Joint + \".translateX\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".translateY\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".translateZ\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateX\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateY\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateZ\")            \n            else:\n                temp = mayac.orientConstraint(bodyPart.locator1, bodyPart.AnimData_Joint)\n                bakeConstraintList.append(temp[0])\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateX\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateY\")\n                bakeJointList.append(bodyPart.AnimData_Joint + \".rotateZ\")\n\n                \n        #bake onto joints\n        mayac.bakeResults(bakeJointList, simulation = True, time = (startTime, endTime))\n        mayac.delete(bakeConstraintList)\n        \n                \n        #Euler filter\n        for bodyPart in self.bodyParts:\n            if bodyPart.AnimData_Joint:\n                mayac.filterCurve( '%s_rotateX'%(bodyPart.AnimData_Joint), '%s_rotateY'%(bodyPart.AnimData_Joint), '%s_rotateZ'%(bodyPart.AnimData_Joint))\n\n        \n        #delete garbage\n        for bodyPart in self.bodyParts:\n            mayac.delete(bodyPart.locator)\n            bodyPart.locator = None\n            if bodyPart.locator1:\n                mayac.delete(bodyPart.locator1)\n                bodyPart.locator1 = None\n            if bodyPart.locator2:\n                mayac.delete(bodyPart.locator2)\n                bodyPart.locator2 = None\n            if bodyPart.locator3:\n                mayac.delete(bodyPart.locator3)\n                bodyPart.locator3 = None\n        #mayac.delete(fakeGlobal)\n            \n        #move PVs out a bit\n        DJB_ZeroOut(self.LeftForeArm.IK_BakingLOC)\n        DJB_ZeroOut(self.RightForeArm.IK_BakingLOC)\n        DJB_ZeroOut(self.LeftLeg.IK_BakingLOC)\n        DJB_ZeroOut(self.RightLeg.IK_BakingLOC)\n        DJB_ZeroOut(self.LeftForeArm.IK_CTRL)\n        DJB_ZeroOut(self.RightForeArm.IK_CTRL)\n        DJB_ZeroOut(self.LeftLeg.IK_CTRL)\n        DJB_ZeroOut(self.RightLeg.IK_CTRL)\n\n        selfPOS = mayac.xform(self.LeftLeg.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        parentPOS = mayac.xform(self.LeftLeg.parent.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        tempDistance = math.sqrt((selfPOS[0]-parentPOS[0])*(selfPOS[0]-parentPOS[0]) + (selfPOS[1]-parentPOS[1])*(selfPOS[1]-parentPOS[1]) + (selfPOS[2]-parentPOS[2])*(selfPOS[2]-parentPOS[2]))\n        mayac.setAttr(\"%s.translateZ\" % (self.LeftLeg.IK_CTRL), tempDistance / 2)\n        mayac.setAttr(\"%s.translateZ\" % (self.RightLeg.IK_CTRL), tempDistance / 2)\n        mayac.setAttr(\"%s.translateZ\" % (self.LeftLeg.IK_BakingLOC), tempDistance / 2)\n        mayac.setAttr(\"%s.translateZ\" % (self.RightLeg.IK_BakingLOC), tempDistance / 2)\n        selfPOS = mayac.xform(self.LeftForeArm.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        parentPOS = mayac.xform(self.LeftForeArm.parent.Bind_Joint, query = True, absolute = True, worldSpace = True, translation = True)\n        tempDistance = math.sqrt((selfPOS[0]-parentPOS[0])*(selfPOS[0]-parentPOS[0]) + (selfPOS[1]-parentPOS[1])*(selfPOS[1]-parentPOS[1]) + (selfPOS[2]-parentPOS[2])*(selfPOS[2]-parentPOS[2]))\n        if self.rigType == \"AutoRig\":\n            mayac.setAttr(\"%s.translateX\" % (self.LeftForeArm.IK_CTRL), tempDistance / 2)\n            mayac.setAttr(\"%s.translateX\" % (self.RightForeArm.IK_CTRL), tempDistance / -2)\n            mayac.setAttr(\"%s.translateX\" % (self.LeftForeArm.IK_BakingLOC), tempDistance / 2)\n            mayac.setAttr(\"%s.translateX\" % (self.RightForeArm.IK_BakingLOC), tempDistance / -2)\n        elif self.rigType == \"World\":\n            mayac.setAttr(\"%s.translateZ\" % (self.LeftForeArm.IK_CTRL), tempDistance / -2)\n            mayac.setAttr(\"%s.translateZ\" % (self.RightForeArm.IK_CTRL), tempDistance / -2)\n            mayac.setAttr(\"%s.translateZ\" % (self.LeftForeArm.IK_BakingLOC), tempDistance / -2)\n            mayac.setAttr(\"%s.translateZ\" % (self.RightForeArm.IK_BakingLOC), tempDistance / -2)\n        \n        OpenMaya.MGlobal.displayInfo(\"Un-Bake Successful\")\n        \n\n\n    def createExportSkeleton(self, keepMesh_ = False, dynamicsToFK = 0, reduceNonEssential = False, start=None, end=None, removeEndJoints=False):\n        #copy joints and mesh\n        if self.exportList:\n            for obj in self.exportList:\n                if mayac.objExists(obj):\n                    mayac.delete(obj)\n        self.exportList = []\n        self.exportListDropFrames = []\n        translateOpenList = []\n        for bodyPart in self.bodyParts:\n            if bodyPart.children:\n                if \"Root\" in bodyPart.nodeName or \"Hips\" in bodyPart.nodeName or \"Leg\" in bodyPart.nodeName or \"Foot\" in bodyPart.nodeName or \"Toe\" in bodyPart.nodeName or \"Spine\" in bodyPart.nodeName or \"Shoulder\" in bodyPart.nodeName or \"Arm\" in bodyPart.nodeName or bodyPart.nodeName == \"LeftHand\" or bodyPart.nodeName == \"RightHand\":\n                    bodyPart.duplicateJoint(\"ExportSkeleton\", jointNamespace = self.jointNamespace)\n                    self.exportList.append(bodyPart.Export_Joint)\n                else:\n                    bodyPart.duplicateJoint(\"ExportSkeleton\", jointNamespace = self.jointNamespace)\n                    self.exportListDropFrames.append(bodyPart.Export_Joint)\n            elif not removeEndJoints:\n                bodyPart.duplicateJoint(\"ExportSkeleton\", jointNamespace = self.jointNamespace)\n                self.exportListDropFrames.append(bodyPart.Export_Joint)\n            if bodyPart.translateOpen:\n                translateOpenList.append(bodyPart.Export_Joint)\n        \n        if self.ExtraJoints:\n            for node in self.ExtraJoints:\n                if node.children:\n                    node.duplicateJoint(\"ExportSkeleton\", jointNamespace = self.jointNamespace)\n                    node.Export_Joint = mayac.rename(node.Export_Joint, node.nodeName)\n                    node.Export_Joint = mayac.rename(node.Export_Joint, DJB_findAfterSeperator(node.Export_Joint,\":\"))\n                    self.exportListDropFrames.append(node.Export_Joint)\n                    if node.translateOpen:\n                        translateOpenList.append(node.Export_Joint)\n                elif node.translateOpen:\n                    node.duplicateJoint(\"ExportSkeleton\", jointNamespace = self.jointNamespace)\n                    node.Export_Joint = mayac.rename(node.Export_Joint, node.nodeName)\n                    node.Export_Joint = mayac.rename(node.Export_Joint, DJB_findAfterSeperator(node.Export_Joint,\":\"))\n                    self.exportListDropFrames.append(node.Export_Joint)\n                    translateOpenList.append(node.Export_Joint)\n                elif node.twistJoint:\n                    node.duplicateJoint(\"ExportSkeleton\", jointNamespace = self.jointNamespace)\n                    node.Export_Joint = mayac.rename(node.Export_Joint, node.nodeName)\n                    node.Export_Joint = mayac.rename(node.Export_Joint, DJB_findAfterSeperator(node.Export_Joint,\":\"))\n                    self.exportListDropFrames.append(node.Export_Joint)\n        pyToAttr(\"%s.exportList\" % (self.infoNode), self.exportList)\n        \n        #lock unneeded attributes:\n        for joint in (self.exportList + self.exportListDropFrames):\n            if \"Root\" not in joint and \"FacialAnim\" not in joint and \"Hips\" not in joint and joint not in translateOpenList:\n                DJB_LockNHide(joint, tx = True, ty = True, tz = True, rx = False, ry = False, rz = False, s = True, v = True, other = (\"jointOrientX\", \"jointOrientY\", \"jointOrientZ\", \"lockInfluenceWeights\", \"liw\"))\n            elif joint in translateOpenList:\n                DJB_LockNHide(joint, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False, s = True, v = True, other = (\"jointOrientX\", \"jointOrientY\", \"jointOrientZ\", \"lockInfluenceWeights\", \"liw\"))\n            else:\n                DJB_LockNHide(joint, tx = False, ty = False, tz = False, rx = False, ry = False, rz = False, s = True, v = True, other = (\"lockInfluenceWeights\", \"liw\"))\n        \n        #create Constraints\n        constraintList = []\n        for bodyPart in self.bodyParts:\n            if bodyPart.Bind_Joint and bodyPart.children and \"Root\" not in bodyPart.nodeName and \"Hips\" not in bodyPart.nodeName:\n                if not bodyPart.translateOpen:\n                    constraintList.append(mayac.orientConstraint(bodyPart.Bind_Joint, bodyPart.Export_Joint))\n                else:\n                    constraintList.append(mayac.parentConstraint(bodyPart.Bind_Joint, bodyPart.Export_Joint))\n            elif bodyPart.Bind_Joint and bodyPart.children:\n                constraintList.append(mayac.parentConstraint(bodyPart.Bind_Joint, bodyPart.Export_Joint))\n        if self.ExtraJoints:\n            for node in self.ExtraJoints:\n                if node.children and not node.translateOpen:\n                    constraintList.append(mayac.orientConstraint(node.Bind_Joint, node.Export_Joint))\n                elif node.translateOpen:\n                    print node.nodeName\n                    constraintList.append(mayac.parentConstraint(node.Bind_Joint, node.Export_Joint))\n                elif node.twistJoint:\n                    constraintList.append(mayac.orientConstraint(node.Bind_Joint, node.Export_Joint))\n        \n        \n        #find first and last frames\n        startTime = start\n        endTime = end\n        if startTime == None:\n            howManyKeys = []\n            last = 0\n            highestTime = -999999999\n            lowestTime = 99999999\n            objectsOfInterest = []\n            for bodyPart in self.bodyParts:\n                if \"4\" not in bodyPart.nodeName and \"End\" not in bodyPart.nodeName:\n                    if bodyPart.FK_CTRL:\n                        objectsOfInterest.append(bodyPart.FK_CTRL)\n                    if bodyPart.IK_CTRL:\n                        objectsOfInterest.append(bodyPart.IK_CTRL)\n                    if bodyPart.Options_CTRL:\n                        objectsOfInterest.append(bodyPart.Options_CTRL)\n                    if bodyPart.AnimData_Joint:\n                        objectsOfInterest.append(bodyPart.AnimData_Joint)\n            objectsOfInterest.append(self.global_CTRL)\n            for obj in objectsOfInterest:\n                myKeys = mayac.keyframe(obj, query = True, name = True)\n                if myKeys:\n                    howManyKeys = mayac.keyframe(myKeys[0], query = True, timeChange = True)\n                    last = len(howManyKeys)-1\n                    if howManyKeys[last] > highestTime:\n                        highestTime = howManyKeys[last]\n                    if howManyKeys[0] < lowestTime:\n                        lowestTime = howManyKeys[0]\n            \n            startTime = lowestTime\n            endTime = highestTime\n        highestTime = endTime\n        lowestTime = startTime\n        \n        anythingToBake = True\n        \n        if startTime == 99999999 and endTime == -999999999:\n            anythingToBake = False\n        else:\n            mayac.currentTime( lowestTime, edit=True )\n        \n            #control layer must be visible\n            controlLayer = DJB_addNameSpace(self.characterNameSpace, \"SecondaryControlLayer\")\n            if mayac.objExists(controlLayer):\n                mayac.setAttr(\"%s.visibility\" %(controlLayer), 1)\n            if dynamicsToFK:\n                if self.ExtraJoints:\n                    for node in self.ExtraJoints:\n                        if node.Options_CTRL:\n                            mayac.setKeyframe(node.Options_CTRL, attribute='FK_Dyn', t=[lowestTime + dynamicsToFK, highestTime - dynamicsToFK])\n                            mayac.setKeyframe(node.Options_CTRL, attribute='FK_Dyn', v = 0, t=[lowestTime, highestTime])\n            for i in range(int(lowestTime-.5),int(lowestTime-.5)+15):\n                mayac.currentTime( i, edit=True )\n        \n        \n        #bake animation to joints\n        mayac.select(clear = True)\n        if anythingToBake and self.exportList:\n            mayac.bakeResults(self.exportList + self.exportListDropFrames, simulation = True, time = (startTime, endTime), sampleBy = 1.0)\n        for constraint in constraintList:\n            mayac.delete(constraint)\n        \n        if anythingToBake:\n        \n            if self.exportListDropFrames:\n                if reduceNonEssential:\n                    for jointNum in self.exportListDropFrames:\n                        animCurves = []\n                        temp = mayac.listConnections( '%s.tx' % (jointNum), d=False, s=True )\n                        if temp:\n                            animCurves.append(temp[0])\n                        temp = mayac.listConnections( '%s.ty' % (jointNum), d=False, s=True )\n                        if temp:\n                            animCurves.append(temp[0])\n                        temp = mayac.listConnections( '%s.tz' % (jointNum), d=False, s=True )\n                        if temp:\n                            animCurves.append(temp[0])\n                        temp = mayac.listConnections( '%s.rx' % (jointNum), d=False, s=True )\n                        if temp:\n                            animCurves.append(temp[0])\n                        temp = mayac.listConnections( '%s.ry' % (jointNum), d=False, s=True )\n                        if temp:\n                            animCurves.append(temp[0])\n                        temp = mayac.listConnections( '%s.rz' % (jointNum), d=False, s=True )\n                        if temp:\n                            animCurves.append(temp[0])\n                        if animCurves:\n                            for curve in animCurves:\n                                mayac.filterCurve(curve, f = \"simplify\", tol = .015, timeTolerance = .05)\n            self.exportList += self.exportListDropFrames\n        \n        \n        #unlock all attributes:\n        for joint in (self.exportList+self.exportListDropFrames):\n            for attr in [\"filmboxTypeID\"]:\n                if mayac.objExists(\"%s.%s\"%(joint,attr)):\n                    mayac.setAttr(\"%s.%s\"%(joint,attr), lock = False, keyable = True)\n                    mayac.deleteAttr(\"%s.%s\"%(joint,attr))\n            for attr in [\"lockInfluenceWeights\",\"liw\"]:\n                if mayac.objExists(\"%s.%s\"%(joint,attr)):\n                    mayac.setAttr(\"%s.%s\"%(joint,attr), lock = False, keyable = True)\n            DJB_Unlock(joint)\n            mayac.setAttr(\"%s.jointOrientX\" % (joint), lock = False, keyable = True)\n            mayac.setAttr(\"%s.jointOrientY\" % (joint), lock = False, keyable = True)\n            mayac.setAttr(\"%s.jointOrientZ\" % (joint), lock = False, keyable = True)\n            \n        #add mesh\n        if keepMesh_:\n            print \"KEEPING MESH!!!\"\n            #clean up attrs on joints that may cause issues\n            \n            self.blendShapeTrackers = [] \n            for i in range(len(self.mesh)):\n                print self.mesh[i]\n                oldSkin = mayac.listConnections(self.characterNameSpace + self.mesh[i], destination = True, type = \"skinCluster\")\n                if oldSkin:\n                    oldSkin = oldSkin[0]\n                else:  #special case if there are deformers on top of rig and skinCluster is no longer directly connected\n                    connections = mayac.listConnections((self.characterNameSpace + self.mesh[i]), destination = True)\n                    for connection in connections:\n                        if \"skinCluster\" in connection:\n                            oldSkin = connection[:-3]\n                \n                blendshapeTrack = None\n                isBlendShape = mayac.listConnections(self.mesh[i], d=True, type='blendShape')\n                if not isBlendShape:\n                    print \"its a real boy!\"    \n                    #Keep track of blendshapes and zero out\n                    meshConnections = mayac.listConnections(self.mesh[i], type = \"objectSet\")\n                    if meshConnections:\n                        meshConnections = set(meshConnections)\n                        autoKeyframeState = mayac.autoKeyframe(q=True, state=True)\n                        mayac.autoKeyframe(state=False)   \n                        for con in meshConnections:\n                            blendShapeCons = mayac.listConnections(con, type = \"blendShape\")\n                            if blendShapeCons:\n                                for blendShapeNode in blendShapeCons:\n                                    blendshapeTrack = blendShapeTracker(blendShapeNode, self.mesh[i])\n                                    self.blendShapeTrackers.append(blendshapeTrack)\n                \n                                     \n                    duplicatedMesh = mayac.duplicate(self.characterNameSpace + self.mesh[i], renameChildren = True)[0]\n                    shapeNode = mayac.listRelatives(duplicatedMesh, children = True, type = \"shape\", fullPath = True)[0]\n                    oldTransform = mayac.listRelatives(self.characterNameSpace + self.mesh[i], parent = True)[0]\n                    DJB_Unlock(duplicatedMesh)\n                    DJB_Unlock(oldTransform)\n                    isItLocked = mayac.getAttr(\"%s.visibility\" % (oldTransform))\n                    mayac.setAttr(\"%s.visibility\" % (oldTransform), 1)\n                    mayac.setAttr(\"%s.visibility\" % (self.characterNameSpace + self.mesh[i]), 1)\n                    mayac.setAttr(\"%s.visibility\" % (duplicatedMesh), 1)\n                    mayac.setAttr(\"%s.visibility\" % (shapeNode), 1)\n                    mayac.parent(duplicatedMesh, world = True)\n                    duplicatedMesh = mayac.rename(duplicatedMesh, self.original_Mesh_Names[i])\n                    self.exportList.append(duplicatedMesh)\n                    mayac.disconnectAttr(\"%s.drawInfo\" % (self.Mesh_Layer), \"%s.drawOverride\" % (duplicatedMesh))\n                    shapeNode = mayac.listRelatives(duplicatedMesh, children = True, type = \"shape\", fullPath = True)[0]\n                    mayac.disconnectAttr(\"%s.drawInfo\" % (self.Mesh_Layer), \"%s.drawOverride\" % (shapeNode))\n                    connections = mayac.listConnections(\"%s.instObjGroups[0]\" % (shapeNode), destination=True, plugs=True)\n                    if connections:\n                        mayac.disconnectAttr(\"%s.instObjGroups[0]\" % (shapeNode), connections[0])\n                    if oldSkin:\n                        newSkin = None\n                        if self.hulaOption:\n                            newSkin = mayac.skinCluster( self.Root.Export_Joint, duplicatedMesh)[0]\n                        else:\n                            newSkin = mayac.skinCluster( self.Hips.Export_Joint, duplicatedMesh)[0]\n                        mayac.copySkinWeights( ss= oldSkin, ds= newSkin, noMirror=True )\n                    mayac.setAttr(\"%s.visibility\" % (oldTransform), isItLocked)\n                    mayac.setAttr(\"%s.visibility\" % (self.characterNameSpace + self.mesh[i]), isItLocked)\n                    mayac.setAttr(\"%s.visibility\" % (duplicatedMesh), isItLocked)\n                    mayac.setAttr(\"%s.visibility\" % (shapeNode), isItLocked)\n                    \n                    #Handle Blendshape creation and connections\n                    if blendshapeTrack:\n                        autoKeyframeState = mayac.autoKeyframe(q=True, state=True)\n                        mayac.autoKeyframe(state=False)   \n                        blendshapeTrack.duplicate(duplicatedMesh)                                \n                        mayac.autoKeyframe(state=autoKeyframeState)  \n            #Bake Blendshapes and add to exportList\n            if self.blendShapeTrackers:\n                bakeList = []\n                for tracker in self.blendShapeTrackers:\n                    bakeList += tracker.bakeAttrs\n                    for attrTracker in tracker.blendShapeAttrTrackers:\n                        self.exportList.append(attrTracker.newGeo)\n                if anythingToBake:\n                    mayac.bakeResults(bakeList, simulation = True, time = (startTime, endTime), sampleBy = 1.0)\n        \n        \n        pyToAttr(\"%s.exportList\" % (self.infoNode), self.exportList)\n        return self.exportList\n        \n        \n    def exportSkeleton(self, fileName = None):\n        mayac.select(self.exportList+self.exportListDropFrames, replace = True)\n        if not fileName:\n            mayac.ExportSelection()\n        else:\n            melLine = 'FBXExport -f \"%s.fbx\" -s' % (fileName)\n            mel.eval(melLine)\n        mayac.delete(self.exportList)\n        self.exportList = []\n        if self.blendShapeTrackers:\n            for tracker in self.blendShapeTrackers:\n                tracker.restoreScene()\n    \n    def dynamicsStartEndPoseKeys(self, dynamicsToFK = 0):\n        highestTime = -999999999\n        lowestTime = 99999999\n        objectsOfInterest = []\n        for bodyPart in self.bodyParts:\n            if \"4\" not in bodyPart.nodeName and \"End\" not in bodyPart.nodeName:\n                if bodyPart.FK_CTRL:\n                    objectsOfInterest.append(bodyPart.FK_CTRL)\n                if bodyPart.IK_CTRL:\n                    objectsOfInterest.append(bodyPart.IK_CTRL)\n                if bodyPart.Options_CTRL:\n                    objectsOfInterest.append(bodyPart.Options_CTRL)\n                if bodyPart.AnimData_Joint:\n                    objectsOfInterest.append(bodyPart.AnimData_Joint)\n        objectsOfInterest.append(self.global_CTRL)\n        for obj in objectsOfInterest:\n            myKeys = mayac.keyframe(obj, query = True, name = True)\n            if myKeys:\n                howManyKeys = mayac.keyframe(myKeys[0], query = True, timeChange = True)\n                last = len(howManyKeys)-1\n                if howManyKeys[last] > highestTime:\n                    highestTime = howManyKeys[last]\n                if howManyKeys[0] < lowestTime:\n                    lowestTime = howManyKeys[0]\n        \n        startTime = lowestTime\n        endTime = highestTime\n        \n        if dynamicsToFK:\n            if self.ExtraJoints:\n                for node in self.ExtraJoints:\n                    if node.Options_CTRL:\n                        mayac.setKeyframe(node.Options_CTRL, attribute='FK_Dyn', t=[lowestTime + dynamicsToFK, highestTime - dynamicsToFK])\n                        mayac.setKeyframe(node.Options_CTRL, attribute='FK_Dyn', v = 0, t=[lowestTime, highestTime])\n    \n    #for early version\n    def deleteExportSkeleton(self):\n        if self.exportList:\n            mayac.select(self.exportList, replace = True)\n            mayac.delete()\n        self.exportList = None\n        pyToAttr(\"%s.exportList\" % (self.infoNode), self.exportList)\n\n\n\n    def writeInfoNode(self):\n        self.infoNode = mayac.createNode(\"transform\", name = \"MIXAMO_CHARACTER_infoNode\")\n        pyToAttr(\"%s.ExtraJoints\" % (self.infoNode), self.ExtraJoints)\n        pyToAttr(\"%s.numExtraJointChains\" % (self.infoNode), self.numExtraJointChains)\n        \n        \n        pyToAttr(\"%s.name\" % (self.infoNode), self.name)\n        pyToAttr(\"%s.mesh\" % (self.infoNode), self.mesh)\n        pyToAttr(\"%s.original_Mesh_Names\" % (self.infoNode), self.original_Mesh_Names)\n        pyToAttr(\"%s.jointNamespace\" % (self.infoNode), self.jointNamespace)\n        pyToAttr(\"%s.rigType\" % (self.infoNode), self.rigType)\n        pyToAttr(\"%s.BoundingBox\" % (self.infoNode), self.BoundingBox)\n        pyToAttr(\"%s.Root\" % (self.infoNode), self.Root.writeInfoNode())\n        pyToAttr(\"%s.Hips\" % (self.infoNode), self.Hips.writeInfoNode())\n        pyToAttr(\"%s.Spine\" % (self.infoNode), self.Spine.writeInfoNode())\n        pyToAttr(\"%s.Spine1\" % (self.infoNode), self.Spine1.writeInfoNode())\n        pyToAttr(\"%s.Spine2\" % (self.infoNode), self.Spine2.writeInfoNode())\n        if self.Spine3:\n            pyToAttr(\"%s.Spine3\" % (self.infoNode), self.Spine3.writeInfoNode())\n        pyToAttr(\"%s.Neck\" % (self.infoNode), self.Neck.writeInfoNode())\n        pyToAttr(\"%s.Neck1\" % (self.infoNode), self.Neck1.writeInfoNode())\n        pyToAttr(\"%s.Head\" % (self.infoNode), self.Head.writeInfoNode())\n        pyToAttr(\"%s.HeadTop_End\" % (self.infoNode), self.HeadTop_End.writeInfoNode())\n        pyToAttr(\"%s.LeftShoulder\" % (self.infoNode), self.LeftShoulder.writeInfoNode())\n        pyToAttr(\"%s.LeftArm\" % (self.infoNode), self.LeftArm.writeInfoNode())\n        pyToAttr(\"%s.LeftForeArm\" % (self.infoNode), self.LeftForeArm.writeInfoNode())\n        pyToAttr(\"%s.LeftHand\" % (self.infoNode), self.LeftHand.writeInfoNode())\n        pyToAttr(\"%s.LeftHandThumb1\" % (self.infoNode), self.LeftHandThumb1.writeInfoNode())\n        pyToAttr(\"%s.LeftHandThumb2\" % (self.infoNode), self.LeftHandThumb2.writeInfoNode())\n        pyToAttr(\"%s.LeftHandThumb3\" % (self.infoNode), self.LeftHandThumb3.writeInfoNode())\n        pyToAttr(\"%s.LeftHandThumb4\" % (self.infoNode), self.LeftHandThumb4.writeInfoNode())\n        pyToAttr(\"%s.LeftHandIndex1\" % (self.infoNode), self.LeftHandIndex1.writeInfoNode())\n        pyToAttr(\"%s.LeftHandIndex2\" % (self.infoNode), self.LeftHandIndex2.writeInfoNode())\n        pyToAttr(\"%s.LeftHandIndex3\" % (self.infoNode), self.LeftHandIndex3.writeInfoNode())\n        pyToAttr(\"%s.LeftHandIndex4\" % (self.infoNode), self.LeftHandIndex4.writeInfoNode())\n        pyToAttr(\"%s.LeftHandMiddle1\" % (self.infoNode), self.LeftHandMiddle1.writeInfoNode())\n        pyToAttr(\"%s.LeftHandMiddle2\" % (self.infoNode), self.LeftHandMiddle2.writeInfoNode())\n        pyToAttr(\"%s.LeftHandMiddle3\" % (self.infoNode), self.LeftHandMiddle3.writeInfoNode())\n        pyToAttr(\"%s.LeftHandMiddle4\" % (self.infoNode), self.LeftHandMiddle4.writeInfoNode())\n        pyToAttr(\"%s.LeftHandRing1\" % (self.infoNode), self.LeftHandRing1.writeInfoNode())\n        pyToAttr(\"%s.LeftHandRing2\" % (self.infoNode), self.LeftHandRing2.writeInfoNode())\n        pyToAttr(\"%s.LeftHandRing3\" % (self.infoNode), self.LeftHandRing3.writeInfoNode())\n        pyToAttr(\"%s.LeftHandRing4\" % (self.infoNode), self.LeftHandRing4.writeInfoNode())\n        pyToAttr(\"%s.LeftHandPinky1\" % (self.infoNode), self.LeftHandPinky1.writeInfoNode())\n        pyToAttr(\"%s.LeftHandPinky2\" % (self.infoNode), self.LeftHandPinky2.writeInfoNode())\n        pyToAttr(\"%s.LeftHandPinky3\" % (self.infoNode), self.LeftHandPinky3.writeInfoNode())\n        pyToAttr(\"%s.LeftHandPinky4\" % (self.infoNode), self.LeftHandPinky4.writeInfoNode())\n        pyToAttr(\"%s.RightShoulder\" % (self.infoNode), self.RightShoulder.writeInfoNode())\n        pyToAttr(\"%s.RightArm\" % (self.infoNode), self.RightArm.writeInfoNode())\n        pyToAttr(\"%s.RightForeArm\" % (self.infoNode), self.RightForeArm.writeInfoNode())\n        pyToAttr(\"%s.RightHand\" % (self.infoNode), self.RightHand.writeInfoNode())\n        pyToAttr(\"%s.RightHandThumb1\" % (self.infoNode), self.RightHandThumb1.writeInfoNode())\n        pyToAttr(\"%s.RightHandThumb2\" % (self.infoNode), self.RightHandThumb2.writeInfoNode())\n        pyToAttr(\"%s.RightHandThumb3\" % (self.infoNode), self.RightHandThumb3.writeInfoNode())\n        pyToAttr(\"%s.RightHandThumb4\" % (self.infoNode), self.RightHandThumb4.writeInfoNode())\n        pyToAttr(\"%s.RightHandIndex1\" % (self.infoNode), self.RightHandIndex1.writeInfoNode())\n        pyToAttr(\"%s.RightHandIndex2\" % (self.infoNode), self.RightHandIndex2.writeInfoNode())\n        pyToAttr(\"%s.RightHandIndex3\" % (self.infoNode), self.RightHandIndex3.writeInfoNode())\n        pyToAttr(\"%s.RightHandIndex4\" % (self.infoNode), self.RightHandIndex4.writeInfoNode())\n        pyToAttr(\"%s.RightHandMiddle1\" % (self.infoNode), self.RightHandMiddle1.writeInfoNode())\n        pyToAttr(\"%s.RightHandMiddle2\" % (self.infoNode), self.RightHandMiddle2.writeInfoNode())\n        pyToAttr(\"%s.RightHandMiddle3\" % (self.infoNode), self.RightHandMiddle3.writeInfoNode())\n        pyToAttr(\"%s.RightHandMiddle4\" % (self.infoNode), self.RightHandMiddle4.writeInfoNode())\n        pyToAttr(\"%s.RightHandRing1\" % (self.infoNode), self.RightHandRing1.writeInfoNode())\n        pyToAttr(\"%s.RightHandRing2\" % (self.infoNode), self.RightHandRing2.writeInfoNode())\n        pyToAttr(\"%s.RightHandRing3\" % (self.infoNode), self.RightHandRing3.writeInfoNode())\n        pyToAttr(\"%s.RightHandRing4\" % (self.infoNode), self.RightHandRing4.writeInfoNode())\n        pyToAttr(\"%s.RightHandPinky1\" % (self.infoNode), self.RightHandPinky1.writeInfoNode())\n        pyToAttr(\"%s.RightHandPinky2\" % (self.infoNode), self.RightHandPinky2.writeInfoNode())\n        pyToAttr(\"%s.RightHandPinky3\" % (self.infoNode), self.RightHandPinky3.writeInfoNode())\n        pyToAttr(\"%s.RightHandPinky4\" % (self.infoNode), self.RightHandPinky4.writeInfoNode())\n        pyToAttr(\"%s.LeftUpLeg\" % (self.infoNode), self.LeftUpLeg.writeInfoNode())\n        pyToAttr(\"%s.LeftLeg\" % (self.infoNode), self.LeftLeg.writeInfoNode())\n        pyToAttr(\"%s.LeftFoot\" % (self.infoNode), self.LeftFoot.writeInfoNode())\n        pyToAttr(\"%s.LeftToeBase\" % (self.infoNode), self.LeftToeBase.writeInfoNode())\n        pyToAttr(\"%s.LeftToe_End\" % (self.infoNode), self.LeftToe_End.writeInfoNode())\n        pyToAttr(\"%s.RightUpLeg\" % (self.infoNode), self.RightUpLeg.writeInfoNode())\n        pyToAttr(\"%s.RightLeg\" % (self.infoNode), self.RightLeg.writeInfoNode())\n        pyToAttr(\"%s.RightFoot\" % (self.infoNode), self.RightFoot.writeInfoNode())\n        pyToAttr(\"%s.RightToeBase\" % (self.infoNode), self.RightToeBase.writeInfoNode())\n        pyToAttr(\"%s.RightToe_End\" % (self.infoNode), self.RightToe_End.writeInfoNode())\n        \n        mayac.parent(self.infoNode, self.Misc_GRP)\n        DJB_LockNHide(self.infoNode)\n        for bodyPart in (self.Root, self.Hips, self.Spine, self.Spine1, self.Spine2, self.Spine3, self.Neck, self.Neck1, self.Head, self.HeadTop_End, self.LeftShoulder, \n                              self.LeftArm, self.LeftForeArm, self.LeftHand, self.LeftHandThumb1, self.LeftHandThumb2, self.LeftHandThumb3, \n                              self.LeftHandThumb4, self.LeftHandIndex1, self.LeftHandIndex2, self.LeftHandIndex3, self.LeftHandIndex4,\n                              self.LeftHandMiddle1, self.LeftHandMiddle2, self.LeftHandMiddle3, self.LeftHandMiddle4, self.LeftHandRing1,\n                              self.LeftHandRing2, self.LeftHandRing3, self.LeftHandRing4, self.LeftHandPinky1, self.LeftHandPinky2, \n                              self.LeftHandPinky3, self.LeftHandPinky4, self.RightShoulder, self.RightArm, self.RightForeArm, \n                              self.RightHand, self.RightHandThumb1, self.RightHandThumb2, self.RightHandThumb3, \n                              self.RightHandThumb4, self.RightHandIndex1, self.RightHandIndex2, self.RightHandIndex3, self.RightHandIndex4,\n                              self.RightHandMiddle1, self.RightHandMiddle2, self.RightHandMiddle3, self.RightHandMiddle4, self.RightHandRing1,\n                              self.RightHandRing2, self.RightHandRing3, self.RightHandRing4, self.RightHandPinky1, self.RightHandPinky2, \n                              self.RightHandPinky3, self.RightHandPinky4, self.LeftUpLeg, self.LeftLeg, self.LeftFoot, self.LeftToeBase,\n                              self.LeftToe_End, self.RightUpLeg, self.RightLeg, self.RightFoot, self.RightToeBase, self.RightToe_End):\n            mayac.parent(bodyPart.infoNode, self.Misc_GRP)\n            DJB_LockNHide(bodyPart.infoNode)\n\n        pyToAttr(\"%s.proportions\" % (self.infoNode), self.proportions)\n        pyToAttr(\"%s.defaultControlScale\" % (self.infoNode), self.defaultControlScale)\n        pyToAttr(\"%s.Character_GRP\" % (self.infoNode), self.Character_GRP)\n        pyToAttr(\"%s.global_CTRL\" % (self.infoNode), self.global_CTRL)\n        pyToAttr(\"%s.CTRL_GRP\" % (self.infoNode), self.CTRL_GRP)\n        pyToAttr(\"%s.Joint_GRP\" % (self.infoNode), self.Joint_GRP)\n        pyToAttr(\"%s.AnimData_Joint_GRP\" % (self.infoNode), self.AnimData_Joint_GRP)\n        pyToAttr(\"%s.Bind_Joint_GRP\" % (self.infoNode), self.Bind_Joint_GRP)\n        pyToAttr(\"%s.Mesh_GRP\" % (self.infoNode), self.Mesh_GRP)\n        pyToAttr(\"%s.Misc_GRP\" % (self.infoNode), self.Misc_GRP)\n        pyToAttr(\"%s.LeftArm_Switch_Reverse\" % (self.infoNode), self.LeftArm_Switch_Reverse)\n        pyToAttr(\"%s.RightArm_Switch_Reverse\" % (self.infoNode), self.RightArm_Switch_Reverse)\n        pyToAttr(\"%s.LeftLeg_Switch_Reverse\" % (self.infoNode), self.LeftLeg_Switch_Reverse)\n        pyToAttr(\"%s.RightLeg_Switch_Reverse\" % (self.infoNode), self.RightLeg_Switch_Reverse)\n        pyToAttr(\"%s.Bind_Joint_SelectSet\" % (self.infoNode), self.Bind_Joint_SelectSet)\n        pyToAttr(\"%s.AnimData_Joint_SelectSet\" % (self.infoNode), self.AnimData_Joint_SelectSet)\n        pyToAttr(\"%s.Controls_SelectSet\" % (self.infoNode), self.Controls_SelectSet)\n        pyToAttr(\"%s.Geo_SelectSet\" % (self.infoNode), self.Geo_SelectSet)\n        pyToAttr(\"%s.Left_Toe_IK_AnimData_GRP\" % (self.infoNode), self.Left_Toe_IK_AnimData_GRP)\n        pyToAttr(\"%s.Left_Toe_IK_CTRL\" % (self.infoNode), self.Left_Toe_IK_CTRL)\n        pyToAttr(\"%s.Left_ToeBase_IK_AnimData_GRP\" % (self.infoNode), self.Left_ToeBase_IK_AnimData_GRP)\n        pyToAttr(\"%s.Left_IK_ToeBase_animData_MultNode\" % (self.infoNode), self.Left_IK_ToeBase_animData_MultNode)\n        pyToAttr(\"%s.Left_ToeBase_IK_CTRL\" % (self.infoNode), self.Left_ToeBase_IK_CTRL)\n        pyToAttr(\"%s.Left_Ankle_IK_AnimData_GRP\" % (self.infoNode), self.Left_Ankle_IK_AnimData_GRP)\n        pyToAttr(\"%s.Left_Ankle_IK_CTRL\" % (self.infoNode), self.Left_Ankle_IK_CTRL)\n        pyToAttr(\"%s.Left_ToeBase_IkHandle\" % (self.infoNode), self.Left_ToeBase_IkHandle)\n        pyToAttr(\"%s.Left_ToeEnd_IkHandle\" % (self.infoNode), self.Left_ToeEnd_IkHandle)\n        pyToAttr(\"%s.Right_Toe_IK_AnimData_GRP\" % (self.infoNode), self.Right_Toe_IK_AnimData_GRP)\n        pyToAttr(\"%s.Right_Toe_IK_CTRL\" % (self.infoNode), self.Right_Toe_IK_CTRL)\n        pyToAttr(\"%s.Right_ToeBase_IK_AnimData_GRP\" % (self.infoNode), self.Right_ToeBase_IK_AnimData_GRP)\n        pyToAttr(\"%s.Right_IK_ToeBase_animData_MultNode\" % (self.infoNode), self.Right_IK_ToeBase_animData_MultNode)\n        pyToAttr(\"%s.Right_ToeBase_IK_CTRL\" % (self.infoNode), self.Right_ToeBase_IK_CTRL)\n        pyToAttr(\"%s.Right_Ankle_IK_AnimData_GRP\" % (self.infoNode), self.Right_Ankle_IK_AnimData_GRP)\n        pyToAttr(\"%s.Right_Ankle_IK_CTRL\" % (self.infoNode), self.Right_Ankle_IK_CTRL)\n        pyToAttr(\"%s.Right_ToeBase_IkHandle\" % (self.infoNode), self.Right_ToeBase_IkHandle)\n        pyToAttr(\"%s.Right_ToeEnd_IkHandle\" % (self.infoNode), self.Right_ToeEnd_IkHandle)\n        pyToAttr(\"%s.LeftHand_CTRLs_GRP\" % (self.infoNode), self.LeftHand_CTRLs_GRP)\n        pyToAttr(\"%s.RightHand_CTRLs_GRP\" % (self.infoNode), self.RightHand_CTRLs_GRP)\n        pyToAttr(\"%s.LeftFoot_FootRoll_MultNode\" % (self.infoNode), self.LeftFoot_FootRoll_MultNode)\n        pyToAttr(\"%s.LeftFoot_ToeRoll_MultNode\" % (self.infoNode), self.LeftFoot_ToeRoll_MultNode)\n        pyToAttr(\"%s.RightFoot_FootRoll_MultNode\" % (self.infoNode), self.RightFoot_FootRoll_MultNode)\n        pyToAttr(\"%s.RightFoot_ToeRoll_MultNode\" % (self.infoNode), self.RightFoot_ToeRoll_MultNode)\n        pyToAttr(\"%s.RightFoot_HipPivot_MultNode\" % (self.infoNode), self.RightFoot_HipPivot_MultNode)\n        pyToAttr(\"%s.RightFoot_BallPivot_MultNode\" % (self.infoNode), self.RightFoot_BallPivot_MultNode)\n        pyToAttr(\"%s.RightFoot_ToePivot_MultNode\" % (self.infoNode), self.RightFoot_ToePivot_MultNode)\n        pyToAttr(\"%s.RightFoot_HipSideToSide_MultNode\" % (self.infoNode), self.RightFoot_HipSideToSide_MultNode)\n        pyToAttr(\"%s.RightFoot_ToeRotate_MultNode\" % (self.infoNode), self.RightFoot_ToeRotate_MultNode)\n        pyToAttr(\"%s.IK_Dummy_Joint_GRP\" % (self.infoNode), self.IK_Dummy_Joint_GRP)\n        pyToAttr(\"%s.LeftHand_grandparent_Constraint\" % (self.infoNode), self.LeftHand_grandparent_Constraint)\n        pyToAttr(\"%s.LeftHand_grandparent_Constraint_Reverse\" % (self.infoNode), self.LeftHand_grandparent_Constraint_Reverse)\n        pyToAttr(\"%s.RightHand_grandparent_Constraint\" % (self.infoNode), self.RightHand_grandparent_Constraint)\n        pyToAttr(\"%s.RightHand_grandparent_Constraint_Reverse\" % (self.infoNode), self.RightHand_grandparent_Constraint_Reverse)\n        pyToAttr(\"%s.LeftForeArm_grandparent_Constraint\" % (self.infoNode), self.LeftForeArm_grandparent_Constraint)\n        pyToAttr(\"%s.LeftForeArm_grandparent_Constraint_Reverse\" % (self.infoNode), self.LeftForeArm_grandparent_Constraint_Reverse)\n        pyToAttr(\"%s.RightForeArm_grandparent_Constraint\" % (self.infoNode), self.RightForeArm_grandparent_Constraint)\n        pyToAttr(\"%s.RightForeArm_grandparent_Constraint_Reverse\" % (self.infoNode), self.RightForeArm_grandparent_Constraint_Reverse)\n        pyToAttr(\"%s.origAnim\" % (self.infoNode), self.origAnim)\n        pyToAttr(\"%s.origAnimation_Layer\" % (self.infoNode), self.origAnimation_Layer)\n        pyToAttr(\"%s.Mesh_Layer\" % (self.infoNode), self.Mesh_Layer)\n        pyToAttr(\"%s.Bind_Joint_Layer\" % (self.infoNode), self.Bind_Joint_Layer)\n        pyToAttr(\"%s.hulaOption\" % (self.infoNode), self.hulaOption)\n        pyToAttr(\"%s.exportList\" % (self.infoNode), self.exportList)\n        pyToAttr(\"%s.fingerFlip\" % (self.infoNode), self.fingerFlip)\n        \n    \n    def remakeMeshInfoNode(self):\n        joints = []\n        for bodyPart in self.bodyParts:\n            if bodyPart.Bind_Joint:\n                if mayac.objExists(bodyPart.Bind_Joint):\n                    joints.append(bodyPart.Bind_Joint)\n        meshes = []\n        for skin in mayac.listConnections(joints,type='skinCluster'):  \n            if skin:  \n                geos = mayac.skinCluster(skin,query=True,geometry=True)\n                for geo in geos:\n                    if geo not in meshes:\n                        meshes.append(geo)\n        transformNames = []\n        for geo in meshes:\n            if \"ShapeOrig\" not in geo and \"Bounding_Box_Override_Cube\" not in geo:\n                transform = mayac.listRelatives(geo, parent = True)[0]\n                while transform.find(\"Mesh_\"[0]) != -1:\n                    transform = transform[5:len(transform)] #...hopefully they shouldn't start with Mesh_\n                transformNames.append(transform)\n        self.mesh = meshes\n        self.original_Mesh_Names = transformNames\n        pyToAttr(\"%s.mesh\" % (self.infoNode), self.mesh)\n        pyToAttr(\"%s.original_Mesh_Names\" % (self.infoNode), self.original_Mesh_Names)\n        OpenMaya.MGlobal.displayInfo(\"Process Complete\")\n        \n        \n        \n    def makeExtraJointsInfoNode(self, joints):\n        newExtraJoints = []\n        #new characterNode for each joint\n        if self.numExtraJointChains:\n            self.numExtraJointChains += 1\n        else:\n            self.numExtraJointChains = 1\n        for i in range(len(joints)):\n            parentJoint = mayac.listRelatives(joints[i], parent = True)[0]\n            if i == 0:\n                ParentBodyPart = None\n                for bodyPart in self.bodyParts:\n                    if parentJoint == bodyPart.Bind_Joint:\n                        ParentBodyPart = bodyPart\n                if not ParentBodyPart:\n                    for extraJoint in self.ExtraJoints:\n                        if parentJoint == extraJoint.Bind_Joint:\n                            ParentBodyPart = extraJoint\n                newExtraJoints.append(DJB_CharacterNode(joints[i], parent = ParentBodyPart, twistJoint_ = True, translateOpen_ = True))\n                jointIndex = len(newExtraJoints)-1\n            else:\n                newExtraJoints.append(DJB_CharacterNode(joints[i], parent = newExtraJoints[jointIndex], twistJoint_ = True, translateOpen_ = True))\n                jointIndex = len(newExtraJoints)-1\n\n        #infoNode stuff\n        for i in range(len(joints)):\n            newExtraJoints[i].writeInfoNode()\n            mayac.parent(newExtraJoints[i].infoNode, self.Misc_GRP)\n        infoNodes = []\n        if not self.ExtraJoints:\n            self.ExtraJoints = []\n        else:\n            infoNodes = attrToPy(\"%s.ExtraJoints\" % (self.infoNode))\n        if not infoNodes:\n            infoNodes = []\n        for joint in newExtraJoints:\n            self.ExtraJoints.append(joint)\n            infoNodes.append(joint.infoNode)\n        pyToAttr(\"%s.ExtraJoints\" % (self.infoNode), infoNodes)\n        OpenMaya.MGlobal.displayInfo(\"Process Complete\")\n        \n    def makeDynamicChainRig(self, joints, dynamic_ = \"ZV\", control_ = \"FK\"):\n        newExtraJoints = []\n        #new characterNode for each joint\n        if self.numExtraJointChains:\n            self.numExtraJointChains += 1\n        else:\n            self.numExtraJointChains = 1\n        for i in range(len(joints)):\n            parentJoint = mayac.listRelatives(joints[i], parent = True)[0]\n            if i == 0:\n                ParentBodyPart = None\n                for bodyPart in self.bodyParts:\n                    if parentJoint == bodyPart.Bind_Joint:\n                        ParentBodyPart = bodyPart\n                if not ParentBodyPart:\n                    for extraJoint in self.ExtraJoints:\n                        if parentJoint == extraJoint.Bind_Joint:\n                            ParentBodyPart = extraJoint\n                newExtraJoints.append(DJB_CharacterNode(joints[i], parent = ParentBodyPart, dynamic_ = dynamic_))\n                jointIndex = len(newExtraJoints)-1\n                newExtraJoints[jointIndex].duplicateJoint(control_, parent_ = \"Bind_Joint\")\n                newExtraJoints[jointIndex].duplicateJoint(dynamic_, parent_ = \"Bind_Joint\")\n                newExtraJoints[jointIndex].duplicateJoint(\"AnimData\")\n            else:\n                newExtraJoints.append(DJB_CharacterNode(joints[i], parent = newExtraJoints[jointIndex], dynamic_ = dynamic_))\n                jointIndex = len(newExtraJoints)-1\n                newExtraJoints[jointIndex].duplicateJoint(control_)\n                newExtraJoints[jointIndex].duplicateJoint(dynamic_)\n                newExtraJoints[jointIndex].duplicateJoint(\"AnimData\")\n            \n            #FK controls\n            if i < len(joints)-1 and len(joints) > 1:\n                newExtraJoints[jointIndex].createControl(type = \"FK\", rigType = \"Dyn\",\n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.10, self.proportions[\"depth\"]*0.10, self.proportions[\"depth\"]*0.10),\n                                    offset = (self.proportions[\"depth\"]*0.05, 0, 0),\n                                    rotate = (0, 0, 90),\n                                    color_ = \"white\")\n            elif len(joints) == 1:\n                newExtraJoints[jointIndex].createControl(type = \"FK\", rigType = \"Dyn\",\n                                    style = \"circle\", \n                                    scale = (self.proportions[\"depth\"]*0.10, self.proportions[\"depth\"]*0.10, self.proportions[\"depth\"]*0.10),\n                                    offset = (self.proportions[\"depth\"]*0.05, 0, 0),\n                                    rotate = (0, 0, 90),\n                                    color_ = \"white\")\n                \n                \n            #Options CTRL\n            if i == len(joints)-1:\n                newExtraJoints[jointIndex].createControl(type = \"options\", \n                                    style = \"options\",\n                                    scale = (self.proportions[\"depth\"]*0.06, self.proportions[\"depth\"]*0.06, self.proportions[\"depth\"]*-0.06),\n                                    rotate = (-90, 0, 90),\n                                    offset = (0, self.proportions[\"depth\"]*.15, 0),  \n                                    partialConstraint = 0,\n                                    color_ = \"white\",\n                                    name_ = \"%s_Options\"%(newExtraJoints[0].nodeName))\n                \n        #ZV controls\n        #one joint\n        if len(joints) == 1:\n            newExtraJoints[0].translateOpen = True\n            FullName = newExtraJoints[0].nodeName\n            newExtraJoints[0].IK_Handle = DJB_createGroup(pivotFrom = newExtraJoints[0].Bind_Joint, fullName = \"%s_Dyn_NULL\"%(FullName))\n            newExtraJoints[0].IK_CTRL_POS_GRP = DJB_createGroup(newExtraJoints[0].IK_Handle)\n            mayac.parent(newExtraJoints[i].IK_CTRL_POS_GRP, self.global_CTRL)\n            mayac.setAttr(\"%s.visibility\"%(newExtraJoints[i].IK_Handle), 0)\n            mayac.parentConstraint(newExtraJoints[0].parent.Bind_Joint, newExtraJoints[0].IK_CTRL_POS_GRP, maintainOffset = True)\n            newExtraJoints[0].Dyn_Node = nParticleMethod(newExtraJoints[0].IK_Handle, weight=0.7, conserve=1.0, transfShapes=False)\n            newExtraJoints[0].createControl(type = \"Dyn\",\n                                    style = \"box1\",\n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),\n                                    color_ = \"white\",\n                                    name_ = \"%s_Dyn_CTRL\"%(newExtraJoints[0].nodeName))\n            mayac.parent(newExtraJoints[0].Dyn_CTRL, self.global_CTRL)\n            mayac.parentConstraint(newExtraJoints[0].Bind_Joint, newExtraJoints[0].Dyn_CTRL)\n            mayac.parentConstraint(newExtraJoints[0].IK_Handle, newExtraJoints[0].Dyn_Joint)\n            \n            \n            \n        endJointIndex = len(newExtraJoints)-1\n        if dynamic_ == \"ZV\" and jointIndex > 0: #more than one dynamic joint  \n            for i in range(1, endJointIndex+1): \n                temp = mayac.ikHandle( sj=newExtraJoints[i].parent.Dyn_Joint, ee=newExtraJoints[i].Dyn_Joint, n = \"%s_DYN_IKHandle\"%(newExtraJoints[i-1].nodeName))\n                newExtraJoints[i].IK_Handle = temp[0]\n                mayac.rename(temp[1], \"%s_DYN_IKEffector\"%(newExtraJoints[i].nodeName))\n                mayac.setAttr(\"%s.visibility\"%(newExtraJoints[i].IK_Handle), 0)\n                newExtraJoints[i].IK_CTRL_POS_GRP = DJB_createGroup(newExtraJoints[i].IK_Handle)\n                if i==1:\n                    mayac.parent(newExtraJoints[i].IK_CTRL_POS_GRP, self.global_CTRL)\n                    mayac.parentConstraint(newExtraJoints[0].parent.Bind_Joint, newExtraJoints[i].IK_CTRL_POS_GRP, maintainOffset = True)\n                else:\n                    mayac.parent(newExtraJoints[i].IK_CTRL_POS_GRP, newExtraJoints[i-1].IK_Handle)\n                newExtraJoints[i].Dyn_Node = nParticleMethod(newExtraJoints[i].IK_Handle, weight=0.7, conserve=1.0, transfShapes=False)\n            newExtraJoints[endJointIndex].createControl(type = \"Dyn\",\n                                    style = \"box1\",\n                                    scale = (self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1, self.proportions[\"depth\"]*0.1),\n                                    offset = (0, 0, 0),\n                                    color_ = \"white\",\n                                    name_ = \"%s_Dyn_CTRL\"%(newExtraJoints[0].nodeName))\n            mayac.parent(newExtraJoints[endJointIndex].Dyn_CTRL, self.global_CTRL)\n            mayac.parentConstraint(newExtraJoints[endJointIndex].Bind_Joint, newExtraJoints[endJointIndex].Dyn_CTRL)\n                \n\n        for i in range(len(joints)):\n            #Hook up controls\n            newExtraJoints[i].finalizeCTRLs()\n            newExtraJoints[i].lockUpCTRLs()\n        mayac.parent(newExtraJoints[len(newExtraJoints)-1].Options_CTRL, self.global_CTRL)\n        #Hook up Attrs\n        for i in range(len(joints)):\n            if newExtraJoints[i].Dyn_Node:\n                mayac.connectAttr(\"%s.weight\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.weight\" %(newExtraJoints[i].Dyn_Node))\n                mayac.connectAttr(\"%s.conserve\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.conserve\" %(newExtraJoints[i].Dyn_Node))\n            if newExtraJoints[i].Dyn_Joint:\n                mayac.connectAttr(\"%s.multiplier\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.input2X\" %(newExtraJoints[i].Dyn_Mult))\n                mayac.connectAttr(\"%s.multiplier\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.input2Y\" %(newExtraJoints[i].Dyn_Mult))\n                mayac.connectAttr(\"%s.multiplier\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.input2Z\" %(newExtraJoints[i].Dyn_Mult))\n                if newExtraJoints[i].translateOpen:\n                    jointPosHolder = mayac.shadingNode ('multiplyDivide', asUtility = True, name = \"%s_JointPos\"%(newExtraJoints[i].Dyn_Mult1))\n                    jointPosHolder1 = mayac.shadingNode ('multiplyDivide', asUtility = True, name = \"%s_JointPos\"%(newExtraJoints[i].Dyn_Mult1))\n                    trans = mayac.getAttr(\"%s.translate\"%(newExtraJoints[i].Bind_Joint))[0]\n                    mayac.setAttr(\"%s.input1X\"%(jointPosHolder), trans[0])\n                    mayac.setAttr(\"%s.input1Y\"%(jointPosHolder), trans[1])\n                    mayac.setAttr(\"%s.input1Z\"%(jointPosHolder), trans[2])\n                    mayac.setAttr(\"%s.input1X\"%(jointPosHolder1), trans[0])\n                    mayac.setAttr(\"%s.input1Y\"%(jointPosHolder1), trans[1])\n                    mayac.setAttr(\"%s.input1Z\"%(jointPosHolder1), trans[2])\n                    subtract1 = mayac.shadingNode ('plusMinusAverage', asUtility = True, name = \"%s_Subtract\"%(newExtraJoints[i].Dyn_Mult1))\n                    mel.eval('AEnewNonNumericMultiAddNewItem(\"%s\", \"input3D\");'%(subtract1))\n                    mel.eval('AEnewNonNumericMultiAddNewItem(\"%s\", \"input3D\");'%(subtract1))\n                    mayac.setAttr(\"%s.operation\"%(subtract1), 2)\n                    mayac.connectAttr(\"%s.output\"%(jointPosHolder), \"%s.input3D[0]\"%(subtract1), force = True)\n                    mayac.connectAttr(\"%s.translate\"%(newExtraJoints[i].Dyn_Joint), \"%s.input3D[1]\"%(subtract1), force = True)\n                    mayac.connectAttr(\"%s.output3D\"%(subtract1), \"%s.input1\"%(newExtraJoints[i].Dyn_Mult1), force = True)\n                    add1 = mayac.shadingNode ('plusMinusAverage', asUtility = True, name = \"%s_Add\"%(newExtraJoints[i].Dyn_Mult1))\n                    mel.eval('AEnewNonNumericMultiAddNewItem(\"%s\", \"input3D\");'%(add1))\n                    mel.eval('AEnewNonNumericMultiAddNewItem(\"%s\", \"input3D\");'%(add1))\n                    mayac.connectAttr(\"%s.output\"%(newExtraJoints[i].Dyn_Mult1), \"%s.input3D[0]\"%(add1), force = True)\n                    mayac.connectAttr(\"%s.output\"%(jointPosHolder1), \"%s.input3D[1]\"%(add1), force = True)\n                    mayac.connectAttr(\"%s.output3D\"%(add1), \"%s.translate\"%(newExtraJoints[i].DynMult_Joint), force = True)\n                    mayac.connectAttr(\"%s.multiplier\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.input2Y\" %(newExtraJoints[i].Dyn_Mult1))\n                    mayac.connectAttr(\"%s.multiplier\" %(newExtraJoints[len(newExtraJoints)-1].Dyn_CTRL), \"%s.input2Z\" %(newExtraJoints[i].Dyn_Mult1))\n        #Contraint Reverses\n        reverseNode = mayac.createNode( 'reverse', n=\"%s_Switch_Reverse\" %(newExtraJoints[0].nodeName))\n        typeName = \"\"\n        if dynamic_ == \"ZV\" and control_ == \"FK\":\n            typeName = \"FK_Dyn\"\n        mayac.setAttr(\"%s.weight\" %(newExtraJoints[len(joints)-1].Dyn_CTRL), 0.8)\n        mayac.setAttr(\"%s.conserve\" %(newExtraJoints[len(joints)-1].Dyn_CTRL), 1.0)\n        mayac.setAttr(\"%s.%s\" %(newExtraJoints[len(newExtraJoints)-1].Options_CTRL, typeName), 1.0)\n        mayac.connectAttr(\"%s.%s\" %(newExtraJoints[len(joints)-1].Options_CTRL, typeName), \"%s.inputX\" %(reverseNode))\n        for i in range(len(joints)):\n            if newExtraJoints[i].Constraint:\n                mayac.setAttr(\"%s.interpType\" %(newExtraJoints[i].Constraint), 2)\n                mayac.connectAttr(\"%s.%s\" %(newExtraJoints[len(joints)-1].Options_CTRL, typeName), \"%s.%sW1\" %(newExtraJoints[i].Constraint, newExtraJoints[i].DynMult_Joint))\n                mayac.connectAttr(\"%s.outputX\" %(reverseNode), \"%s.%sW0\" %(newExtraJoints[i].Constraint, newExtraJoints[i].FK_Joint))\n            DJB_Unlock_Connect_Lock(\"%s.%s\" %(newExtraJoints[len(joints)-1].Options_CTRL, typeName), \"%s.visibility\" %(newExtraJoints[i].DynMult_Joint))\n            DJB_Unlock_Connect_Lock(\"%s.outputX\" %(reverseNode), \"%s.visibility\" %(newExtraJoints[i].FK_Joint))\n            if newExtraJoints[i].FK_CTRL:\n                DJB_Unlock_Connect_Lock(\"%s.outputX\" %(reverseNode), \"%s.visibility\" %(newExtraJoints[i].FK_CTRL))\n            if newExtraJoints[i].Dyn_CTRL:\n                DJB_Unlock_Connect_Lock(\"%s.%s\" %(newExtraJoints[len(joints)-1].Options_CTRL, typeName), \"%s.visibility\" %(newExtraJoints[i].Dyn_CTRL))\n        #infoNode stuff\n        for i in range(len(joints)):\n            newExtraJoints[i].writeInfoNode()\n            mayac.parent(newExtraJoints[i].infoNode, self.Misc_GRP)\n        infoNodes = []\n        if not self.ExtraJoints:\n            self.ExtraJoints = []\n        else:\n            infoNodes = attrToPy(\"%s.ExtraJoints\" % (self.infoNode))\n        if not infoNodes:\n            infoNodes = []\n        for joint in newExtraJoints:\n            self.ExtraJoints.append(joint)\n            infoNodes.append(joint.infoNode)\n        pyToAttr(\"%s.ExtraJoints\" % (self.infoNode), infoNodes)\n        \n \n \ndef DJB_populatePythonSpaceWithCharacter():\n    global DJB_CharacterInstance\n    DJB_CharacterInstance = []\n    mayac.select(all = True, hi = True)\n    unknownNodes = mayac.ls(selection = True, type = \"transform\")\n    infoNodes = []\n    for check in unknownNodes:\n        if \"MIXAMO_CHARACTER_infoNode\" in check:\n            infoNodes.append(check)\n    for infoNode in infoNodes:\n        DJB_CharacterInstance.append(DJB_Character(infoNode_ = infoNode))\n    mayac.select(clear = True)\n\n            \n            \n            \n\n            \nclass MIXAMO_AutoControlRig_UI:\n    def __init__(self):\n        global Mixamo_AutoControlRig_Version\n        self.file1Dir = None\n        self.name = \"MIXAMO_AutoControlRig_UI\"\n        self.title = \"MIXAMO Auto-Control-Rig v. %s\" % (Mixamo_AutoControlRig_Version)\n\n        # Begin creating the UI\n        if (mayac.window(self.name, q=1, exists=1)): mayac.deleteUI(self.name)\n        self.window = mayac.window(self.name, title=self.title, menuBar=True)\n        \n        #menu\n        mayac.menu( label='Help', helpMenu=True )\n        mayac.menuItem(l='Tutorials Site', command = lambda *args: goToWebpage(\"tutorials\")) \n        mayac.menuItem( label='Bugs, Feature Requests, Confusions, Praise, Support', command = lambda *args: goToWebpage(\"community\"))\n        mayac.menuItem( label='About', command = self.showAboutWindow)\n        \n        \n        #forms\n        self.form = mayac.formLayout(w=650)\n        mayac.columnLayout(adjustableColumn = True, w=650)\n        mayac.text( label=' Thank you for trying the Mixamo Maya Auto-Control-Rig!', align='center' )\n        mayac.text( label=' Please send Bugs, Feature Requests, Confusions, and/or Praise', align='center' )\n        supportText = mayac.text( label=' to our community site.(Link in Help menu)', align='center' )\n        mayac.popupMenu(parent=supportText, ctl=False, button=1) \n        \n        mayac.menuItem(l='Go to community site', command = lambda *args: goToWebpage(\"community\")) \n        mayac.text( label='', align='left' )\n        happyAnimatingText = mayac.text( label='  Happy Animating! www.mixamo.com', align='center' )\n        mayac.popupMenu(parent=happyAnimatingText, ctl=False, button=1) \n        mayac.menuItem(l='Go to Mixamo.com', command = lambda *args: goToWebpage(\"mixamo\")) \n        mayac.text( label='', align='left' )\n        \n        \n        mayac.setParent( '..' )\n        \n        self.tabs = mayac.tabLayout(innerMarginWidth=5, innerMarginHeight=5)\n        self.layout = mayac.formLayout( self.form, edit=True, attachForm=((self.tabs, 'top', 90), (self.tabs, 'left', 0), (self.tabs, 'bottom', 0), (self.tabs, 'right', 0)) )\n        \n        #Rig Tab\n        self.child1 = mayac.columnLayout(adjustableColumn = True)\n        mayac.text( label='', align='left' )\n        mayac.text( label='Control Sizing Helper', align='center')\n        mayac.text( label='  If the character has unusual proportions or large appendages, the button below will create a cube that you may scale to', align='center' )\n        mayac.text( label='compensate for the unusual proportions.', align='center' )\n        self.fakeBB_button = mayac.button(label='Create override Bounding Box', w=100, c=self.createOverrideBB_function)\n        mayac.text( label='', align='left' )\n        \n        mayac.separator( height=15, style='in' )\n        mayac.text( label='Advanced Options', align='center' )\n        mayac.text( label='WARNING!!!!: The following changes the rig.  Skeleton will no longer match original fbx.', align='center')\n        mayac.text( label='For best results with animation, export from the Export tab once rigging is complete and', align='center')\n        mayac.text( label='upload the new rig to mixamo.com to apply animations to.')\n        self.hulaOptionCheckBox = mayac.checkBox(label = 'Add Pelvis (\"hula\") Control', align='left' )\n        mayac.separator( height=15, style='in' )\n        autoSkinnerText = mayac.text( label='  Import your downloaded MIXAMO character and then press the button below.', align='left' )\n        mayac.popupMenu(parent=autoSkinnerText, ctl=False, button=1) \n        mayac.menuItem(l='Go to Mixamo Auto-Rigger webpage', command = lambda *args: goToWebpage(\"autoRigger\"))\n        self.setupControls_button = mayac.button(label='Rig Character', w=100, c=self.setupControls_function)\n        mayac.text( label='', align='left' )\n        mayac.setParent( '..' )\n        \n        \n        #Animate Tab\n        self.child2 = mayac.columnLayout(adjustableColumn = True)\n        mayac.text( label='', align='left' )\n        mayac.text( label=\"**Please note that the animation data functionality is only designed to work with animations retargeted to your character's skeleton**\", align='left' )\n        mayac.text( label='', align='left' )\n        mayac.text( label='', align='left' )\n        animationText = mayac.text( label='  Import your downloaded MIXAMO animation.', align='left' )\n        mayac.popupMenu(parent=animationText, ctl=False, button=1) \n        mayac.menuItem(l='Go to Mixamo Motions webpage', command = lambda *args: goToWebpage(\"motions\")) \n        self.browseMotions_button = mayac.button(label='Import Animation', w=100, c=self.browseMotions_function)\n        mayac.text( label='', align='left' )\n        mayac.text( label='  Select the \"Hips\" joint of the imported motion and then press the button below.', align='left' )\n        mayac.button(label='Copy Animation to Rig (for imported animation)', w=100, c=self.copyAnimationToRig_function)\n        mayac.text( label='', align='left' )\n        mayac.button(label='Direct Connect Animation to Rig (for referenced animation)', w=100, c=self.connectAnimationToRig_function)\n        mayac.text( label='', align='left' )\n        mayac.text( label='', align='left' )\n        mayac.text( label='Here you can bake the animation to the controls and/or revert to clean controls at any time.', align='center' )\n        controlRigText = mayac.text( label=\"For more details see the documentation or www.mixamo.com/c/auto-control-rig-for-maya\", align='center' )\n        mayac.popupMenu(parent=controlRigText, ctl=False, button=1) \n        mayac.menuItem(l='Go to Auto-Control-Rig webpage', command = lambda *args: goToWebpage(\"autoControlRig\")) \n        mayac.text( label='', align='left' )\n        self.bakeAnimation_button = mayac.button(label='Bake Animation to Controls (imported anim only)', w=100, c=self.bakeAnimation_function)\n        mayac.text( label='', align='left' )\n        self.bakeAnimation_button = mayac.button(label='Clear Animation Controls (imported anim only)', w=100, c=self.clearAnimation_function)\n        mayac.text( label='', align='left' )\n        mayac.text( label='', align='left' )\n        mayac.text( label='  Note: The original animation resides in the scene on its own layer until deleted.', align='left' )\n        mayac.text( label='', align='left' )\n        self.deleteOrigAnimation_button = mayac.button(label='Delete Original Animation (imported anim only)', w=100, c=self.deleteOrigAnimation_function)\n        mayac.text( label='', align='left' )\n        mayac.setParent( '..' )\n        \n        \n        #Export Tab\n        self.child3 = mayac.columnLayout(adjustableColumn = True)\n        mayac.text( label='', align='left' )\n        mayac.text( label='General Options', align='center')\n        self.removeEndJointsCheckBox = mayac.checkBox(label = 'Remove End Joints', align='left')\n        self.reduceNonEssentialJointsCheckBox = mayac.checkBox(label = 'Reduce Keyframes on Non-Essential Joints', align='left' )\n        self.exportWithMeshOptionCheckBox = mayac.checkBox(label = 'Export Mesh with Skeleton', align='left' )\n        \n        mayac.separator( height=15, style='in' )\n        mayac.text( label='Dynamics Options', align='center')\n        self.dynamicsFadeFramesSlider = mayac.intSliderGrp( field=True, label='Dynamics Pose-Match Frame', minValue=0, maxValue=50, value=0, columnAttach3=(\"both\",\"both\",\"both\"))\n        mayac.separator( height=15, style='in' )\n        self.exportBakedSkeleton_button = mayac.button(label='Export Baked Skeleton', w=100, c=self.exportBakedSkeleton_function)\n        mayac.text( label='', align='left' )\n        mayac.setParent( '..' )\n        \n        \n        #Batch Tab\n        self.child4 = mayac.columnLayout(adjustableColumn = True)\n        mayac.text( label='', align='left' )\n        self.batch_fileOptionRadio = mayac.radioButtonGrp(label = \"Animated File:\", labelArray3 = [\"Open\", \"Import\",\"Reference\"], numberOfRadioButtons=3, sl = 1)\n        self.batch_File1_browse = mayac.button(label = \"Browse\", w=15, c=self.batch_File1_browse_function)\n        self.batch_File1_selectAll = mayac.button(label = \"Select All\", w=30, c=self.batch_File1_selectAll_function)\n        self.batch_File1_ScrollField = mayac.textScrollList( numberOfRows=10, allowMultiSelection=True, height = 100)\n        mayac.separator( height=15, style='in')\n        self.batch_replaceRigReference_checkbox = mayac.checkBox(label=\"Replace Rig Reference\", v = True)\n        self.batch_replaceRigReference_textFieldButtonGrp = mayac.textFieldButtonGrp( label='New Rig Reference', text='', buttonLabel='Browse', buttonCommand = self.batch_replaceRigReferencePath_function)\n        mayac.separator( height=15, style='in' )\n        self.batch_playblast_checkbox = mayac.checkBox(label=\"Playblast\", v = True)\n        self.batch_playblastPath_textFieldButtonGrp = mayac.textFieldButtonGrp( label='Playblast Save Path', text='', buttonLabel='Browse', buttonCommand = self.batch_playblastPath_function)\n        mayac.separator( height=15, style='in' )\n        self.batch_saveFileOptionRadio = mayac.radioButtonGrp(label = \"Finished File:\",\n                                            labelArray3 = [\"Export\", \"Save\", \"Don't Save or Export\"], \n                                            numberOfRadioButtons=3, \n                                            sl = 1, \n                                            columnAlign3 = ['left','center','right'],\n                                            columnWidth3 = [10,500,20])\n        self.batch_savePath_textFieldButtonGrp = mayac.textFieldButtonGrp( label='File Save Path', text='', buttonLabel='Browse', buttonCommand = self.batch_savePath_function)\n        mayac.text( label='', align='left' )\n        self.batchButton = mayac.button(label = \"Batch\", w=15, c=self.batch_function)\n        mayac.text( label='', align='left' )\n        mayac.setParent( '..' )\n        \n\n        #Utilities Tab\n        self.child5 = mayac.columnLayout(adjustableColumn = True)\n        mayac.text( label='', align='left' )\n        mayac.text( label=\"If you've added a skinned mesh to your rig, \", align='center')\n        mayac.text( label=\"the button below will let the system know about it for exports.\", align='center' )\n        self.batch_startFileOption = mayac.button(label='Remake Mesh Infonode', w=100, c=self.remakeMeshInfoNode_function)\n        mayac.text( label='', align='left' )\n        mayac.text( label=\"If you've added joints to your rig, \", align='center')\n        mayac.text( label=\"select them and click the button below.\", align='center' )\n        self.makeExtraJointsInfoNode_button = mayac.button(label='Make Extra Joints Infonode from selection', w=100, c=self.makeExtraJointsInfoNode_function)\n        mayac.text( label='', align='left' )\n        mayac.text( label=\"If you've added joints that you wish to have dynamic, \", align='center')\n        mayac.text( label=\"select them and click the button below for automatic followthrough.\", align='center' )\n        mayac.text( label=\"(powered by ZV Dynamics by Paolo Dominici)\", align='center')\n        self.makeDynamicChainRigFromSelection_button = mayac.button(label='Make Dynamic Chain Rig from selection', w=100, c=self.makeDynamicChainRigFromSelection_function)\n        \n        \n        mayac.setParent( '..' )\n        \n        \n        mayac.tabLayout( self.tabs, edit=True, tabLabel=((self.child1, 'Rig'), (self.child2, 'Animate'), (self.child3, 'Export'), (self.child4, 'Batching'), (self.child5, 'Utilities')) )\n        mayac.window(self.window, e=1, w=650, h=575, sizeable = 0) #580,560\n        mayac.showWindow(self.window)\n            \n\n    def showAboutWindow(self, arg = None):\n        if (mayac.window(\"DJB_MACR_About\", q=1, exists=1)): mayac.deleteUI(\"DJB_MACR_About\")\n        about_window = mayac.window(\"DJB_MACR_About\", title=\"About %s\" % (self.title))\n        about_form = mayac.formLayout()\n        about_tabs = mayac.tabLayout(innerMarginWidth=5, innerMarginHeight=5)\n        about_layout = mayac.formLayout( about_form, edit=True, attachForm=((about_tabs, 'top', 0), (about_tabs, 'left', 0), (about_tabs, 'bottom', 0), (about_tabs, 'right', 0)) )\n        #About Tab\n        child1 = mayac.columnLayout(adjustableColumn = True)\n        mayac.scrollField( editable=False, wordWrap=False, text= DJB_ABOUT_TEXT, h=450, w=750)\n        mayac.setParent( '..' )\n        #Changelog Tab\n        child2 = mayac.columnLayout(adjustableColumn = True)\n        mayac.scrollField( editable=False, wordWrap=False, text= DJB_CHANGELOG_TEXT, h=450, w=750)\n        mayac.setParent( '..' )\n        mayac.tabLayout( about_tabs, edit=True, tabLabel=((child1, 'General'), (child2, 'Changelog')) )\n         \n        mayac.window(about_window, e=1, w=650, h=450, sizeable = 0) #580,560\n        mayac.showWindow(about_window)\n\n\n    def createOverrideBB_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if not DJB_CharacterInstance:\n            global DJB_Character_ProportionOverrideCube\n            if mayac.objExists(DJB_Character_ProportionOverrideCube):\n                mayac.delete(DJB_Character_ProportionOverrideCube)\n                DJB_Character_ProportionOverrideCube = \"\"\n            DJB_Character_ProportionOverrideCube = mayac.polyCube(n = \"Bounding_Box_Override_Cube\", ch = False)[0]\n            \n            #get default proportions\n            mesh = []\n            temp = mayac.ls(geometry = True)\n            shapes = []\n            for geo in temp:\n                if \"ShapeOrig\" not in geo:\n                    shapes.append(geo)\n                    transform = mayac.listRelatives(geo, parent = True)[0]\n            for geo in shapes:\n                parent = mayac.listRelatives(geo, parent = True, path=True)[0]\n                mesh.append(mayac.listRelatives(parent, children = True, type = \"shape\", path=True)[0])\n            #place and lock up cube\n            BoundingBox = mayac.exactWorldBoundingBox(mesh)\n            mayac.move(BoundingBox[0], BoundingBox[1], BoundingBox[5], \"%s.vtx[0]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[3], BoundingBox[1], BoundingBox[5], \"%s.vtx[1]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[0], BoundingBox[4], BoundingBox[5], \"%s.vtx[2]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[3], BoundingBox[4], BoundingBox[5], \"%s.vtx[3]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[0], BoundingBox[4], BoundingBox[2], \"%s.vtx[4]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[3], BoundingBox[4], BoundingBox[2], \"%s.vtx[5]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[0], BoundingBox[1], BoundingBox[2], \"%s.vtx[6]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.move(BoundingBox[3], BoundingBox[1], BoundingBox[2], \"%s.vtx[7]\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            pivotPointX = ((BoundingBox[3] - BoundingBox[0]) / 2) + BoundingBox[0]\n            pivotPointY = BoundingBox[1]\n            pivotPointZ = ((BoundingBox[5] - BoundingBox[2]) / 2) + BoundingBox[2]\n            mayac.move(pivotPointX, pivotPointY, pivotPointZ, \"%s.scalePivot\" % (DJB_Character_ProportionOverrideCube), \"%s.rotatePivot\" % (DJB_Character_ProportionOverrideCube), absolute = True)\n            mayac.setAttr(\"%s.tx\" % (DJB_Character_ProportionOverrideCube),lock = True)\n            mayac.setAttr(\"%s.ty\" % (DJB_Character_ProportionOverrideCube),lock = True)\n            mayac.setAttr(\"%s.tz\" % (DJB_Character_ProportionOverrideCube),lock = True)\n            mayac.setAttr(\"%s.rx\" % (DJB_Character_ProportionOverrideCube),lock = True)\n            mayac.setAttr(\"%s.ry\" % (DJB_Character_ProportionOverrideCube),lock = True)\n            mayac.setAttr(\"%s.rz\" % (DJB_Character_ProportionOverrideCube),lock = True)\n            \n        else:\n            OpenMaya.MGlobal.displayError(\"You must create and scale the override cube before rigging the character.\")\n        mayac.select(clear = True)\n        \n            \n    def setupControls_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if not DJB_CharacterInstance:\n            joints = mayac.ls(type = \"joint\")\n            if not joints:\n                OpenMaya.MGlobal.displayError(\"There must be a Mixamo Autorigged character in the scene.\")\n            else:\n                hulaValue = mayac.checkBox(self.hulaOptionCheckBox, query = True, value = True)\n                DJB_CharacterInstance.append(DJB_Character(hulaOption_ = hulaValue))\n                DJB_CharacterInstance[len(DJB_CharacterInstance)-1].fixArmsAndLegs()\n                \n                DJB_CharacterInstance[len(DJB_CharacterInstance)-1].makeAnimDataJoints()\n                DJB_CharacterInstance[len(DJB_CharacterInstance)-1].makeControls()\n                DJB_CharacterInstance[len(DJB_CharacterInstance)-1].hookUpControls()\n                DJB_CharacterInstance[len(DJB_CharacterInstance)-1].writeInfoNode()\n        else:\n            OpenMaya.MGlobal.displayError(\"There is already a rig in the scene\")\n        mayac.select(clear = True)\n        \n        \n    def browseMotions_function(self, arg = None):\n        mayac.Import()\n    \n    def connectAnimationToRig_function(self, arg = None):\n        global DJB_CharacterInstance\n        selection = mayac.ls(selection = True)\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if not DJB_CharacterInstance:\n            OpenMaya.MGlobal.displayError(\"You must rig a character first\")\n        elif len(selection) == 0 or mayac.nodeType(selection[0]) != \"joint\":\n            OpenMaya.MGlobal.displayError(\"You must select the 'Hips' Joint of the imported animation\")\n        elif len(DJB_CharacterInstance) == 1:\n            if DJB_CharacterInstance[0].Hips.Bind_Joint:\n                isCorrectRig = DJB_CharacterInstance[0].checkSkeletonProportions(selection[0])\n                if isCorrectRig:\n                    DJB_CharacterInstance[0].connectMotionToAnimDataJoints(selection[0])\n                else:\n                    OpenMaya.MGlobal.displayError(\"Imported Skeleton does not match character!\")\n        else: #more than one character, spawn a choice window\n            mayac.select(selection, r=True)\n            ACR_connectAnimationToRigWindow()\n        \n        \n                \n    def copyAnimationToRig_function(self, arg = None):\n        global DJB_CharacterInstance\n        selection = mayac.ls(selection = True)\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if not DJB_CharacterInstance:\n            OpenMaya.MGlobal.displayError(\"You must rig a character first\")\n        elif len(selection) == 0 or mayac.nodeType(selection[0]) != \"joint\":\n            OpenMaya.MGlobal.displayError(\"You must select the 'Hips' Joint of the imported animation\")\n        elif len(DJB_CharacterInstance) == 1:\n            if DJB_CharacterInstance[0].Hips.Bind_Joint:\n                isCorrectRig = DJB_CharacterInstance[0].checkSkeletonProportions(selection[0])\n                if isCorrectRig:\n                    DJB_CharacterInstance[0].transferMotionToAnimDataJoints(selection[0], newStartTime = 0, mixMethod = \"insert\")\n                else:\n                    OpenMaya.MGlobal.displayError(\"Imported Skeleton does not match character!\")\n        else: #more than one character, spawn a choice window\n            mayac.select(selection, r=True)\n            ACR_copyAnimationToRigWindow()\n            \n    def deleteOrigAnimation_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if not DJB_CharacterInstance:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")\n        else:\n            if DJB_CharacterInstance[0].origAnim:\n                DJB_CharacterInstance[0].deleteOriginalAnimation()\n            else:\n                OpenMaya.MGlobal.displayError(\"No Original Animation Found!\")\n            \n    def bakeAnimation_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if DJB_CharacterInstance:\n            DJB_CharacterInstance[0].bakeAnimationToControls()\n        else:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")\n        \n    def clearAnimation_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if DJB_CharacterInstance:\n            DJB_CharacterInstance[0].clearAnimationControls()\n        else:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")\n                     \n    def exportBakedSkeleton_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if DJB_CharacterInstance:\n            keepMesh = mayac.checkBox(self.exportWithMeshOptionCheckBox, query = True, value = True)\n            reduce = mayac.checkBox(self.reduceNonEssentialJointsCheckBox, query = True, value = True)\n            removeEndJoints = mayac.checkBox(self.removeEndJointsCheckBox, query = True, value = True)\n            dynamicsFadeFrames = mayac.intSliderGrp(self.dynamicsFadeFramesSlider, query = True, value = True)\n            DJB_CharacterInstance[0].createExportSkeleton(keepMesh_ = keepMesh, dynamicsToFK = dynamicsFadeFrames, reduceNonEssential = reduce, removeEndJoints = removeEndJoints)\n            if arg:\n                DJB_CharacterInstance[0].exportSkeleton(arg)\n            else:\n                DJB_CharacterInstance[0].exportSkeleton()\n            version = mel.eval(\"float $ver = `getApplicationVersionAsFloat`;\")\n            if version != 2010.0:\n                DJB_CharacterInstance[0].deleteExportSkeleton()\n            if version == 2010.0:\n                OpenMaya.MGlobal.displayInfo(\"You may delete the newly created geometry and joints after exporting is complete\")\n        else:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")\n     \n     \n    def remakeMeshInfoNode_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if DJB_CharacterInstance:\n            DJB_CharacterInstance[0].remakeMeshInfoNode()\n        else:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")   \n    \n    \n    def makeExtraJointsInfoNode_function(self, arg = None):\n        global DJB_CharacterInstance\n        DJB_CharacterInstance = None\n        sel = mayac.ls(sl=True)\n        DJB_populatePythonSpaceWithCharacter()\n        if DJB_CharacterInstance:\n            if sel:\n                DJB_CharacterInstance[0].makeExtraJointsInfoNode(sel)\n            else:\n                OpenMaya.MGlobal.displayError(\"Extra Joints Must Be Selected!\")  \n        else:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")  \n            \n    def makeDynamicChainRigFromSelection_function(self, arg = None):\n        global DJB_CharacterInstance\n        sel = mayac.ls(sl=True)\n        DJB_CharacterInstance = None\n        DJB_populatePythonSpaceWithCharacter()\n        if DJB_CharacterInstance:\n            if sel:\n                for cur in sel:\n                    mayac.select(cur, replace = True)\n                    mayac.select(hierarchy = True)\n                    chain = mayac.ls(sl=True)\n                    DJB_CharacterInstance[0].makeDynamicChainRig(chain, dynamic_ = \"ZV\", control_ = \"FK\") #need to add checks for eligible joint chain\n            else:\n                OpenMaya.MGlobal.displayError(\"Eligible Joints Must Be Selected!\")\n        else:\n            OpenMaya.MGlobal.displayError(\"No Character Found!\")\n            \n    def batch_function(self, arg = None):\n        #get all options\n        keepMesh = mayac.checkBox(self.exportWithMeshOptionCheckBox, query = True, value = True)\n        \n        filesShort = mayac.textScrollList(self.batch_File1_ScrollField, query = True, selectItem = True)\n        #iterate through top level files\n        for file in filesShort:\n            \n            fileType = file[len(file)-3:]\n            fileName = file[0:len(file)-3]\n            file = self.file1Dir + \"/\" + file\n            #open top level\n            openOption = mayac.radioButtonGrp(self.batch_fileOptionRadio, query = True, sl = True)\n            if openOption == 1:#open\n                mayac.file( file, o=True, force = True )\n            elif openOption == 2:#import\n                mayac.file( file, i=True, force = True )\n            elif openOption == 3:#reference\n                mayac.file( file, r=True, force = True )\n            #if rig replace\n            rigReplace = mayac.checkBox(self.batch_replaceRigReference_checkbox, query = True, value = True)\n            references = None\n            if rigReplace:\n                references=mayac.file(q=True, reference = True)[0]\n            if references:\n                ref = mayac.referenceQuery(references, rfn = True)\n                newRef = mayac.textFieldButtonGrp(self.batch_replaceRigReference_textFieldButtonGrp, query = True, text = True)\n                if \".ma\" in newRef:\n                    mayac.file(newRef, loadReference = ref, type = \"mayaAscii\", options = (\"v=0\"))\n                else:\n                    mayac.file(newRef, loadReference = ref, type = \"mayaBinary\", options = (\"v=0\"))\n            \n            #save or bake and export\n            global DJB_CharacterInstance\n            DJB_CharacterInstance = None\n            DJB_populatePythonSpaceWithCharacter()\n            saveOption = mayac.radioButtonGrp(self.batch_saveFileOptionRadio, query = True, sl = True)\n            saveFolder = mayac.textFieldButtonGrp(self.batch_savePath_textFieldButtonGrp, query = True, text = True)\n            saveFile = saveFolder + \"/\" + fileName\n            if saveOption == 2:#save\n                #Pre-setup dynamics\n                dynamicsFadeFrames = mayac.intSliderGrp(self.dynamicsFadeFramesSlider, query = True, value = True)\n                if dynamicsFadeFrames:\n                    DJB_CharacterInstance.dynamicsStartEndPoseKeys(dynamicsToFK = dynamicsFadeFrames)\n                if \".ma\" in fileType:\n                    mayac.file( rename= saveFile + \".ma\" )\n                    mayac.file( save=True, type='mayaAscii', force=True )\n                else:\n                    mayac.file( rename= saveFile + \".mb\" )\n                    mayac.file( save=True, type='mayaBinary', force=True )\n                #mayac.file(saveFile, save = True, type = \"mayaAscii\", force = True)\n            elif saveOption == 1:#bake and export\n                for i in range(0,10):\n                    mayac.currentTime( i, edit=True )\n                mayac.currentTime( 0, edit=True )\n                self.exportBakedSkeleton_function(arg = saveFile)\n            #if playblast\n            playblast = mayac.checkBox(self.batch_playblast_checkbox, query = True, value = True)\n            if playblast:\n                controlLayer = DJB_addNameSpace(DJB_CharacterInstance[0].characterNameSpace, \"ControlLayer\")\n                mayac.setAttr(\"%s.visibility\" %(controlLayer), 1)\n                for i in range(0,10):\n                    mayac.currentTime( i, edit=True )\n                mayac.currentTime( 0, edit=True )\n                blastPath = mayac.textFieldButtonGrp(self.batch_playblastPath_textFieldButtonGrp, query = True, text = True)\n                blastFile = blastPath + \"/\" + fileName\n                mayac.setAttr(\"persp.tx\",-0.358)\n                mayac.setAttr(\"persp.ty\",86.261)\n                mayac.setAttr(\"persp.tz\",503.388)\n                mayac.setAttr(\"persp.rx\",-.338)\n                mayac.setAttr(\"persp.ry\",-2.4)\n                mayac.setAttr(\"persp.rz\",0)\n                mayac.setAttr(\"perspShape.farClipPlane\", 100000)\n                mayac.setAttr(\"perspShape.nearClipPlane\", 100)\n                #base_OpenGL_Renderer\n                #hwRender_OpenGL_Renderer\n                mayac.modelEditor( \"modelPanel4\", edit=True, camera=\"persp\", rnm = \"base_OpenGL_Renderer\", nurbsCurves=False, joints=False, cameras = False, grid = False, ikh = False, deformers = False, dynamics = False, nParticles = False, follicles = False, locators = False, activeView=True )\n                mel.eval('playblast  -format avi -filename \"%s\" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 0 -offScreen  -fp 4 -percent 100 -compression \"XVID\" -quality 70 -widthHeight 1280 720;'%(blastFile))\n                #mayac.playblast(f=blastFile, format = \"avi\", showOrnaments = 0, percent = 100, compression = \"XVID\", quality = 70, widthHeight = [1280,720])\n\n\n        \n    def batch_File1_browse_function(self, arg = None):\n        self.file1Dir = DJB_BrowserWindow(filter_ = \"Maya\", caption_ = \"Browse for character files directory\", fileMode_ = \"directory\")\n        filesRaw = os.listdir(self.file1Dir)\n        filesRaw.sort()\n        mayac.textScrollList(self.batch_File1_ScrollField, edit = True, removeAll = True)\n        for file in filesRaw:\n            if \".ma\" in file or \".mb\" in file:\n                mayac.textScrollList(self.batch_File1_ScrollField, edit = True, append = file)\n    def batch_File1_selectAll_function(self, arg = None):\n        allItems = mayac.textScrollList(self.batch_File1_ScrollField, query = True, allItems = True)\n        if not allItems:\n            OpenMaya.MGlobal.displayError(\"Nothing to select\")\n        else:\n            for item in allItems:\n                mayac.textScrollList(self.batch_File1_ScrollField, edit = True, selectItem = item)\n    def batch_replaceRigReferencePath_function(self, arg = None):\n        replaceRigReferencePath = DJB_BrowserWindow(filter_ = \"Maya\", caption_ = \"Browse for rig reference replacement\", fileMode_ = \"Maya\")\n        if replaceRigReferencePath:\n            mayac.textFieldButtonGrp(self.batch_replaceRigReference_textFieldButtonGrp, edit = True, text = replaceRigReferencePath)\n        else:\n            mayac.textFieldButtonGrp(self.batch_replaceRigReference_textFieldButtonGrp, edit = True, text = \"\")\n    def batch_playblastPath_function(self, arg = None):\n        playblastPath = DJB_BrowserWindow(filter_ = None, caption_ = \"Browse for playblast folder\", fileMode_ = \"directory\")\n        if playblastPath:\n            mayac.textFieldButtonGrp(self.batch_playblastPath_textFieldButtonGrp, edit = True, text = playblastPath)\n        else:\n            mayac.textFieldButtonGrp(self.batch_playblastPath_textFieldButtonGrp, edit = True, text = \"\")\n    def batch_savePath_function(self, arg = None):\n        savePath = DJB_BrowserWindow(filter_ = None, caption_ = \"Browse for save folder\", fileMode_ = \"directory\")\n        if savePath:\n            mayac.textFieldButtonGrp(self.batch_savePath_textFieldButtonGrp, edit = True, text = savePath)\n        else:\n            mayac.textFieldButtonGrp(self.batch_savePath_textFieldButtonGrp, edit = True, text = \"\")\n          \n\nclass ACR_connectAnimationToRigWindow:\n    def __init__(self):\n        self.file1Dir = None\n        self.name = \"Connect Animation to Rig\"\n        self.title = \"Connect Animation to Rig\"\n\n        # Begin creating the UI\n        if (mayac.window(self.name, q=1, exists=1)): \n            mayac.deleteUI(self.name)\n        self.window = mayac.window(self.name, title=self.title, menuBar=True)\n        #forms\n        self.form = mayac.formLayout(w=650)\n        mayac.columnLayout(adjustableColumn = True, w=650)\n        mayac.text( label='', align='left' )\n        self.characters_ScrollList = mayac.textScrollList( numberOfRows=5, allowMultiSelection=False)\n        mayac.separator( height=40, style='in' )\n        mayac.text( label='', align='left' )\n        self.batchButton = mayac.button(label = \"Connect Animation to selected Character\", w=15, c=self.connectFunction)\n        mayac.text( label='', align='left' )\n        \n        self.populateScrollField()\n        mayac.window(self.window, e=1, w=650, h=515, sizeable = 1) #580,560\n        mayac.showWindow(self.window)\n        \n    def populateScrollField(self, arg = None):\n        global DJB_CharacterInstance\n        for char in DJB_CharacterInstance:\n            mayac.textScrollList(self.characters_ScrollList, edit = True, append = char.name)\n        mayac.textScrollList(self.characters_ScrollList, edit=True, selectIndexedItem = 1)\n        \n    def connectFunction(self, arg = None):\n        global DJB_CharacterInstance\n        selection = mayac.ls(sl=True)\n        selectedIndex = mayac.textScrollList(self.characters_ScrollList, query=True, selectIndexedItem = True)\n        #print selectedIndex\n        \n        DJB_CharacterInstance[selectedIndex[0]-1].connectMotionToAnimDataJoints(selection[0])\n        \nclass ACR_copyAnimationToRigWindow():\n    def __init__(self):\n        self.file1Dir = None\n        self.name = \"Copy Animation to Rig\"\n        self.title = \"Copy Animation to Rig\"\n\n        # Begin creating the UI\n        if (mayac.window(self.name, q=1, exists=1)): \n            mayac.deleteUI(self.name)\n        self.window = mayac.window(self.name, title=self.title, menuBar=True)\n        #forms\n        self.form = mayac.formLayout(w=650)\n        mayac.columnLayout(adjustableColumn = True, w=650)\n        mayac.text( label='', align='left' )\n        self.characters_ScrollList = mayac.textScrollList( numberOfRows=5, allowMultiSelection=False)\n        mayac.separator( height=40, style='in' )\n        mayac.text( label='', align='left' )\n        self.batchButton = mayac.button(label = \"Copy Animation to selected Character\", w=15, c=self.copyFunction)\n        mayac.text( label='', align='left' )\n        \n        self.populateScrollField()\n        mayac.window(self.window, e=1, w=650, h=515, sizeable = 1) #580,560\n        mayac.showWindow(self.window)\n    def populateScrollField(self, arg = None):\n        global DJB_CharacterInstance\n        for char in DJB_CharacterInstance:\n            mayac.textScrollList(self.characters_ScrollList, edit = True, append = char.name)\n        mayac.textScrollList(self.characters_ScrollList, edit=True, selectIndexedItem = 1)\n        \n    def copyFunction(self, arg = None):\n        global DJB_CharacterInstance\n        selection = mayac.ls(sl=True)\n        selectedIndex = mayac.textScrollList(self.characters_ScrollList, query=True, selectIndexedItem = True)\n        DJB_CharacterInstance[selectedIndex[0]-1].transferMotionToAnimDataJoints(selection[0], newStartTime = 0, mixMethod = \"insert\")\n        \n            \n            \nif __name__ == \"__main__\":\n    DJB_MIX_ACS_UI = MIXAMO_AutoControlRig_UI()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -hi;fitPanel -selected;" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "select -hi;fitPanel -selected;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ExpndHI" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -hi;fitPanel -selected;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "string $allObjs[] = `ls-sl`;\nfor($x=0;$x<size($allObjs);$x++) {\nrename $allObjs[$x] (\"NewName\" + $x);\n}" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "string $allObjs[] = `ls-sl`;\nfor($x=0;$x<size($allObjs);$x++) {\n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Rename" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $allObjs[] = `ls-sl`;\nfor($x=0;$x<size($allObjs);$x++) {\nrename $allObjs[$x] (\"DecalGround\" + $x);\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
